<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2022第一季度工作学习计划</title>
      <link href="/2022/02/11/essay/quarter-plan202201/"/>
      <url>/2022/02/11/essay/quarter-plan202201/</url>
      
        <content type="html"><![CDATA[<p>2022 新的一年，以此篇文章为开始，以后每一季度列出自己的工作和学习计划</p><h1 id="2022-第一季度工作学习计划"><a href="#2022-第一季度工作学习计划" class="headerlink" title="2022 第一季度工作学习计划"></a>2022 第一季度工作学习计划</h1><h2 id="一、总体目标"><a href="#一、总体目标" class="headerlink" title="一、总体目标"></a>一、总体目标</h2><ol><li>纠正工作态度</li><li>提高自主学习积极性</li><li>养成良好生活习惯</li></ol><h2 id="二、工作计划"><a href="#二、工作计划" class="headerlink" title="二、工作计划"></a>二、工作计划</h2><p>此工作计划截止日期为 2022 年 3 月 31 日，此时间内工作重心为兰青 e 保理系统的开发工作</p><h3 id="e-保理系统已完成的工作："><a href="#e-保理系统已完成的工作：" class="headerlink" title="e 保理系统已完成的工作："></a>e 保理系统已完成的工作：</h3><h4 id="客户端："><a href="#客户端：" class="headerlink" title="客户端："></a>客户端：</h4><ol><li>用户注册、登录、修改密码、找回密码；</li><li>企业绑定、基础资料提交；</li><li>申请综合授信；</li><li>生成综合授信额度；</li><li>实名认证（上上签）；</li><li>申请综合授信合同（上上签）。</li></ol><h4 id="管理后台："><a href="#管理后台：" class="headerlink" title="管理后台："></a>管理后台：</h4><ol><li>管理人员注册、登录；</li><li>后台系统权限管理；</li><li>企业管理、基础资料审批；</li><li>授信审批；</li><li>合同申请审批。</li></ol><h3 id="e-保理系统下阶段计划"><a href="#e-保理系统下阶段计划" class="headerlink" title="e 保理系统下阶段计划"></a>e 保理系统下阶段计划</h3><ol><li>完成上上签正式环境切换（截止 2022-02-14）</li><li>保理系统加入线上业务，实现用户线上办理业务，包括业务申请，业务审批，业务合同申请，业务合同审批，业务合同签署，业务办理确认等工作，预计 2022 年 3 月初完成上线</li><li>保理系统前端 UI 整合，重构出一套更合理，更方便用户操作的前端页面，预计 2022 年 3 月底完成</li></ol><h2 id="学习计划"><a href="#学习计划" class="headerlink" title="学习计划"></a>学习计划</h2><p>此学习计划截止日期为 2022 年 3 月 31 日。</p><ol><li>保理业务深入学习，多与雷哥请教相关知识</li><li>金融知识学习</li><li>互联网产品相关知识学习，努力向半个产品经理的角色靠近</li><li>前端知识学习，查漏补缺</li><li>看书</li></ol><h2 id="生活习惯与工作态度"><a href="#生活习惯与工作态度" class="headerlink" title="生活习惯与工作态度"></a>生活习惯与工作态度</h2><p>努力完成以下目标：</p><ol><li>规律生活，养成良好生活习惯</li><li>多看书，积极学习，修身养性，保持良好心态</li><li>严格按照计划安排生活、工作与学习</li><li>不迟到，不旷工</li></ol><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>送给自己一句话：undefined is true.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ESSAY </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随记 </tag>
            
            <tag> 计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于img的src不变让浏览器重新加载的实现(图形验证码)</title>
      <link href="/2020/05/13/fe/img-reload/"/>
      <url>/2020/05/13/fe/img-reload/</url>
      
        <content type="html"><![CDATA[<p>最近做的项目有这么一个需求：根据手机号获取图形验证码后，填写图形验证码后向手机发送短信验证码，如下图：<br><img src="/blogimgs/img-reload1.png" alt="图形验证码"><br>我在几周前实现了这个功能，上线也有一段时间了，自己测试了几次都没啥问题，也是个不太起眼的功能，所以没太过多关注，但是今天用户在使用的时候，跟我反馈图形验证码不能“换一张”，我立马本地测试发现并没问题，线上测试几次也没问题，但是用户那边始终在点击“换一张”之后图片并未更换，我百思不得其解，然后在查阅了一些文章后发现了问题的所在。</p><h2 id="What’s-the-problem"><a href="#What’s-the-problem" class="headerlink" title="What’s the problem??"></a>What’s the problem??</h2><p>先看看我原来是如何实现的：</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">//...</span><span class="token operator">&lt;</span>Form<span class="token punctuation">.</span>Item label<span class="token operator">=</span><span class="token string">"手机号码"</span> hasFeedback<span class="token operator">></span>  <span class="token punctuation">{</span><span class="token function">getFieldDecorator</span><span class="token punctuation">(</span><span class="token string">"phone"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        required<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>        message<span class="token punctuation">:</span> <span class="token string">"请输入您的手机号码"</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        validator<span class="token punctuation">:</span> async <span class="token punctuation">(</span>rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>          <span class="token keyword">const</span> res <span class="token operator">=</span> await userRequest<span class="token punctuation">.</span><span class="token function">checkPhoneDuplicate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            phone<span class="token punctuation">:</span> value<span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">callback</span><span class="token punctuation">(</span><span class="token string">"用户不存在！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">20011</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Input placeholder<span class="token operator">=</span><span class="token string">"请输入您的手机号码"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token punctuation">.</span>Item<span class="token operator">></span><span class="token comment" spellcheck="true">//...</span><span class="token operator">&lt;</span>Form<span class="token punctuation">.</span>Item label<span class="token operator">=</span><span class="token string">"图形验证码"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>Row gutter<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">}</span> className<span class="token operator">=</span><span class="token string">"form-row"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Col span<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token operator">></span>      <span class="token punctuation">{</span><span class="token function">getFieldDecorator</span><span class="token punctuation">(</span><span class="token string">"img_code"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> required<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">"请输入验证码！"</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Input <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>Col<span class="token operator">></span>    <span class="token operator">&lt;</span>Col span<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">14</span><span class="token punctuation">}</span><span class="token operator">></span>      <span class="token punctuation">{</span><span class="token function">getFieldValue</span><span class="token punctuation">(</span><span class="token string">"phone"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">getFieldValue</span><span class="token punctuation">(</span><span class="token string">"phone"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">11</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>Row<span class="token operator">></span>          <span class="token operator">&lt;</span>Col span<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">16</span><span class="token punctuation">}</span><span class="token operator">></span>            <span class="token operator">&lt;</span>img              src<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token string">`xxx/v2/api/api/v1/user/register/image/code/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">getFieldValue</span><span class="token punctuation">(</span>                <span class="token string">"phone"</span>              <span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">}</span>              id<span class="token operator">=</span><span class="token string">"img-code"</span>            <span class="token operator">/</span><span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>Col<span class="token operator">></span>          <span class="token operator">&lt;</span>Col span<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token operator">></span>            <span class="token operator">&lt;</span>a              onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">const</span> phone <span class="token operator">=</span> <span class="token function">getFieldValue</span><span class="token punctuation">(</span><span class="token string">"phone"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">setFieldsValue</span><span class="token punctuation">(</span>                  <span class="token punctuation">{</span>                    phone<span class="token punctuation">:</span> <span class="token string">" "</span><span class="token punctuation">,</span>                  <span class="token punctuation">}</span><span class="token punctuation">,</span>                  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setFieldsValue</span><span class="token punctuation">(</span><span class="token punctuation">{</span> phone<span class="token punctuation">:</span> phone <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">}</span>            <span class="token operator">></span>              换一张            <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>Col<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>Row<span class="token operator">></span>      <span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>Col<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>Row<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token punctuation">.</span>Item<span class="token operator">></span><span class="token comment" spellcheck="true">// ...</span></code></pre><p>我原来的思路是这样：用户输入手机号后，根据输入的手机号，将 api 直接拼接成 url 放入<code>img</code>标签的 src 属性中，这样能获取到第一张图片，之后用户点击换一张时，先保存现在的手机号常量<code>phone</code>，将表单里的<code>phone</code>项的值设为空，然后在<code>setFieldsValue</code>函数的回调中，再将表单的<code>phone</code>项的值设为之前保存的电话号码，这样触发<code>img</code>标签的重新渲染，重新触发请求获取新的图片。这个思路当时在我看来没啥问题，我自己本地测试没问题，部署后测试也没啥问题，除了是用将值设为空在设回原值这种方法着实有点痨，但是当时也没想到更好的办法，也是第一次做这种需求，也就没多管了，事实证明，你永远也逃不过你在写 bug 这件事，今天用户反馈的时候，我思考了半天觉得没啥问题，唯一可能出现问题的地方可能是<code>setFieldsValue</code>这个 api 我是不是使用有什么不当，翻看文档以后始终没解决问题，而且令我更疑惑的是为什么我电脑上没问题，别人那里就会出问题。<br>于是，我把关注点转向了浏览器，但是始终也没找出个究竟，最后我决定，上 google 看看别人对这种需求的实现，看完以后，恍然大悟。</p><h2 id="How-did-I-solve-it"><a href="#How-did-I-solve-it" class="headerlink" title="How did I solve it??"></a>How did I solve it??</h2><p>看完一些文章后我发现，对于类似“换一张验证码”这种保持图片 src 不变，重新加载图片的需求，正确的做法是在每次点击重新加载图片时，在 url 的 query 里面，加一段随机数，这样来保证每次<code>img</code>里面的 src 是不一样的，但请求的地址不会变，于是我照这种方法改了自己的代码逻辑如下：</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// ...</span><span class="token operator">&lt;</span>Row<span class="token operator">></span>  <span class="token operator">&lt;</span>Col span<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">16</span><span class="token punctuation">}</span><span class="token operator">></span>    <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token string">`xxx/v2/api/api/v1/user/register/image/code/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">getFieldValue</span><span class="token punctuation">(</span><span class="token string">'phone'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">}</span> id<span class="token operator">=</span><span class="token string">"img-code"</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>Col<span class="token operator">></span>  <span class="token operator">&lt;</span>Col span<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token operator">></span>    <span class="token operator">&lt;</span>a      onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'img-code'</span><span class="token punctuation">)</span> as HTMLImageElement        <span class="token keyword">if</span> <span class="token punctuation">(</span>img<span class="token punctuation">)</span> <span class="token punctuation">{</span>          img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token template-string"><span class="token string">`xxxx/v2/api/api/v1/user/register/image/code/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">getFieldValue</span><span class="token punctuation">(</span><span class="token string">'phone'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?t=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token operator">></span>      换一张    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>Col<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Row<span class="token operator">></span><span class="token comment" spellcheck="true">// ...</span></code></pre><p>问题得到了解决，现在的思路是这样:在每次点击换一张时，通过 dom 操作更换<code>img</code>的 src 属性，通过<code>Math.random()</code>函数每次生成随机数（这里也可以加时间戳），放入 query 里面，这样每次就能获取新的验证码图片</p><h2 id="为什么要这样做？？"><a href="#为什么要这样做？？" class="headerlink" title="为什么要这样做？？"></a>为什么要这样做？？</h2><p>原来，每个浏览器有自己的缓存策略，像<code>img</code>标签的这样的请求，如果下一次请求时 src 与上一次是相同的，那浏览器就直接去读取缓存了，不会触发新的网络请求，所以，保证每次 src 都不一样的话，浏览器就不会读取缓存，而是请求新的 src 地址。</p><p>那为什么我之前的逻辑，在我电脑上依旧可以实现呢？原来，我的 chrome 开了下面这个东西：<br><img src="/blogimgs/img-reload2.png" alt="chrome network 设置"><br>相信你也跟我一样恍然大悟，开了这个以后，每次<code>img</code>的请求都不会去读取缓存，所以表面上似乎是实现了这个需求，但是用户的浏览器并不一定开了这个设置，所以自然点击的时候没有反应</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>嗯，问题解决了，奇怪了知识又增加了（逃</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> FE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FE </tag>
            
            <tag> 图形验证码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置gittalk时显示Error：Not Found的问题解决</title>
      <link href="/2020/05/08/gittalk/"/>
      <url>/2020/05/08/gittalk/</url>
      
        <content type="html"><![CDATA[<p>新搭建的 boke 使用的主题中，很好的集成了<code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>Disqus</code> 等评论模块，但作者推荐使用的是<code>Gitalk</code>，之前也使用过，所以我选择了它，关于<code>Gitalk</code>的使用，各种配置，网上的教程一大堆，我这里不做介绍，主要记录一个困扰我几个小时问题：</p><p>在按照网上教程填好各种配置后，页面上使用显示<code>Error：Not Found</code>的报错，尝试了各种办法，搜了各种同类问题的解决办法看，始终解决不了，在临近崩溃的边缘，突然看到一个<a href="https://github.com/gitalk/gitalk/issues/379">issue</a>，看了之后尝试了一下，问题解决了</p><p>解决的办法是这样，<code>Gitalk</code>的配置中有一项<code>rope</code>，这个配置项作者在文档中介绍的是，<code>GitHub repo</code>，也就是你用来存储评论的远端仓库地址，我在 github 创建的仓库地址为：<a href="https://github.com/liyuandie/hexo-blog-comment">https://github.com/liyuandie/hexo-blog-comment</a> 所以我这里自然填的是这个，但是当我把<code>rope</code>这项配置改为<code>hexo-blog-comment</code>时，我的报错问题就解决了，测试评论的发表和显示都没问题，也就是说这里根本不用写完整地址，在你填完其他配置项后，他是能找到你的 github 地址的，只用填仓库名称就行了，但是这点在文档中并未提及，不知道是我的原因还是文档原因，这个我下来会仔细查看一下源码看看作者的实现，先将这个问题记录在这里。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> FE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> hexo </tag>
            
            <tag> gittalk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用hexo搭建新的博客</title>
      <link href="/2020/05/08/hexo-blog/"/>
      <url>/2020/05/08/hexo-blog/</url>
      
        <content type="html"><![CDATA[<p>昨天在看别人写的文章时发现他的博客挺好看，是用 hexo 搭建的，之前我自己的博客是用 gatsby 搭建的，那会儿在学 react，正好堂兄推荐了，我就用了，主题也是直接 copy 他的，一直对样式不太满意，出于懒惰也一直没改，所以看到昨天那位大佬的博客后，决定自己用 hexo 重新搭建一个，之前的博客保留在:<a href="https://yanzulee.me/">https://yanzulee.me/</a> 作为纪念。</p><p>这里简单记录一下用 hexo 搭建的过程，因为中间遇到的坑也不少</p><h2 id="使用-hexo-新建博客项目"><a href="#使用-hexo-新建博客项目" class="headerlink" title="使用 hexo 新建博客项目"></a>使用 hexo 新建博客项目</h2><p>关于 hexo，我这里也不做过多介绍了，有兴趣可以自己在官网查看:<a href="https://hexo.io/zh-cn/docs/">hexo</a></p><h3 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 hexo</h3><p>先全局安装 hexo 的命令行工具：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli</code></pre><p>或者如果你熟悉 npm 的话，可以局部安装 hexo：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-cli</code></pre><p>然后有两种方式执行 hexo 命令：</p><ol><li><code>npx hexo &lt;command&gt;</code></li><li>将 hexo 所在的目录下的 node_modules 添加到环境变量之中即可直接使用<code>hexo &lt;command&gt;</code>：</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token string">'PATH="<span class="token variable">$PATH</span>:./node_modules/.bin"'</span> <span class="token operator">>></span> ~/.profile</code></pre><h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><p>安装完 hexo 后，执行以下命令：</p><pre class=" language-bash"><code class="language-bash">hexo init myBlog<span class="token function">cd</span> myBlog<span class="token function">npm</span> i</code></pre><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>项目就建好了之后，要运行项目，执行：</p><pre class=" language-bash"><code class="language-bash">hexo server</code></pre><p>这时打开 <code>http://localhost:4000/</code> 你就会看到你新建的 hexo 项目。</p><h3 id="替换主题"><a href="#替换主题" class="headerlink" title="替换主题"></a>替换主题</h3><p>hexo 有默认的主题，但是不太美观，hexo 官网也提供了很多主题模板，参考：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a><br>但我没有使用官方提供的这些主题，找到了之前提到大佬使用的主题，是另外以为大佬开源的自制主题：<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">hexo-theme-matery</a><br>替换主题的方法和相关配置的修改，大佬的文档写的很清楚，也有中文版，我这里也不做介绍，根据文档可以很快设置好自己喜欢的博客风格。</p><h3 id="网站配置"><a href="#网站配置" class="headerlink" title="网站配置"></a>网站配置</h3><p>关于 hexo 网站的相关配置，参考：<a href="https://hexo.io/zh-cn/docs/configuration">https://hexo.io/zh-cn/docs/configuration</a></p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>之前的博客部署使用的是 coding 的 pages 服务，很方便，所以我决定继续部署在 coding，如果你想使用 github pages 部署，hexo 的文档写的很清晰，可以参考：<a href="https://hexo.io/zh-cn/docs/github-pages">部署 Github Pages</a>，我这里记录我部署在 coding 的过程。</p><p>首先在 coding 新建一个仓库，用于储存我的项目代码，取名叫<code>hexo-blog</code>，然后在新建一个仓库，用于存储我的静态文件，也就是<code>/public</code>文件夹下的东西，取名<code>hexo-blog-statics</code>，然后执行以下步骤：</p><ol><li>安装<a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a></li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre><ol start="2"><li>修改 hexo 项目根目录下的<code>_config.yml</code>文件的以下配置：</li></ol><pre><code>deploy:  type: git  repo: &lt;repository url&gt; #这里填我的用于储存静态文件的仓库地址  branch: [branch]  message: [message]</code></pre><ol start="3"><li>执行部署：</li></ol><pre class=" language-bash"><code class="language-bash">hexo ghexo clean <span class="token operator">&amp;&amp;</span> hexo deploy</code></pre><p>这里可省略为一步：</p><pre class=" language-bash"><code class="language-bash">hexo clean <span class="token operator">&amp;&amp;</span> hexo deploy -g</code></pre><blockquote><p>由于 Hexo 的部署默认使用分支 master，所以如果你同时正在使用 Git 管理你的站点目录，你应当注意你的部署分支应当不同于写作分支。<br>一个好的实践是将站点目录和 Pages 分别存放在两个不同的 Git 仓库中，可以有效避免相互覆盖。<br>Hexo 在部署你的站点生成的文件时并不会更新你的站点目录。因此你应该手动提交并推送你的写作分支。</p></blockquote><p>这时会生成站点文件并推送至远程库，并完全覆盖该分支下的所有内容，然后在 coding 设置好 pages 服务，访问生成的链接就能看到我的博客了，然后 coding 也提供了自定义域名的功能，出于保留原来博客的原因，我在阿里云新买了域名，个人觉得阿里云比 godaddy 便宜一点，两年的价格相差了一倍，设置好域名后访问新设置的域名就能看到新地址下的博客了</p><p>剩下的事就是将原来的文章全部迁移过来了，迁移过程感觉比较友好，虽然耗时挺多，但基本无阻塞。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>个人觉得整个过程还是挺轻松的，所有用到的文档都写的很清楚，时间主要花费在调整自己喜欢的样式，个人觉得 hexo 比 gastby 好用，但主要是贡献者们提供的功能足够细化。对新博客比较满意。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> FE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Hooks(三)：自定义Hook</title>
      <link href="/2019/08/14/react-hooks/part3/"/>
      <url>/2019/08/14/react-hooks/part3/</url>
      
        <content type="html"><![CDATA[<h2 id="自定义-Hook"><a href="#自定义-Hook" class="headerlink" title="自定义 Hook"></a>自定义 Hook</h2><p>这一篇我们介绍如何自定义 Hook，react 除了我们之前介绍的<code>useState</code>与<code>useEffect</code>两个 Hook 外，还有一些使用频率比较低的 Hook，比如<code>useContext</code>，这里我们就不做介绍了，除了使用这些内置的 Hook，我们还可以使用自定义的 Hook，自定义 Hook 可以将组建逻辑提取到可以重用的函数中。</p><p>在上一篇的介绍 Effect Hook 时，我们定义了一个订阅好友状态的组件：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEfeect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">FriendStatus</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>isOnline<span class="token punctuation">,</span> setIsOnline<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">handleStatusChange</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">setIsOnline</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>isOnline<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ChatAPI<span class="token punctuation">.</span><span class="token function">subcribe2FriendStatus</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//返回一个函数来执行清除订阅，在组件卸载时会调用</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      ChatAPI<span class="token punctuation">.</span><span class="token function">unSubcribeFromFriendStatus</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>isOnline <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'loading....'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> isOnline <span class="token operator">?</span> <span class="token string">'Online'</span> <span class="token punctuation">:</span> <span class="token string">'Offline'</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>现在假设在我们的聊天应用中有一个聊天列表，用户在线时需要把名字设置成绿色，这其实也是获取用户的在线状态，我们可以把上面类似的逻辑复制粘贴过来：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEfeect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">FriendListItem</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>isOnline<span class="token punctuation">,</span> setIsOnline<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">handleStatusChange</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">setIsOnline</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>isOnline<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ChatAPI<span class="token punctuation">.</span><span class="token function">subcribe2FriendStatus</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      ChatAPI<span class="token punctuation">.</span><span class="token function">unSubcribeFromFriendStatus</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>li style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> color<span class="token punctuation">:</span> isOnline <span class="token operator">?</span> <span class="token string">'green'</span> <span class="token punctuation">:</span> <span class="token string">'red'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这并不是理想的解决方案，在 <code>FriendStatus</code> 与 <code>FriendListItem</code> 共享的逻辑我们可单独抽离出来，我们来看看如何使用 Hook 来抽离两个组件共享的逻辑。</p><h3 id="抽离自定义-Hook"><a href="#抽离自定义-Hook" class="headerlink" title="抽离自定义 Hook"></a>抽离自定义 Hook</h3><p>抽离共享逻辑我们并不陌生，往往当我们想要在两个函数之间共享逻辑时，我们会把相同的部分抽离到第三个部分，不同的部分作为参数传递给第三个函数。在这里，我们的组件和 Hook 其实都是函数，所以一样可以用这种方式。</p><p>自定义的 Hook 是一个函数，react 要求我们命名 Hook 时要以’use’开头，才符合 Hook 规则，所以我们使用<code>useFriendStatus</code>作为自定义 Hook 的名称：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEfeect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">useFriendStatus</span><span class="token punctuation">(</span>friendID<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>isOnline<span class="token punctuation">,</span> setIsOnline<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">handleStatusChange</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">setIsOnline</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>isOnline<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ChatAPI<span class="token punctuation">.</span><span class="token function">subcribe2FriendStatus</span><span class="token punctuation">(</span>friendID<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      ChatAPI<span class="token punctuation">.</span><span class="token function">unSubcribeFromFriendStatus</span><span class="token punctuation">(</span>friendID<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> isOnline<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>现在我们已经完成了自定义 Hook 的工作，并没有做任何神奇的改变，所有逻辑都是直接拷贝过来的，唯一不同的是这并不是一个组件函数，所以我们返回的只是好友的在线状态，由于返回的是某个好友的在线状态，所以我们需要传递一个 friendID 作为参数</p><p>自定义好了 Hook，我们来看看如何使用。</p><h3 id="使用自定义-Hook"><a href="#使用自定义-Hook" class="headerlink" title="使用自定义 Hook"></a>使用自定义 Hook</h3><p>在 <code>FriendStatus</code> 与 <code>FriendListItem</code>之间公用的逻辑就是我们抽离出来的部分，其作用是订阅某位好友是否在线，而<code>useFriendStatus</code>的作用就是这个，所以使用 Hook，只需要将原来组件中重复的逻辑替换成我们自定义的 Hook 就行了：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">FriendStatus</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> isOnline <span class="token operator">=</span> <span class="token function">useFriendStatus</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>isOnline <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'loading....'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> isOnline <span class="token operator">?</span> <span class="token string">'Online'</span> <span class="token punctuation">:</span> <span class="token string">'Offline'</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEfeect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">FriendListItem</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> isOnline <span class="token operator">=</span> <span class="token function">useFriendStatus</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>li style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> color<span class="token punctuation">:</span> isOnline <span class="token operator">?</span> <span class="token string">'green'</span> <span class="token punctuation">:</span> <span class="token string">'red'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>现在我们就完成了一个简单的自定义 Hook，以及对它的使用，其实非常简单。</p><p>React Hooks 极大的提高了我们的开发效率，关于 Hook 的分享就到这里了，希望以后大家都可以熟练的运用这个技能。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> react hooks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Hooks(二)：使用Effect Hook</title>
      <link href="/2019/08/13/react-hooks/part2/"/>
      <url>/2019/08/13/react-hooks/part2/</url>
      
        <content type="html"><![CDATA[<h1 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h1><p>我们接上一篇接着介绍 React Hooks，回到上一篇开头我们的疑问：不使用 class 的情况下怎么使用 state 呢？生命周期呢？</p><p>在上一篇我们介绍了 State Hook 的使用，第一个问题已经解决了，现在我们来关注第二个问题，关于生命周期的问题。</p><p>同样是上一篇计数器的例子，现在我们增加一个需求：将 document 的 title 设置为包含点击次数的消息。</p><p>在 class 中，执行 this.setState()方法后会触发 render 函数重新渲染，但是 render 函数并不会更新页面标题，所以我们需要在 react 组件更新后使用浏览器 API 手动改变页面标题，我们可以这样做：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Componnet <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token keyword">extends</span> <span class="token class-name">Componnet</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//关键代码******start</span>  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token template-string"><span class="token string">`You Clicked </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> times!`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token template-string"><span class="token string">`You Clicked </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> times!`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//关键代码******end</span>  addCount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> count <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>You Clicked <span class="token punctuation">{</span>count<span class="token punctuation">}</span> times<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>addCount<span class="token punctuation">}</span><span class="token operator">></span>Click me<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Example<span class="token punctuation">;</span></code></pre><p>在上面的 class 中，我们将更新页面标题的操作放到了<code>componentDidMount</code>与<code>componentDidUpdate</code>，熟悉 react 的小伙伴都知道这是两个生命周期函数，它们在 React 更新 DOM 后立即更新了 document 的 title 属性。但是注意，<strong>在这个 class 中，我们需要在两个生命周期函数中编写重复的代码</strong>，这是因为很多情况下，我们希望在组件加载和更新时执行同样的操作。从概念上说，我们希望它在每次渲染之后执行 —— 但 React 的 class 组件没有提供这样的方法。即使我们提取出一个方法，我们还是要在两个地方调用它。</p><p>现在，我们使用 React Hooks 特性来改写上面的示例：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> addCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token template-string"><span class="token string">`You Clicked </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> times!`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>p<span class="token operator">></span>You Clicked <span class="token punctuation">{</span>count<span class="token punctuation">}</span> times<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">addCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>Click me<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这段代码与前面的 class 具有同样的功能：在重新渲染后，更新页面标题。这里就使用到了我们今天的主角：useEffect</p><h2 id="useEffect-1"><a href="#useEffect-1" class="headerlink" title="useEffect"></a>useEffect</h2><p>我们再来观察上面的示例：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> addCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//关键代码******start</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token template-string"><span class="token string">`You Clicked </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> times!`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//关键代码******end</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>p<span class="token operator">></span>You Clicked <span class="token punctuation">{</span>count<span class="token punctuation">}</span> times<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">addCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>Click me<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>示例中，我们在函数内部使用了另一个函数<code>useEffect</code>，它同<code>useState</code>一样也是一个 Hook，那么它的作用是什么呢？</p><p>通过使用<code>useEffect</code>，你可以概述 React 组件在渲染后执行某些操作，React 会保存你传递的函数（我们将它称之为 “effect”），并且在执行 DOM 更新之后调用它。例如在上面的例子中，我们在组件渲染后设置了 documnet 的 title 属性。除此之外，我们还可以进行其他的操作，例如获取数据或者调取其他命令式的 API。</p><p>其次，<code>useEffect</code>在 react 组件第一次渲染和之后每次更新后都会执行，所以我们不用再考虑“挂载”还是“更新”。React 保证了每次运行 effect 的同时，DOM 都已经更新完毕，所以我们不用像之前 class 中一样，分别考虑两种情况，<strong>事实上</strong>，你可以将<code>useEffect</code>看做<code>componentDidMount</code>、<code>componentDidUpdate</code>与<code>componentWillUnmount</code>三个函数的组合，我们可以在里面执行“发送网络请求”、“订阅监听”、“手动变更 DOM”等操作。</p><p>为什么在组件内部调用 useEffect？ 将 <code>useEffect</code> 放在组件内部让我们可以在 effect 中直接访问 count state 变量（或其他 props）。我们不需要特殊的 API 来读取它 —— 它已经保存在函数作用域中。还记得闭包吗？Hook 使用了 JavaScript 的闭包机制，而不用在 JavaScript 已经提供了解决方案的情况下，还引入特定的 React API。</p><p>现在，你应该已经明白了<code>useEffect</code>是如何工作的了。</p><h2 id="需要清除的-effect"><a href="#需要清除的-effect" class="headerlink" title="需要清除的 effect"></a>需要清除的 effect</h2><p>前面我们提到，使用<code>useEffect</code>传递的函数（或者说一些操作语句）我们称之为“effect”，在<code>useEffect</code>中的一些操作，例如网络请求，更新 DOM 等都叫 effct，大多数情况下，我们只要让这些“effect”去执行就行了，然后在某些特定情况下，我们并不能对它们进行“散养”。例如，我们时常会有<strong>订阅外部数据源</strong>的操作，这种情况下，在组件卸载后进行清除工作是非常重要的，可以防止内存泄露。像这一类的操作，我们称之为“需要清除的 effect”。</p><p>如果你是 React 老手，你应该对这类操作不陌生，在 React class 中我们通常在<code>componentDidMount</code>设置订阅，然后在<code>componentWillUnmount</code>中清除它。例如，假设我们有一个 <code>ChatAPI</code> 模块，它允许我们订阅好友的在线状态。以下是我们如何使用 class 订阅和显示该状态：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Componnet <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">FriendStatus</span> <span class="token keyword">extends</span> <span class="token class-name">Componnet</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      isOnline<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ChatAPI<span class="token punctuation">.</span><span class="token function">subcribe2FriendStatus</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ChatAPI<span class="token punctuation">.</span><span class="token function">unSubcribeFromFriendStatus</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  handleStatusChange <span class="token operator">=</span> status <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      isOnline<span class="token punctuation">:</span> status<span class="token punctuation">.</span>isOnline<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> isOnline <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isOnline <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token string">'loading....'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> isOnline <span class="token operator">?</span> <span class="token string">'Online'</span> <span class="token punctuation">:</span> <span class="token string">'Offline'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> FriendStatus<span class="token punctuation">;</span></code></pre><p>假设此时我们要求使用 Hook 来完成这个需求，你可能立马想到使用<code>useEffect</code>，但是你有没有思考一个问题，我们说过，<code>useEffect</code>是<code>componentDidMount</code>、<code>componentDidUpdate</code>与<code>componentWillUnmount</code>三个函数的组合，我们在里面设置了订阅，那么该在什么时候执行清除呢？<code>useEffect</code>已经为我们考虑到了这一点，事实上，它在设计时就考虑到了这一点，订阅与取消订阅的操作在同一个地方执行：<strong>如果你的 effect 返回一个函数，React 将会在执行清除操作时调用它。</strong></p><p>那么我们可以这样来写：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEfeect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">FriendStatus</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>isOnline<span class="token punctuation">,</span> setIsOnline<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">handleStatusChange</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">setIsOnline</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>isOnline<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ChatAPI<span class="token punctuation">.</span><span class="token function">subcribe2FriendStatus</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//返回一个函数来执行清除订阅，在组件卸载时会调用</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      ChatAPI<span class="token punctuation">.</span><span class="token function">unSubcribeFromFriendStatus</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>isOnline <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'loading....'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> isOnline <span class="token operator">?</span> <span class="token string">'Online'</span> <span class="token punctuation">:</span> <span class="token string">'Offline'</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>事实上，“返回一个函数”就是<code>useEffect</code>为我们提供的清除机制，每一个 effect 都可以返回一个清除函数，这样我们可以将添加和清除订阅的操作放在一起，当然这是可选的，当我们需要清除时，就返回一个函数就可以了。</p><p>那 effect 是何时被清除的呢？React 会在组件卸载时执行清除操作，之前说过，effect 在每次渲染的时候都会执行，所以 React 会在执行当前 effect 之前对上一个 effect 进行清除。</p><h2 id="深入-Effect"><a href="#深入-Effect" class="headerlink" title="深入 Effect"></a>深入 Effect</h2><p>我们继续深入了解<code>useEffect</code>的一些特性</p><h3 id="使用多个-Effect-实现关注点分离"><a href="#使用多个-Effect-实现关注点分离" class="headerlink" title="使用多个 Effect 实现关注点分离"></a>使用多个 Effect 实现关注点分离</h3><p>假如我们要将计数器和好友状态指示器的逻辑组合在一起（当然这只是举例，现实工作中我们一定也会有这类需求），使用 class 的话我们应该怎么做呢？</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">FriendStatusWithCounter</span> <span class="token keyword">extends</span> <span class="token class-name">Componnet</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      isOnline<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">componnetDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token template-string"><span class="token string">`You clicked </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> times`</span></span><span class="token punctuation">;</span>    ChatAPI<span class="token punctuation">.</span><span class="token function">subcribe2FriendStatus</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token template-string"><span class="token string">`You clicked </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> times`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ChatAPI<span class="token punctuation">.</span><span class="token function">unSubcribeFromFriendStatus</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  handleStatusChange <span class="token operator">=</span> status <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      isOnline<span class="token punctuation">:</span> status<span class="token punctuation">.</span>isOnline<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><p>可以发现设置 document.title 的逻辑被分割到了 <code>componentDidMount</code> 和 <code>componentDidUpdate</code> 两个函数中，订阅逻辑又被分割到 <code>componentDidMount</code> 和 <code>componentWillUnmount</code> 中了。而且 <code>componentDidMount</code> 中同时包含了两个不同功能的代码。 事实上，在实际工作中，可能逻辑比这还要混乱，使用生命周期函数迫使我们拆分这些逻辑代码。</p><p><strong>使用 Hook 其中一个目的就是要解决 class 中生命周期函数经常包含不相关的逻辑</strong>，那么使用 Hook 是如何来解决的呢？就像你可以使用多个 state 的 Hook 一样，你也可以使用多个 effect，这会将不相关逻辑分离到不同的 effect 中：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">FriendStatusWithCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token template-string"><span class="token string">`You clicked </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> times`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>isOnline<span class="token punctuation">,</span> setIsOnline<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">handleStatusChange</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">setIsOnline</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>isOnline<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ChatAPI<span class="token punctuation">.</span><span class="token function">subcribe2FriendStatus</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      ChatAPI<span class="token punctuation">.</span><span class="token function">unSubcribeFromFriendStatus</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><p>Hook 允许我们按照代码的用途分离他们，而不是像生命周期函数那样。React 将按照 effect 声明的顺序依次调用组件中的每一个 effect。</p><h3 id="为什么每次更新的时候都要运行-Effect"><a href="#为什么每次更新的时候都要运行-Effect" class="headerlink" title="为什么每次更新的时候都要运行 Effect"></a>为什么每次更新的时候都要运行 Effect</h3><p>我们回过头看最开始用 class 定义的显示好友是否在线的 <code>FriendStatus</code> 组件，从 class 中 props 读取 friend.id，然后在组件挂载后订阅好友的状态，并在卸载组件的时候取消订阅：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ...</span><span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ChatAPI<span class="token punctuation">.</span><span class="token function">subcribe2FriendStatus</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  ChatAPI<span class="token punctuation">.</span><span class="token function">unSubcribeFromFriendStatus</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其实这里存在我们常犯的一个错误，思考一下，当组件已经显示在屏幕上时，props 中的 friend 发生变化会发生什么，组件将继续展示原来的好友状态。这是一个容易忽略的 bug，但是极易发生，甚至我们还会因为取消订阅时使用错误的 friend.id 导致内存泄露或崩溃问题。</p><p>所以此时我们需要添加 <code>componentDidUpdate</code> 来解决这个问题：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ...</span><span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  ChatAPI<span class="token punctuation">.</span><span class="token function">subcribe2FriendStatus</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//关键代码******start</span><span class="token function">componentDidUpdate</span><span class="token punctuation">(</span>prevProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//取消订阅之前的friend.id</span>  ChatAPI<span class="token punctuation">.</span><span class="token function">unSubcribeFromFriendStatus</span><span class="token punctuation">(</span>prevProps<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 订阅新的friend.id</span>  ChatAPI<span class="token punctuation">.</span><span class="token function">subcribe2FriendStatus</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//关键代码******end</span><span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  ChatAPI<span class="token punctuation">.</span><span class="token function">unSubcribeFromFriendStatus</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>忘记正确地处理 <code>componentDidUpdate</code> 是 React 应用中常见的 bug 来源。</p><p>那么我们来看使用 Hook 的版本：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">FriendStatus</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>    ChatAPI<span class="token punctuation">.</span><span class="token function">subcribe2FriendStatus</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      ChatAPI<span class="token punctuation">.</span><span class="token function">unSubcribeFromFriendStatus</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><p>我们并未做任何改动，因为自从我们使用<code>useEffect</code>，它就为我们避免了这个 bug，因为每次更新时都会运行 effect，它会在调用一个新的 effect 之前对前一个 effect 进行清理。现在你明白为什么每次更新时都会执行 effect 了吗？</p><h3 id="通过跳过-effect-来实现性能优化"><a href="#通过跳过-effect-来实现性能优化" class="headerlink" title="通过跳过 effect 来实现性能优化"></a>通过跳过 effect 来实现性能优化</h3><p>事实上，在每次渲染后都执行 effect 可能并不是我们想要的结果，因为这肯定会导致性能问题。在 class 组件中，我们可以通过在 <code>componentDidUpdate</code> 中添加对 prevProps 或 prevState 的比较逻辑解决：</p><pre class=" language-js"><code class="language-js"><span class="token function">componentDidUpdate</span><span class="token punctuation">(</span>prevProps<span class="token punctuation">,</span> prevState<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>prevState<span class="token punctuation">.</span>count <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token template-string"><span class="token string">`You clicked </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> times`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这是很常见的需求，所以它被内置到了 useEffect 的 Hook API 中。如果某些特定值在两次重渲染之间没有发生变化，你可以通知 React 跳过对 effect 的调用，只要传递数组作为 useEffect 的第二个可选参数即可:</p><pre class=" language-js"><code class="language-js"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token template-string"><span class="token string">`You clicked </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> times`</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 仅在 count 更改时更新</span></code></pre><p>上面这个示例中，我们传入 <code>[count]</code> 作为第二个参数。这个参数是什么作用呢？如果 count 的值是 5，而且我们的组件重渲染的时候 count 还是等于 5，React 将对前一次渲染的 [5] 和后一次渲染的 [5] 进行比较。因为数组中的所有元素都是相等的(5 === 5)，React 会跳过这个 effect，这就实现了性能的优化。</p><p>当渲染时，如果 count 的值更新成了 6，React 将会把前一次渲染时的数组 [5] 和这次渲染的数组 [6] 中的元素进行对比。这次因为 5 !== 6，React 就会再次调用 effect。如果数组中有多个元素，即使只有一个元素发生变化，React 也会执行 effect。</p><p>对于有清除操作的 effect 同样适用：</p><pre class=" language-js"><code class="language-js"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">handleStatusChange</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setIsOnline</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>isOnline<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  ChatAPI<span class="token punctuation">.</span><span class="token function">subscribeToFriendStatus</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span> handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    ChatAPI<span class="token punctuation">.</span><span class="token function">unsubscribeFromFriendStatus</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span> handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 仅在 props.friend.id 发生变化时，重新订阅</span></code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>useEffect 可以在组件渲染后实现各种不同的副作用。有些副作用可能需要清除，所以需要返回一个函数</li><li>其他的 effect 可能不必清除，所以不需要返回</li><li>可以使用多个 effect 实现关注点分离</li><li>可以在 useEffect 中使用第二个参数来跳过某些 effect 实现性能优化</li></ul><p>下一篇我们将介绍如何自定义 Hook。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> react hooks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Hooks(一)：Hook简介与使用State Hook</title>
      <link href="/2019/08/12/react-hooks/part1/"/>
      <url>/2019/08/12/react-hooks/part1/</url>
      
        <content type="html"><![CDATA[<p>最近学习了 React 新特性：Hook，可以说我对它是一见钟情，所以打算用几篇文章来介绍一下它。</p><h2 id="Hook-简介"><a href="#Hook-简介" class="headerlink" title="Hook 简介"></a>Hook 简介</h2><p>什么是 Hook？先来看一看官方的介绍：</p><blockquote><p>Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。</p></blockquote><p>看完这段介绍，你可能有跟我第一次看到时一样的疑问：不使用 class 的情况下怎么使用 state 呢？生命周期呢？<br>不急，我们先来看一个例子：</p><p>我们使用 react 实现一个简单的需求：“一个简单的计数器，记录用户点击按钮的次数”。这对我们来说太简单了：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Componnet <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token keyword">extends</span> <span class="token class-name">Componnet</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  addCount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> count <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>You Clicked <span class="token punctuation">{</span>count<span class="token punctuation">}</span> times<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>addCount<span class="token punctuation">}</span><span class="token operator">></span>Click me<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Example<span class="token punctuation">;</span></code></pre><p>对于 React 使用者来说，这段代码是再熟悉不过了，只有一个简单的 state，但是当我们使用 Hook 后，我们可以这样来写：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//s声明一个叫count的state变量</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> addCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>p<span class="token operator">></span>You Clicked <span class="token punctuation">{</span>count<span class="token punctuation">}</span> times<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">addCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>Click me<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果你启动你的项目，打开浏览器，你会发现，两种写法在功能上完全一样，每当我们点击按钮，计数器都会增加 1，但是不难发现两种写法在代码行数上有着明显的差别，使用 Hook 使我们的代码更加精简了，因为我们不用使用 class 的方式来定义有状态组件，而我们通过这种“不使用 class”的方法同样可以使用 state 来控制页面渲染，这是最初 Hook 吸引我的第一个点。</p><h3 id="什么是-Hook？"><a href="#什么是-Hook？" class="headerlink" title="什么是 Hook？"></a>什么是 Hook？</h3><p>在上面的示例中<code>useState</code>就是一个 Hook：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><p><code>Hook</code>是一个特殊的函数，它可以让你“钩入”React 的特性，例如，<code>useState</code>是允许你在 React 组件中添加 state 的 Hook。还有很多其他的 Hook，我们之后再介绍。</p><h3 id="什么时候要用-Hook？"><a href="#什么时候要用-Hook？" class="headerlink" title="什么时候要用 Hook？"></a>什么时候要用 Hook？</h3><p>以前我们使用 React 编写组件时，当组件包含一些 state 状态时，我们采用的方法通常是使用 class 的方法定义组件，我们称之为有状态组件，在 React 发布 v16.8 版本后，增加了新特性 Hook，它允许我们在使用函数定义组件的情况下，向组件添加 state 等 React 特性，而在这之前，我们使用函数定义的组件通常只能是无状态组件，所以，现在我们可以在现有的函数组件中大胆的使用 Hook 来增加 state，不用再定义繁琐的 class 组件。</p><h3 id="什么情况下不能使用-Hook？"><a href="#什么情况下不能使用-Hook？" class="headerlink" title="什么情况下不能使用 Hook？"></a>什么情况下不能使用 Hook？</h3><p>当然我们也不能在任何情况下随心所欲的使用 Kook，react 为我们规定了使用 Hook 时应该遵循的两条规则：</p><p><strong>1.只能在最顶层使用 Hook：</strong></p><p>不要在循环，条件或嵌套函数中使用 Hook，确保总是在你的 React 函数的最顶层调用他们。遵守这条规则，你就能确保 Hook 在每一次渲染中都按照同样的顺序被调用。这让 React 能够在多次的 Hook 调用之间保持 hook 状态的正确。</p><p>关于这一点，你首先要了解，当我们使用 Hook 时，React 是怎么知道哪个 state 对应哪个 useState 的？答案是答案是 React 靠的是 Hook 调用的顺序。所以我们必须保证每次 React 调用 Hook 的顺序相同，才能保证每个 state 正常使用。</p><p><strong>2.只在 React 函数中调用 Hook:</strong></p><p>不要在普通的 JavaScript 函数中调用 Hook。你可以：</p><ul><li>在 React 函数组件中调用 Hook</li><li>在自定义的 Hook 中调用其他 Hook</li></ul><h2 id="使用-State-Hook"><a href="#使用-State-Hook" class="headerlink" title="使用 State Hook"></a>使用 State Hook</h2><p>让我们先来回顾一下前面的示例：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//s声明一个叫count的state变量</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> addCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>p<span class="token operator">></span>You Clicked <span class="token punctuation">{</span>count<span class="token punctuation">}</span> times<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">addCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>Click me<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在这个示例中，我们就使用了 State Hook，具体来说是使用了<code>useState</code>这个 Hook,下面我们来具体介绍一下是怎么使用的。</p><h3 id="声明-State-变量"><a href="#声明-State-变量" class="headerlink" title="声明 State 变量"></a>声明 State 变量</h3><p>在 class 中，我们往往通过在构造函数中设置<code>this.state</code>来声明 state：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Componnet <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token keyword">extends</span> <span class="token class-name">Componnet</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在函数组件中，我们没有 this，所以我们不能直接声明或者读取<code>this.state</code>。使用 Hook，我们直接调用<code>useState</code>：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//s声明一个叫count的state变量</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> addCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>那么调用 useState 的时候发生了什么呢？调用 useState 的时候，函数执行，返回了两个返回值：state 及更新 state 的函数。所以当我们写<code>const [count, addCount] = useState(0);</code>时，分别将这两个返回值赋值给了变量<code>count</code>和<code>addCount</code>，这是一种数组解构赋值，不了解的小伙伴建议学习一下 ES6 语法，这里我们不做介绍，总之，此时，变量<code>count</code>就是我们的 state，而<code>addCount</code>是一个更新 state 的函数。</p><p>其次 useState 只接收一个参数，就是 state 的初始值，我们这里使用<code>useState(0)</code>就表示<code>count</code>的初始值为 0。不同于 class 的是，我们可以按照需要使用数字或字符串对其进行赋值，而不一定是对象。在示例中，只需使用数字来记录用户点击次数，所以我们传了 0 作为变量的初始 state。（如果我们想要在 state 中存储两个不同的变量，只需调用 useState() 两次即可。）</p><p>现在我们知道了<code>useState</code>的作用，那么上面的例子就更容易理解了：我们声明了一个叫 <code>count</code> 的 state 变量，然后把它设为 0。React 会在重复渲染时记住它当前的值，并且提供最新的值给我们的函数。我们可以通过调用 <code>addCount</code> 来更新当前的 count。</p><h3 id="读取-State"><a href="#读取-State" class="headerlink" title="读取 State"></a>读取 State</h3><p>当我们想在 class 中显示当前的 count，我们读取 <code>this.state.count</code>：</p><pre class=" language-js"><code class="language-js"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> count <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>You Clicked <span class="token punctuation">{</span>count<span class="token punctuation">}</span> times<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>addCount<span class="token punctuation">}</span><span class="token operator">></span>Click me<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>在函数中，我们直接读取变量<code>count</code>：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>p<span class="token operator">></span>You Clicked <span class="token punctuation">{</span>count<span class="token punctuation">}</span> times<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span></code></pre><h3 id="更新-State"><a href="#更新-State" class="headerlink" title="更新 State"></a>更新 State</h3><p>在 class 中，我们更新 state 的值需要调用<code>this.setState()</code>:</p><pre class=" language-js"><code class="language-js">addCount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用addCount方法</span><span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>addCount<span class="token punctuation">}</span><span class="token operator">></span>Click me<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token punctuation">;</span></code></pre><h3 id="使用多个-State"><a href="#使用多个-State" class="headerlink" title="使用多个 State"></a>使用多个 State</h3><p>将 state 变量声明为一对 <code>[something, setSomething]</code> 也很方便，因为如果我们想使用多个 state 变量，它允许我们给不同的 state 变量取不同的名称：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">ExampleWithManyStates</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 声明多个 state 变量</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>age<span class="token punctuation">,</span> setAge<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>fruit<span class="token punctuation">,</span> setFruit<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">'banana'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>todos<span class="token punctuation">,</span> setTodos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">'学习 Hook'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在以上组件中，我们有局部变量 <code>age</code>，<code>fruit</code> 和 <code>todos</code>，并且我们可以单独更新它们：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">handleOrangeClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 和 this.setState({ fruit: 'orange' }) 类似</span>  <span class="token function">setFruit</span><span class="token punctuation">(</span><span class="token string">'orange'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>你不必使用多个 state 变量。State 变量可以很好地存储对象和数组，因此，你仍然可以将相关数据分为一组。然而，不像 class 中的 <code>this.setState</code>，更新 state 变量总是替换它而不是合并它。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>从上述内容中，我们了解了 React 提供的 useState Hook，有时候我们也叫它 “State Hook”。它让我们在 React 函数组件上添加内部 state —— 这是我们首次尝试。</p><p>我们还学到了一些知识比如什么是 Hook。Hook 是能让你在函数组件中“钩入” React 特性的函数。它们名字通常都以 use 开始，还有更多 Hook 等着我们去探索。</p><p>现在我们将学习另一个 Hook: <code>useEffect</code>。 它能在函数组件中执行副作用，并且它与 class 中的生命周期函数极为类似。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> react hooks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于JavaScript闭包</title>
      <link href="/2019/07/23/javascript/closure/"/>
      <url>/2019/07/23/javascript/closure/</url>
      
        <content type="html"><![CDATA[<p>闭包（Closure）是 JavaScript 中的一个难点，闭包的概念极容易混淆，也不太容易理解，我在这里谈一谈我对闭包的理解。</p><h3 id="一、变量的作用域"><a href="#一、变量的作用域" class="headerlink" title="一、变量的作用域"></a>一、变量的作用域</h3><p>要理解闭包，首先应该理解一下 JavaScript 中的变量作用域。</p><p>JavaScript 中的变量以作用域来划分无非就是两种：全局变量和局部变量。</p><p>在 JavaScript 中，在函数内部是可以直接读取全局变量的，请看下面例子：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 99</span></code></pre><p>而在函数外部，是无法读取函数内部变量的：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//error</span></code></pre><p>这里要注意，在函数内部声明变量的时候，一定要使用关键字<code>var</code>。如果不使用的话，声明的变量将是全局变量：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  a <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//99</span></code></pre><h3 id="二、从外部读取局部变量"><a href="#二、从外部读取局部变量" class="headerlink" title="二、从外部读取局部变量"></a>二、从外部读取局部变量</h3><p>那么，我们需要在函数外部访问局部变量的时候应该怎么做呢？先来看一段代码：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> f2<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在上面的代码中，我们函数 f1 的内部又定义了一个函数 f2，在函数 f1 内部还声明了一个局部变量 a，这时 a 对于 f2 是可见的，但是反过来，f2 内部的局部变量对 f1 就是不可见的，这就是 JavaScript 中的”链式作用域“，子对象会一级一级向上寻找所有父对象的变量，所以，父对象的所有变量，对子对象都是可见的，反之则不行。</p><p>那么，我们可以这样思考，既然 f2 可以读取 f1 中的变量，那我们 f2 作为 f1 的函数值，不就可以在 f1 外部读取它的内部变量了吗：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> f2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">res</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//99</span></code></pre><h3 id="三、闭包的概念"><a href="#三、闭包的概念" class="headerlink" title="三、闭包的概念"></a>三、闭包的概念</h3><p>对于上面的代码来说，f2 就是闭包。</p><p>在网上查询资料以及各种专业文献上关于”闭包“的定义非常抽象，我的理解是，闭包是能够读取其他函数内部变量的函数。</p><p>在 JavaScript 语言中，只有函数内部的子函数才能读取其内部变量，因此可以把闭包理解成”定义在一个函数内部的函数“。</p><p>所以，从本质上来说，闭包就是将函数内部与函数内部连接起来的一座桥梁。</p><h3 id="四、闭包的用途"><a href="#四、闭包的用途" class="headerlink" title="四、闭包的用途"></a>四、闭包的用途</h3><p>闭包可以用在很多地方，我总结的闭包最大的用处有两个：</p><ol><li>读取函数内部的变量；</li><li>让这些变量始终保持在内存中。</li></ol><p>第一点我们前面已经提到，当你要要在函数外部读取其内部变量的时候，就可以使用闭包的方式，第二点怎么理解呢？请看下面的代码：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>  add <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    a<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> f2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">res</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//99</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">res</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 100</span></code></pre><p>在这段代码中，f2 就是闭包函数，我们一共调用它两次，第一次打印值为 99，第二次打印值为 100，这证明了函数 f1 中的变量 a 一直保存在内存中，并没有在 f1 调用后被自动清除。</p><p>为什么会这样呢？原因就在于 f1 是 f2 的父函数，而 f2 被赋给了一个全局变量，这导致 f2 始终在内存中，而 f2 的存在依赖于 f1，因此 f1 也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。</p><p>这段代码中另一个值得注意的地方，就是”add=function(){a++}”这一行，首先在 add 前面没有使用 var 关键字，因此 add 是一个全局变量，而不是局部变量。其次，add 的值是一个匿名函数（anonymous function），而这个匿名函数本身也是一个闭包，所以 add 相当于是一个 setter，可以在函数外部对函数内部的局部变量进行操作。</p><h3 id="五、使用闭包的注意事项"><a href="#五、使用闭包的注意事项" class="headerlink" title="五、使用闭包的注意事项"></a>五、使用闭包的注意事项</h3><ol><li><p>由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在 IE 中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</p></li><li><p>闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</p></li></ol><h3 id="六、深入理解"><a href="#六、深入理解" class="headerlink" title="六、深入理解"></a>六、深入理解</h3><p>我们先来看下面两段代码，思考它们的运行结果，可以帮助我们更好的理解闭包的运行机制。</p><p>代码一：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'The Window'</span><span class="token punctuation">;</span><span class="token keyword">var</span> object <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'My Object'</span><span class="token punctuation">,</span>  getNameFunc<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getNameFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// The Window</span></code></pre><p>代码二：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'The Window'</span><span class="token punctuation">;</span><span class="token keyword">var</span> object <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'My Object'</span><span class="token punctuation">,</span>  getNameFunc<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> that<span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getNameFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// My Object</span></code></pre><p>可以看到上面两段代码输出了不同的结果。</p><p>对于代码一，在执行<code>object.getNameFunc()</code>时，getNameFunc 返回了一个匿名函数，该匿名函数并没有执行，最终执行该函数时，执行环境为 Window，所以此时的<code>this</code>指向 Window，输出结果是’The Window’。</p><p>对于代码二，在执行<code>object.getNameFunc()</code>时，执行了语句<code>var that = this;</code>，此时执行环境在对象 object 内部，所以<code>this</code>指向 Object，此并赋值给 that 作为一个内部变量，在调用<code>object.getNameFunc()()</code>时，此时，该函数起到了闭包的作用，调用内部变量<code>that</code>，所以输出’My Object‘。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上是我对”闭包“的个人理解，若有疏漏或理解错误，欢迎指正。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FE </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端入门之路</title>
      <link href="/2019/04/04/fe/fe-learning/"/>
      <url>/2019/04/04/fe/fe-learning/</url>
      
        <content type="html"><![CDATA[<p>今日份程序员奇葩需求：leader 的小姨子要入前端，需要一份入门学习文档！</p><p><img src="/blogimgs/fe1.jpg" alt="1"></p><p>接到这份需求时我是拒绝的，实在是不想写这种东西，但是：</p><p><img src="/blogimgs/fe2.jpg" alt="1"></p><p>呵！男人！写吧。。。</p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>主要是结合自己的经历来写，毕竟我也是刚入坑不到两年的小学生，总结从零基础到具备前端基本技能的道路、学习方法、资料，水平有限，不喜勿喷。</p><p>然后，学习任何东西，最重要的就是<strong>兴趣</strong>，强迫自己学习不感兴趣东西无疑是很痛苦的，就我自身而言，我对前端的兴趣还是比较浓厚，所以当初能坚持下来，整个互联网行业发展也不错，所以我认为在考虑清楚自己的职业规划并抱有强烈的兴趣来从事互联网行业，绝对是一个明智的选择。</p><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><ul><li>HTML： 超文本标记语言(Hyper Text Markup Language)，HTML 定义网页的结构，需要熟悉:<a href="http://www.w3school.com.cn/html/index.asp">HTML</a>，<a href="http://www.w3school.com.cn/html/html5_intro.asp">HTML5</a>语法、标签。语义</li><li>CSS： 层叠样式表(Cascading Style Sheets),包括：<a href="http://www.w3school.com.cn/css/index.asp">CSS</a>，<a href="http://www.w3school.com.cn/css3/index.asp">CSS3</a></li><li>JavaScript： <a href="http://www.w3school.com.cn/js/index.asp">js 基础知识</a>，<a href="http://www.w3school.com.cn/htmldom/index.asp">DOM 基础知识</a>，这里建议仔细看完，每一个 demo 自己动手写一遍，可能需要花费一定时间，另外，推荐看两本书（一定要看！！），<strong>《JavaScript DOM 编程艺术》</strong> 与 <strong>《JavaScript 高级编程》</strong>，书中的 demo 尽量自己多动手写，依我的经历来看，看懂，并不难，能写出来才是难点，所以一定动手多写</li></ul><p>HTML + CSS + JS 是每一个前端工程师必备的三项基础技能，必需熟悉掌握，看完上面的资料后，推荐一个学习网站：<a href="https://freecodecamp.cn/">freeCodeCamp</a>，完成上面的闯关，会有很多收获</p><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><h3 id="编辑器与-IDE"><a href="#编辑器与-IDE" class="headerlink" title="编辑器与 IDE"></a>编辑器与 IDE</h3><ul><li>推荐 VScode：<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></li></ul><h3 id="HTTP-与-HTTPS-协议"><a href="#HTTP-与-HTTPS-协议" class="headerlink" title="HTTP 与 HTTPS 协议"></a>HTTP 与 HTTPS 协议</h3><ul><li>常见方法：<a href="https://itbilu.com/other/relate/EkwKysXIl.html">https://itbilu.com/other/relate/EkwKysXIl.html</a></li><li>Request Headers</li><li>Response Headers</li><li>HTTPS 安全机制</li><li>HTTP 协议与 HTTPS 协议的区别： <a href="https://www.zhihu.com/question/19577317">https://www.zhihu.com/question/19577317</a></li></ul><h3 id="github"><a href="#github" class="headerlink" title="github"></a>github</h3><p>建一个<a href="https://github.com/">https://github.com/</a> 账号，保存平时学习中的各种代码和项目。</p><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><ul><li>廖雪峰 git 教程：<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000</a></li></ul><h3 id="node-js-与-npm"><a href="#node-js-与-npm" class="headerlink" title="node.js 与 npm"></a>node.js 与 npm</h3><ul><li>廖雪峰教程：<a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/00143450141843488beddae2a1044cab5acb5125baf0882000">https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/00143450141843488beddae2a1044cab5acb5125baf0882000</a></li></ul><h3 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h3><ul><li>W3C：<a href="http://www.w3school.com.cn/ajax/ajax_intro.asp">http://www.w3school.com.cn/ajax/ajax_intro.asp</a></li><li>廖雪峰教程：<a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434499861493e7c35be5e0864769a2c06afb4754acc6000">https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434499861493e7c35be5e0864769a2c06afb4754acc6000</a></li></ul><h3 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h3><ul><li>基础知识：<a href="http://www.w3school.com.cn/jquery/jquery_reference.asp（可选）">http://www.w3school.com.cn/jquery/jquery_reference.asp（可选）</a></li></ul><p>这一项我个人认为，简单过一遍再说，毕竟现在很少用到了</p><h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><ul><li>官方文档：<a href="https://reactjs.org/">https://reactjs.org/</a></li><li>ECMAScript6 入门-阮一峰：<a href="http://es6.ruanyifeng.com/">http://es6.ruanyifeng.com/</a></li><li>Create React app：<a href="https://github.com/facebook/create-react-app">https://github.com/facebook/create-react-app</a></li><li>UI 库 antd：<a href="https://ant.design/index-cn">https://ant.design/index-cn</a></li><li>React 学习课程-magicly：<a href="https://react-course.magicfun.ai/（强烈推荐）">https://react-course.magicfun.ai/（强烈推荐）</a></li><li>B 站视频课程-magicly：<a href="https://space.bilibili.com/87334855#/（强烈推荐）">https://space.bilibili.com/87334855#/（强烈推荐）</a></li><li>react-router：<a href="https://reacttraining.com/react-router/">https://reacttraining.com/react-router/</a></li><li>Styled Components：<a href="https://github.com/styled-components/styled-components">https://github.com/styled-components/styled-components</a></li></ul><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><ul><li>官方文档：<a href="https://cn.vuejs.org/v2/guide/">https://cn.vuejs.org/v2/guide/</a></li></ul><p>这里说一下，Vue、react、angular 三者是目前比较流行的 js 前端框架，选其一进行深入学习即可，也可都学，看个人学习热情而定，不过每一个技术栈要想深入学习至熟悉掌握，都需要花费一定时间，我这里主要介绍 react 技术栈，vue 或 angular 有兴趣自己搜寻学习资料（逃</p><h3 id="React-Native（移动应用开发）"><a href="#React-Native（移动应用开发）" class="headerlink" title="React Native（移动应用开发）"></a>React Native（移动应用开发）</h3><ul><li>官方文档：<a href="https://facebook.github.io/react-native/">https://facebook.github.io/react-native/</a></li><li>中文文档：<a href="https://reactnative.cn/">https://reactnative.cn/</a></li><li>gitbook 课程：React Native 移动开发入门与实战：<a href="https://reactnative.cn/docs/0.51/getting-started.html#content">https://reactnative.cn/docs/0.51/getting-started.html#content</a></li><li>UI 库 react-native-elements：<a href="https://react-native-training.github.io/react-native-elements/">https://react-native-training.github.io/react-native-elements/</a></li><li>导航工具 React Navigation：<a href="https://reactnavigation.org/">https://reactnavigation.org/</a></li><li>expo：<a href="https://docs.expo.io/versions/latest/index.htm">https://docs.expo.io/versions/latest/index.htm</a></li></ul><h3 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h3><p>not durex！！！！</p><ul><li>官方文档：<a href="https://redux.js.org/">https://redux.js.org/</a></li><li>中文文档：<a href="https://cn.redux.js.org/index.html（强烈推荐）">https://cn.redux.js.org/index.html（强烈推荐）</a></li><li>视频教程：<a href="https://egghead.io/lessons/react-redux-the-single-immutable-state-tree（强烈推荐）">https://egghead.io/lessons/react-redux-the-single-immutable-state-tree（强烈推荐）</a></li></ul><p>学完 React 相关知识，建议自己写两个小玩意儿出来，把所有知识串联起来</p><h3 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h3><ul><li>官方文档：<a href="https://www.typescriptlang.org/">https://www.typescriptlang.org/</a></li><li>typescript-book：<a href="https://github.com/basarat/typescript-book">https://github.com/basarat/typescript-book</a></li><li>中文文档：<a href="https://www.tslang.cn/docs/home.html">https://www.tslang.cn/docs/home.html</a></li><li>TypeScript Deep Dive：<a href="https://basarat.gitbooks.io/typescript/content/docs/types/interfaces.html">https://basarat.gitbooks.io/typescript/content/docs/types/interfaces.html</a></li></ul><h3 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h3><ul><li>官方文档：<a href="https://www.webpackjs.com/">https://www.webpackjs.com/</a></li></ul><h3 id="书籍推荐"><a href="#书籍推荐" class="headerlink" title="书籍推荐"></a>书籍推荐</h3><p>入门可以通过啃书，但书本上的东西很多都已经过时了，在啃书的同时，也要持续关注技术的新动态。推几本我觉着不错的书：</p><ul><li>《JavaScript 高级编程》：可以作为入门书籍，但同时也是高级书籍，可以快速吸收基础，等到提升再回来重新看</li><li>《JavaScript DOM 编程艺术》学习 JavaScript 和 DOM 开发的必读之作。</li><li>《Node.js 开发指南》：不错的 Nodejs 入门书籍</li><li>《深入浅出 Node.js》：Nodejs 进阶书籍，必备</li><li>《JavaScript 异步编程》：理解 JS 异步的编程理念</li><li>《JavaScript 模式》和《JavaScript 设计模式》：JavaScript 的代码模式和设计模式，将开发思维转变到 JavaScript，非常好的书</li><li>《JavaScript 框架设计》：在用轮子同时，应当知道轮子是怎么转起来的，讲解很详细，从源码级别讲解框架的各个部分的实现，配合一个现有框架阅读，可以学到很多东西</li><li>《Don`t make me think》：网页设计的理念，了解用户行为，非常不错</li><li>《CSS 禅意花园》：经久不衰的一部著作，同样传递了网页设计中的理念以及设计中需要注意的问题</li><li>《高性能 JavaScript》和《高性能 HTML5》：强调性能的书，其中不只是性能优化，还有很多原理层面的东西值得学习</li><li>《HTML5 Canvas 核心技术》：对于 canvas 的使用，动画的实现，以及动画框架的开发都非常有帮助</li><li>《HTTP 权威指南》：HTTP 协议相关必备，前端开发调试的时候也会经常涉及到其中的知识</li><li>《响应式 Web 设计》：技术本身不难，重要的是响应式网页的设计理念，以及移动先行的思想</li><li>《JavaScript 语言精粹》：普及 JavaScript 的开发思维的一本好书，非常适合入门</li></ul><h2 id="一些建议"><a href="#一些建议" class="headerlink" title="一些建议"></a>一些建议</h2><ol><li>多上社区（开源中国、掘金、github 等。。。）</li><li>多用搜索引擎，抛弃百度，巧用 google</li><li>搭建自己的博客，理解项目从新建到完成部署上线的的全部过程</li><li>html、css、javascript 的知识反复咀嚼，每次都有新的收获</li><li>不要过多的关注技术，关注解决问题本身，技术只是解决问题的工具，所有技术都是会死的，人也是！</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> FE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> FE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018年总结</title>
      <link href="/2019/02/03/essay/summary-2018/"/>
      <url>/2019/02/03/essay/summary-2018/</url>
      
        <content type="html"><![CDATA[<p>今天是农历腊月 29，明天就是除夕了，放假已有两天，退去奔波的疲惫后，还是想坐下来好好总结一下这一年，随心所欲，可能会比较乱，我就想到什么说什么了：</p><h1 id="这一年经历了什么？"><a href="#这一年经历了什么？" class="headerlink" title="这一年经历了什么？"></a>这一年经历了什么？</h1><p>就按照时间线理一下比较重要的几件事吧</p><h3 id="父亲去世"><a href="#父亲去世" class="headerlink" title="父亲去世"></a>父亲去世</h3><!-- 2018 年 1 月 6 日，那天深夜，我在写代码，饿了下楼买了泡面，刚倒好开水，接到几个电话，我妈的手机号，但是那头是邻居一个阿姨，一般这种情况心里就知道一定是出什么事了，然后那边说我爸在厂里上班出事了，人没了，一瞬间感觉世界都崩塌了，瘫在那里，脑海里就全是我爸瘦骨嶙峋的身影，对，一个撑起这个家的不到一米五体重不到 100 斤的男人，我爸，就这么没了。失去亲人的痛苦真的只有经历过才会明白，我后悔，后悔我爸在世时候没有让他享到一天福，后悔没有早点挣钱给他哪怕是买一件衣服买一条烟，后悔年少无知时候犯下那些错给他带来的麻烦，后悔他说在那里上班时候被人排挤我没有坚持让他回家，事实上我说了，他说：“回家就没钱挣啊”，他坚持要在那里，没过几天就出事了。我难过，我气愤，气愤为啥上天要这样对一个一辈子默默奉献，心地善良的男人，气愤出了事所谓的那些领导的所作所为。我心痛，心痛我妈哭到只有两条缝的双眼，一个年轻时经历了一段不幸的婚姻，又带着我哥嫁给我吧，在这边处处受挫，但是无比坚强，现在又中年丧夫的女人。所有这些，我没想到会发生在我们这个家庭，事实上就是发生了，要是我还小，可能经历的也只有失去亲人的痛苦，但现在的我，要承受的更多，那几天可能是这辈子第一次知道什么叫做真正的难受，以前的那些小情绪，真的只是矫情。我接受这个世界让我经历一些苦难来磨练我，但我不希望这些苦难是亲人的离去，说实话，我内心会有抱怨这个世界不公! --><p>2018 年 1 月 6 日。</p><h3 id="第一次搬家"><a href="#第一次搬家" class="headerlink" title="第一次搬家"></a>第一次搬家</h3><p>3 月 9 日，从东站搬家到一品天下，老吴东站招待所正式倒闭，新家有一个很大的阳台，环境很安静，特别喜欢</p><h3 id="正式上班"><a href="#正式上班" class="headerlink" title="正式上班"></a>正式上班</h3><p>4 月 11 日，经历了两个月绝望的找工作，终于在这一天正式上班了，这是我决定转行做程序员以后收获的第一份喜悦，一家小公司，做技术的人不是很多，但是大家都很好，特别是陈师父，对我关怀有加。</p><h3 id="第二次搬家"><a href="#第二次搬家" class="headerlink" title="第二次搬家"></a>第二次搬家</h3><p>7 月中，跟 xx 分手，在一起三年的女朋友，那段日子天天吵架，自己搬了出来，跟同事住在一起，正好他那儿空了一个房间,以低价出租给我，开始了单身生活</p><h3 id="第一个项目上线"><a href="#第一个项目上线" class="headerlink" title="第一个项目上线"></a>第一个项目上线</h3><p>九月。来公司以后，接手了公司官网和移动端开发的工作，移动端在我来之前已经上线，负责日常维护和一些更新，官网就基本从头开始写，历时几个月，磕磕绊绊，自己完成了官网所有页面的开发测试及上线的前端工作，看到自己写的代码在线上运行着，还是挺开心。</p><h3 id="第三次搬家"><a href="#第三次搬家" class="headerlink" title="第三次搬家"></a>第三次搬家</h3><p>九月中旬，同事房子到期，于是一起重新租了一套房子，34 楼，虽很小，但是我的房间有一面很大的落地玻璃窗，就在床挨着，天气好的时候睁开眼就可以看到蓝天白云，中午也可以直接躺在床上晒太阳，算是惬意。</p><h3 id="App-流产"><a href="#App-流产" class="headerlink" title="App 流产"></a>App 流产</h3><p>10 月时，公司接入新的支付，于是我萌生的重写 APP 的想法，毕竟接盘的滋味谁经历谁知道，在别人的项目上写代码，总是很别扭的，这个想法得到了领导的支持征求了老板的同意，于是便风生水起的写了起来，那段时间是最有干劲的一段日子，每天的代码产出相比他以前按倍论，因为从头到尾自己写，并且是我最熟悉的 react native，但是，12 月，在快要写完的时候，我被告知，新的支付没有谈妥，APP 宣告流产。原本觉得自己终于可以有个拿得出手的东西，就这样破灭了，还是挺难过的，毕竟新的项目连设计稿都没有，全是我自己在脑袋里自己画设计稿一点一点的心血堆积出来的，自己亲手构建的产品，却因为非技术原因没有服务到最终用户，对我来说是件非常遗憾的事。唉，有啥办法呢？我又不是老板，只能接受现实</p><h1 id="这一年学会了什么？"><a href="#这一年学会了什么？" class="headerlink" title="这一年学会了什么？"></a>这一年学会了什么？</h1><h3 id="Vue-框架"><a href="#Vue-框架" class="headerlink" title="Vue 框架"></a>Vue 框架</h3><p>从接触前端开始，一直学的 react，来公司以后，发现 web 项目用 vue 来写的，没办法，就自己从学习文档开始一点一点摸索着写，还算是比较容易上手，很快能在项目里运用得比较自如，至于熟练或者说精通，肯定说不上，但至少能完成基本的页面开发，所以如果有人问我会不会 Vue，我的答案肯定是：我会，但我不是很精通，我司著名哲学家陈磊先生说过，我可以精通，但没必要（逃</p><h3 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h3><p>关于 TS，之前就学习过，但只是在堂兄的讲解下简单的过了一遍文档，基本概念和用法了解，但没实际上手写过，来公司以后，要求 web 项目用 ts 来写，只好硬着头皮上了，（实际是面试时候我说，我会 ts…），其实一开始很抗拒，毕竟狂野的 js 写惯了，写起静态语言来还是很不习惯的，要麻烦一点，一度很想不写 ts 的，但是慢慢的发现 ts 写起来确实好用，坚持用 ts 写完了 web 的项目，像类型检查和编译期报错这些特性只有自己体验过才知道有多爽，我国著名哲学家王境泽曾提出的“真香定理”，谁也逃不过</p><h3 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h3><p>有段时间公司没事，自己闲下来就研究了一下小程序，写了几个小 demo，把基本的 API 过了一遍，写完的感觉只有一个，小程序的开发文档真接地气！但是说实话不是很喜欢小程序的原生写法，一直在寻求一个框架，直到前一段时间看到 taroApp 和 uni-app，两个多端统一开发的框架，相比之下选择了 taro，第一，觉得它好像比较靠谱，第二，它是用 react 的语法来写的，uni-app 是基于 vue 写的，在我的内心还是更喜欢 react，并且给自己的定位一直都是一位热爱 react 技术栈的 coder。用 taro 玩儿了几天，十分喜欢，如果有一天需要写小程序的时候，我应该会选择它</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>从大的技术层面来说，新掌握的技术，也就是上面三个，但是其实在工作中得到提高的那些细节的东西才是最宝贵的，很多知识，在自己没有遇到或者没有用到时是不会明白的，自己发现问题并解决的时候是收获最大的，我觉得自己有一点提高了的就是，能够自己独立解决很多问题了，不再像以前一样依赖别人，哪怕现在遇到自己不会的东西，也可以通过自己 google 或者查阅文档的方式一点一点发现问题并解决，至少想法变了，不再是已遇到问题第一反应就是我不会，我要问别人，这算是一个提高吧。还有一些零零散散的学会的新东西，比如一些 git 操作，比如第一次给别人提 issue，比如对 ES 新特性的更深一步了解，比如学会了自己打包 ios 应用。。。总之还是有很多收获。</p><h1 id="这一年有什么做的不好的？"><a href="#这一年有什么做的不好的？" class="headerlink" title="这一年有什么做的不好的？"></a>这一年有什么做的不好的？</h1><h3 id="直男癌"><a href="#直男癌" class="headerlink" title="直男癌"></a>直男癌</h3><p>也不知道从什么时候开始，我慢慢的听到越来越对人对我说：你这个直男癌！</p><p>最开始意识到这个问题是我发现我很讨厌抽烟、打游戏的女孩子，那时候丧心病狂到在游戏里遇到女孩子，我在内心会咒骂，大概就是：女的玩 NMP 游戏。类似这种想法持续了很久，后来我发现这样不对，因为我发现我妹妹玩游戏我说她几次后，她就太愿意搭理我了，我反思了一下，可能这样确实不对，于是我开始慢慢强迫自己接受女孩子打游戏，确实，跟妹妹的关系缓和了不少，但是治标不治本，我发现自己的直男癌症状越来越多，已经到了无药可救的地步了，刚跟杨杨认识的时候，聊了几句，我觉得我很正常的在说话，然后她问我：你一定是直男吧？我说：像钢筋一样！她说：怪不得找不到女朋友！（并配上告辞的表情），我一脸懵逼，不得其解。某天，忘了是在办公室讨论了个什么问题，聊着聊着，一位比我稍年长的男同事对我说：在认识你之前我对直男癌这三个字毫无概念！</p><p><img src="/blogimgs/yihuo.jpeg" alt="1"></p><p>…大概是这个意思，我微微一笑，但其实内心很疑惑，哈哈哈哈，我到底说了什么做了什么让大家觉得我直男癌这么严重。其实有时候我知道有些话不该说，但是抑制不住自己内心的真实想法，说出来可能又让别人觉得直男癌了，又或者有时候我知道有些事是我该做的，但是又觉得做了违背自己内心的意愿，我就干脆选择不做。哈哈哈哈，我觉得我自己还能意识到这些问题，那我还算是有救的吧，希望以后可以慢慢改掉这个东西，毕竟，女孩子都喜欢甜甜的小奶狗吧，哈哈哈哈哈哈哈，恶心恶心。。。</p><h3 id="太懒"><a href="#太懒" class="headerlink" title="太懒"></a>太懒</h3><p>可能是当了程序员的原因，越来越宅了，每天的生活就是上班，下班，吃饭，打游戏，睡觉，哪儿都不愿意去，应该说是除了去上班，想到要去哪儿第一反应都是不想去，除了偶尔想起来打球就去打一会儿，但去的次数应该一双手都数的清。那天去剪头发，洗头发的小姐姐问我，平时喜欢干嘛，我说在家，她说你都不蹦迪吗？不去网吧吗？不出去旅游吗？不去酒吧…算了，看你也不像去酒吧的人！。。。然后她就对我一通吐槽，说我太宅巴拉巴拉的一大堆，最后跟我说，太宅没人喜欢的，我说，好的 👌</p><p>我在想，这家理发店的洗头妹纸，真的都太硬核</p><p>答应康熙宇的坚持健身也没能坚持下来，坚持了可能有一个月吧，我发现，还是游戏好玩，于是放弃了，一点成效没有，这一点上，要向康熙宇道歉</p><p>搬家以后基本没有自己做过饭，两三次吧，可能发了几次朋友圈就做了几次，说来也羞愧，我妈年初给我准备的一坛肉，到年底也没动几坨。80%回家都是点外卖，那天看了一下，这一年点外卖的支出近 1w，是该反思一下了，以后要自己多做饭吃，毕竟外面东西吃多了真的不健康。一年前我还是个体重不过 120 的瘦子，现在基本稳定在 135 斤，最重时候达到 141 斤，并不是长壮了，而是胖了，肚子上一圈赘肉，脸上也胖了，双下巴也出来了，现在连篮筐都够不到了，曾以为自己不会长胖的我，现在居然开始嫌弃自己的身材了，我不敢想象这样下去再一脱发的话我会变成什么样。</p><p>然后关于自身的提高，因为太懒，除了上班时间，基本没有花时间在学习上，曾经立下的 flag，也一个个全用来打脸了，总的来说还是因为自己太懒了，而懒只是表象，究其原因，可能是因为自己太没上进心，太安于现状，我希望以后能花更多时间来提高自己，跨年时候许下的新年目标：工资 double！如果再不努力不知道啥时候能实现，选择了这个行业就不应该安于现状，但是自己并没有付出太多努力，该好好反省自己！</p><h3 id="熬夜-amp-抽烟"><a href="#熬夜-amp-抽烟" class="headerlink" title="熬夜&amp;抽烟"></a>熬夜&amp;抽烟</h3><p>这一年身体变得越来越差，首先是得了咽炎，这玩意儿真是害人，白天还好，一到晚上，咳到怀疑人生，好几次把自己咳吐了，只能喝一点药来缓一下，但也并没有什么卵用，要是再遇上个感冒，简直生活不能自理。这跟抽烟有一定关系，所以也想过戒烟，但是从来没坚持超过一天过，总是忍不住又会去买烟，我希望今年能真正的把烟戒了，不仅对身体好，还能一个月解约好几百出来，岂不美哉？</p><p>然后生活不规律，经常熬夜然后吃宵夜，导致肠胃炎更严重了，这一年已经不知道喝了多少盒三九胃泰和肠炎宁片了，稍微吃坏肚子，就是胃痛和拉肚子连着好几天，有时候在床上胃痛得冒虚汗。</p><p>皮肤越来越差，熬夜久了，脸上的痘痘基本没好过，此起彼伏，甚至头皮上都长满了，鼻子上全是黑头，真的是越来越油腻了。</p><p>然后最近开始胸痛，感觉像气管，又像是肺，又像是心脏，一阵一阵的痛，有时候莫名其妙心就跳得很快，持续好久了，感觉应该是出什么毛病了，所以打算发了工资去检查一下，希望不是什么大问题，因为百度以后看了还是挺怕的，我以后一定改掉这些坏毛病，慢慢才明白，还是健康最重要。</p><h1 id="2019-todos"><a href="#2019-todos" class="headerlink" title="2019 todos"></a>2019 todos</h1><ol><li>学习并坚持健身，多打球，多锻炼；</li><li>生活规律，戒烟，戒熬夜；</li><li>努力学习，工资 double；</li><li>去一次远方</li></ol><h1 id="特别鸣谢"><a href="#特别鸣谢" class="headerlink" title="特别鸣谢"></a>特别鸣谢</h1><p>要特别感谢一个人，我的偶像，<strong>陈磊</strong>先生，感谢陈磊先生当初愿意将我这个转行的小白招进公司，并愿意传授我所有绝技，并关心得无微不至，我记得我写过一篇微博详细描述磊哥对我的好，这里就不赘述了，总之很感谢磊哥，愿磊哥升官发财，早生贵子！</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>结语就说一句话吧：</p><p><strong>愿大家都努力，然后，幸福！</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ESSAY </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> 随记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown</title>
      <link href="/2018/09/20/markdown/markdown/"/>
      <url>/2018/09/20/markdown/markdown/</url>
      
        <content type="html"><![CDATA[<p>Markdown 是我们在日常工作学习中都会用到一门标记语言，这里简单记录一下自己关于使用 Markdown 的一些心得</p><h1 id="关于-Markdown"><a href="#关于-Markdown" class="headerlink" title="关于 Markdown"></a>关于 Markdown</h1><p>Markdown 是一种轻量级标记语言，它以纯文本形式(易读、易写、易更改)编写文档，并最终以 HTML 格式发布。<br>Markdown 也可以理解为将以 Markdown 语法编写的语言转换成 HTML 内容的工具。</p><h1 id="Markdown-的优点"><a href="#Markdown-的优点" class="headerlink" title="Markdown 的优点"></a>Markdown 的优点</h1><ul><li>纯文本，所以兼容性极强，可以用所有的文本编辑器打开</li><li>只用专注于写文本，不用过多考虑排版的问题</li><li>格式转换方便，可以轻松转换成 html</li><li>Markdown 的标记语法有极好的可读性</li></ul><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><p>Markdown 其实语法内容也比较少，一条条详细来看：</p><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>在 Markdown 中，只需在文本前面加上<code>#</code>即可设置为标题，同时<code>#</code>的数量对应标题等级，例如：两个<code>#</code>代表二级标题，这里建议在写标题的时候在<code>#</code>和标题文本之间保留一个空格，这是标准的 Markdown 写法</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>列表格式有两种方式，第一种是无序列表，直接在文字前面加<code>-</code>，例如：</p><pre class=" language-html"><code class="language-html">- 文本1 - 文本2 - 文本3</code></pre><p>第二种是有序列表，直接在文本前面加<code>1.</code> <code>2.</code> <code>3.</code>就行了，例如：</p><pre class=" language-html"><code class="language-html">1. 文本1 2. 文本2 3. 文本3</code></pre><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>插入链接不需要单独的按钮或者标签，直接用<code>[链接名称](链接地址)</code>这样的语法即可，例如：</p><pre class=" language-html"><code class="language-html">[我的博客](yanzule.me)</code></pre><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>插入图片的语法与插入链接的语法相似，使用<code>![](图片链接地址)</code>来插入一张图片，例如：</p><pre class=" language-html"><code class="language-html">![](http://upload-images.jianshu.io/upload_images/259-0ad0d0bfc1c608b6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</code></pre><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>引用他人的文字时，在引用的文本前面加<code>&gt;</code>,例如:</p><pre class=" language-html"><code class="language-html">> 猛兽总是独行，牛羊才成群结队</code></pre><p>显示的效果如下：</p><blockquote><p>猛兽总是独行，牛羊才成群结队</p></blockquote><p>###后续慢慢补充</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>状态管理工具：Redux</title>
      <link href="/2017/11/04/redux/redux-basic/"/>
      <url>/2017/11/04/redux/redux-basic/</url>
      
        <content type="html"><![CDATA[<p>本篇介绍状态管理工具Redux的基础知识和基本用法。开始之前让我们来看一看什么是Redux。</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>随着JavaScript单页应用开发日趋复杂，JavaScript需要管理比任何时候都要多的<code>state</code>（状态）。 这些<code>state</code>可能包括服务器响应、缓存数据、本地生成尚未持久化到服务器的数据，也包括UI状态，如激活的路由，被选中的标签，是否显示加载动效或者分页器等等。</p><p>管理不断变化的<code>state</code>非常困难。如果一个model的变化会引起另一个model变化，那么当view变化时，就可能引起对应model以及另一个 model 的变化，依次地，可能会引起另一个view的变化。直至你搞不清楚到底发生了什么。<code>state</code>在什么时候，由于什么原因，如何变化已然不受控制。当系统变得错综复杂的时候，想重现问题或者添加新功能就会变得举步维艰。</p><p>这里的复杂性很大程度上来自于：我们总是将两个难以理清的概念混淆在一起：变化和异步。如果把二者分开，能做的很好，但混到一起，就变得一团糟。为了解决这个问题React试图在视图层禁止异步和直接操作DOM来解决这个问题。但是，美中不足的是，React依旧把处理<code>state</code>中数据的问题留给了我们。而Redux就是为了帮助我们解决这个问题而诞生的状态管理工具。</p><p>简而言之，Redux让<code>state</code>的变化变得可预测了，从而让我们更好的管理好应用中的状态，试想当你的应用每一个<code>state</code>的变化你都非常清晰，它何时变化？它为何变化？它的变化会引起谁的变化？当你对这些都了如指掌的时候，也就不再为管理这些<code>state</code>而烦恼了。</p><p>但是我们学习Redux的原因，不是因为我们学了React，所以我们要学Redux，因为，Redux并不是为React量身定做的，事实上，Redux可以作为一个状态管理工具与其他任何库搭配使用，所以，在阅读后续内容之前，你可能要问自己一句：我真的需要Redux吗？可能你现在还没有答案，没关系，这里分享一篇Redux作者Dan Abramov自己写的blog，相信看完你就会有答案了：<a href="https://medium.com/@dan_abramov/you-might-not-need-redux-be46360cf367">You Might Not Need Redux</a></p><p>如果看完你觉得完全没有必要用Redux，那么你已经可以关掉这篇文章了。</p><p>如果看完觉得，这正是我想要的东西，那么就跟随我的脚步一起来探索吧！不过开始之前，建议先看一套视频，也是作者自己录制的，一步一步讲解了如何使用Redux，真是个良心作者，让我想起了被求锤得锤的良心歌手薛之谦，咳咳，题外话，视频地址：<a href="https://egghead.io/lessons/react-redux-the-single-immutable-state-tree">https://egghead.io/lessons/react-redux-the-single-immutable-state-tree</a></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>直接使用npm安装：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save redux</code></pre><p>大多数情况下，我们还需要用到React绑定库和一些开发工具：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save react-redux<span class="token function">npm</span> <span class="token function">install</span> --save-dev redux-devtools<span class="token function">npm</span> <span class="token function">install</span> --save redux-logger<span class="token function">npm</span> <span class="token function">install</span> --save redux-persist<span class="token function">npm</span> <span class="token function">install</span> --save redux-thunk</code></pre><h1 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h1><p>简单来说，Redux核心的东西其实只有三个：store、action、reducer。</p><p>我们用一句话将他们串联就是：整个应用的<code>state</code>被储存在一棵<code>object tree</code>中，并且这个<code>object tree</code>只存在于唯一一个<code>store</code>中，唯一改变<code>state</code>的方法就是触发<code>action</code>，<code>action</code>是一个用于描述已发生事件的普通对象，而为了描述<code>action</code>如何改变<code>state tree</code>，你需要编写<code>reducer</code>函数。</p><p>就是这么简单，并没有什么复杂的神奇魔法，这就是Redux如何工作的整个流程，接下来我们来一一介绍这三个东西。</p><h2 id="action"><a href="#action" class="headerlink" title="action"></a>action</h2><p>action是把数据从应用传到store的荷载，是store中数据的唯一来源，我们可以通过<code>store.dispatch()</code>方法将action传给store。</p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>简单来说，action其实就是一个简单的Javascript对象。这个对象中必须有一个<code>type</code>字段来表示要执行的动作，你还可以增加其他任意字段来描述这个动作或传递参数，像这样：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>    type<span class="token punctuation">:</span> ADD_TODO<span class="token punctuation">,</span>    text<span class="token punctuation">:</span> <span class="token string">'Build my first Redux app'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//传递参数</span><span class="token punctuation">{</span>    type<span class="token punctuation">:</span> <span class="token string">'CREATED_TEAM'</span><span class="token punctuation">,</span>      team<span class="token punctuation">:</span> <span class="token punctuation">{</span>        id<span class="token punctuation">:</span> r<span class="token punctuation">.</span>id<span class="token punctuation">,</span>        name<span class="token punctuation">:</span> teamName<span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p>当应用规模越来越大时，建议使用单独的模块或文件来存放 action。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> ADD_TODO<span class="token punctuation">,</span> REMOVE_TODO <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../actionTypes'</span></code></pre><h3 id="Action-创建函数"><a href="#Action-创建函数" class="headerlink" title="Action 创建函数"></a>Action 创建函数</h3><p>Action 创建函数就是生成action的方法，也就是简单返回一个action的函数，像这样：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> addTodo <span class="token operator">=</span> <span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    type<span class="token punctuation">:</span> ADD_TODO<span class="token punctuation">,</span>    text  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这样做将使action创建函数更容易被移植和测试。</p><h2 id="reducer"><a href="#reducer" class="headerlink" title="reducer"></a>reducer</h2><p>reducer是一个纯函数，接收旧的state和一个action，返回一个新的state：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span>previousState<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> newState</code></pre><p>这里有没有想起什么？对了，还记得我们之前介绍的reduce方法吗？我们说reduce方法接收一个初始值和一个function，返回一个值。是不是很类似啊？所以我们叫reducer啊，它的原理就跟reduce是一样的。</p><p>注意这里我们说reducer是一个纯函数，这一点很重要，我们一定要保证它的纯净，也就是说千万不要在reducer函数做这些操作：</p><pre><code>   修改传入参数；   执行有副作用的操作，如 API 请求和路由跳转；   调用非纯函数，如 Date.now() 或 Math.random()。</code></pre><p>这样是为了保证，只要传入的参数确定，那么就一定会返回一个确定的状态，这样才能保证我们对state的变化做到了如指掌，也就是说，你可以把reducer看作一个单纯的计算工具，只要我们传入的值相同，那么返回的值一定永远是相同的。</p><p>所以，在编写reducer之前，一定要先想好store的结构，然后我们来看一下怎么写reducer函数：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> team <span class="token operator">=</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">'CREATED_TEAM'</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token operator">...</span>action<span class="token punctuation">.</span>team<span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'TEAM_INFO'</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token operator">...</span>state<span class="token punctuation">,</span>        queryTeam<span class="token punctuation">:</span> action<span class="token punctuation">.</span>teamInfo<span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> state<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>其实核心就是一堆switch语句，告诉应用，当遇到type是什么的时候，该执行什么，注意，我们并没有修改state，而是返回一个新的对象，千万不要修改state！千万不要修改state！千万不要修改state！重要的事情说三遍！然后注意，最后一定要在default情况下返回旧的state，这样可以保证在遇到未知的action时，返回原来的state。</p><p>另外，一个reducer只负责应用中所有state中它管理的那部分，所以一个应用中我们可能需要编写多个reducer，每个reducer传入的参数都不同，随着应用的膨胀，我们还可以将拆分后的 reducer 放到不同的文件中, 以保持其独立性并用于专门处理不同的数据域。</p><p>最后，Redux提供了<code>combineReducers()</code>工具类来将多个reducer合并为一个，这样就能消灭一些样板代码了。<br>整个应用就有一个总的reducer：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> combineReducers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux'</span><span class="token keyword">const</span> todoApp <span class="token operator">=</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  visibilityFilter<span class="token punctuation">,</span>  todos<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> todoApp</code></pre><p><code>combineReducers()</code>所做的只是生成一个函数，这个函数来调用你的一系列reducer，每个reducer根据它们的key来筛选出state中的一部分数据并处理，然后这个生成的函数再将所有 reducer的结果合并成一个大的对象。</p><h2 id="store"><a href="#store" class="headerlink" title="store"></a>store</h2><p>前面我们学会了使用action来描述“发生了什么”，和使reducers来根据action更新state的用法。store就是把它们联系在一起的对象，简单来说store有以下功能：</p><ul><li>维持应用的 state；</li><li>提供 getState() 方法获取state；</li><li>提供 dispatch(action) 方法更新state；</li><li>通过 subscribe(listener) 注册监听器;</li><li>通过 subscribe(listener) 返回的函数注销监听器。</li></ul><p>根据已有的reducer来创建store是非常容易的。在前面，我们使用<code>combineReducers()</code>将多个reducer合并成为一个。现在我们将其导入，并传递createStore()。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux'</span><span class="token keyword">import</span> todoApp <span class="token keyword">from</span> <span class="token string">'./reducers'</span><span class="token keyword">let</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>todoApp<span class="token punctuation">)</span></code></pre><p>现在我们已经创建好了store，让我们来验证一下！</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>  addTodo<span class="token punctuation">,</span>  toggleTodo<span class="token punctuation">,</span>  setVisibilityFilter<span class="token punctuation">,</span>  VisibilityFilters<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./actions'</span><span class="token comment" spellcheck="true">// 打印初始状态</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 每次 state 更新时，打印日志</span><span class="token comment" spellcheck="true">// 注意 subscribe() 返回一个函数用来注销监听器</span><span class="token keyword">const</span> unsubscribe <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 发起一系列 action</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">addTodo</span><span class="token punctuation">(</span><span class="token string">'Learn about actions'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">addTodo</span><span class="token punctuation">(</span><span class="token string">'Learn about reducers'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">addTodo</span><span class="token punctuation">(</span><span class="token string">'Learn about store'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">toggleTodo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">toggleTodo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">setVisibilityFilter</span><span class="token punctuation">(</span>VisibilityFilters<span class="token punctuation">.</span>SHOW_COMPLETED<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 停止监听 state 更新</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>然后来看一下看到 store 里的 state 是如何变化的：</p><p><img src="/blogimgs/store.png" alt="store"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>基础概念我们就先介绍这么多吧，想了解更多可以参考：<a href="https://redux.js.org/">官方文档</a>。</p><p>总之，两句话：</p><ol><li>Redux 应用只有一个单一的 store</li><li>整个应用的<code>state</code>被储存在一棵<code>object tree</code>中，并且这个<code>object tree</code>只存在于唯一一个<code>store</code>中，唯一改变<code>state</code>的方法就是触发<code>action</code>，<code>action</code>是一个用于描述已发生事件的普通对象，而为了描述<code>action</code>如何改变<code>state tree</code>，你需要编写<code>reducer</code>函数。</li></ol><p>我相信，这就已经足够理解Redux的核心概念了。</p><p>下一篇可能会介绍一下Redux如何与React搭配使用。</p><h1 id="Refers"><a href="#Refers" class="headerlink" title="Refers"></a>Refers</h1><ul><li><a href="https://redux.js.org/">https://redux.js.org/</a></li><li><a href="https://egghead.io/lessons/react-redux-the-single-immutable-state-tree">https://egghead.io/lessons/react-redux-the-single-immutable-state-tree</a></li><li><a href="https://cn.redux.js.org/">https://cn.redux.js.org/</a></li><li><a href="https://medium.com/@dan_abramov/you-might-not-need-redux-be46360cf367">https://medium.com/@dan_abramov/you-might-not-need-redux-be46360cf367</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Redux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> redux </tag>
            
            <tag> store </tag>
            
            <tag> action </tag>
            
            <tag> reducer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Native学习日记五：网络请求</title>
      <link href="/2017/09/26/rn/net-working/"/>
      <url>/2017/09/26/rn/net-working/</url>
      
        <content type="html"><![CDATA[<p>开发App经常需要从远程地址中获取数据或资源。我们可能需要给某个REST API发起POST请求以提交用户数据，又或者可能仅仅需要从某个服务器上获取一些静态内容，这一篇介绍一下我们怎样在RN中发起网络请求以及处理相应数据。开始之前可以参考这个<a href="http://v.youku.com/v_show/id_XMTUyNTEwMTA5Ng==.html">简短的视频教程</a>加深理解，这里也奉上一份参考文档：<a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch">Using Fetch</a>。</p><h1 id="使用Fetch"><a href="#使用Fetch" class="headerlink" title="使用Fetch"></a>使用Fetch</h1><p>React Native提供了和web标准一致的Fetch API，用于满足开发者访问网络的需求。如果你之前使用过XMLHttpRequest(即俗称的ajax)或是其他的网络API，那么Fetch用起来将会相当容易上手。这篇我们只会介绍Fetch的基本用法，并不会讲述太多细节，你可以搜索fetch api关键字来解更多信息。</p><h2 id="发起网络请求"><a href="#发起网络请求" class="headerlink" title="发起网络请求"></a>发起网络请求</h2><p>要从任意地址获取内容的话，只需简单地将网址作为参数传递给fetch方法即可（fetch这个词本身也就是获取的意思）：</p><pre class=" language-js"><code class="language-js"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://mywebsite.com/mydata.json'</span><span class="token punctuation">)</span></code></pre><p>Fetch还有可选的第二个参数，可以用来定制HTTP请求一些参数。你可以指定header参数，或是指定使用POST方法，又或是提交数据等等：</p><pre class=" language-js"><code class="language-js"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://mywebsite.com/endpoint/'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  method<span class="token punctuation">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>  headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'application/json'</span><span class="token punctuation">,</span>    <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/json'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  body<span class="token punctuation">:</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    firstParam<span class="token punctuation">:</span> <span class="token string">'yourValue'</span><span class="token punctuation">,</span>    secondParam<span class="token punctuation">:</span> <span class="token string">'yourOtherValue'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>完整的参数列表可以参考：<a href="https://developer.mozilla.org/en-US/docs/Web/API/Request">Fetch Request文档</a>。</p><h2 id="处理服务器的响应数据"><a href="#处理服务器的响应数据" class="headerlink" title="处理服务器的响应数据"></a>处理服务器的响应数据</h2><p>上面的例子演示了如何发起请求。很多情况下，你还需要处理服务器回复的数据。</p><p>网络请求天然是一种异步操作。所以Fetch方法会返回一个Promise，这种模式可以简化异步风格的代码：</p><pre class=" language-js"><code class="language-js"><span class="token function">getMoviesFromApiAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://facebook.github.io/react-native/movies.json'</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>responseJson<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> responseJson<span class="token punctuation">.</span>movies<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>你也可以在React Native应用中使用ES7标准中的<code>async/await</code>语法：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 注意这个方法前面有async关键字</span>  <span class="token keyword">async</span> <span class="token function">getMoviesFromApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 注意这里的await语句，其所在的函数必须有async关键字声明</span>      <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://facebook.github.io/react-native/movies.json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> responseJson <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> responseJson<span class="token punctuation">.</span>movies<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>这里别忘了catch住fetch可能抛出的异常，否则出错时你可能看不到任何提示。</p><p>当然不熟悉<code>Promise</code>和<code>async/await</code>的话，可以先参考以下资料：</p><p>   <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise</a></p><p>   <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise</a></p><p>   <a href="https://cnodejs.org/topic/560dbc826a1ed28204a1e7de">https://cnodejs.org/topic/560dbc826a1ed28204a1e7de</a></p><h1 id="使用其他网络库"><a href="#使用其他网络库" class="headerlink" title="使用其他网络库"></a>使用其他网络库</h1><p>RN 里面其实也实现了<code>XMLHttpRequest</code>接口的。这意味着你可以使用第三方库比如<a href="https://github.com/niftylettuce/frisbee">frisbee</a>或者<a href="https://github.com/axios/axios">axios</a>，或者直接使用 XMLHttpRequest 接口。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>request<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>request<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'https://mywebsite.com/endpoint/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>request<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>需要注意的是，安全机制与网页环境有所不同：在应用中你可以访问任何网站，没有跨域的限制。</p><h1 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h1><p>RN 也是支持<a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket">WebSocket</a>的，拿来做实时应用（如 IM 或者游戏）很方便。如果真的要用WS开发实时应用的话， 强烈推荐一下<a href="https://github.com/socketio/socket.io">socket.io</a>。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">'ws://host.com/path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ws<span class="token punctuation">.</span>onopen <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 打开一个连接</span>  ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'something'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 发送一个消息</span><span class="token punctuation">}</span><span class="token punctuation">;</span>ws<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 接收到了一个消息</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>ws<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 发生了一个错误</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>ws<span class="token punctuation">.</span>onclose <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 连接被关闭了</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>code<span class="token punctuation">,</span> e<span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>现在你的应用已经可以从各种渠道获取数据了。</p><h1 id="Refers"><a href="#Refers" class="headerlink" title="Refers"></a>Refers</h1><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Request">https://developer.mozilla.org/en-US/docs/Web/API/Request</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch">https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch</a></li><li><a href="https://github.com/socketio/socket.io">https://github.com/socketio/socket.io</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket">https://developer.mozilla.org/en-US/docs/Web/API/WebSocket</a></li><li><a href="https://github.com/axios/axios">https://github.com/axios/axios</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> React Native </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> rn </tag>
            
            <tag> fetch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Native学习日记四：UI库的使用（React Native Elements）</title>
      <link href="/2017/09/21/rn/react-native-elements/"/>
      <url>/2017/09/21/rn/react-native-elements/</url>
      
        <content type="html"><![CDATA[<p>在使用React Native的过程中，一直困扰我一个问题，原生组件的样式太过单一，做出的App样式不够美观，甚至可以说，太丑了啦！而自己去定义各种组件的样式、包装组件未免太过麻烦了，那样我们会花大把时间在写组件的样式上，我就想，有没有别人为我们包装好的组件，可以直接使用呢？一番搜索之后，还真发现了一个开箱即用的第三方UI组件库：<a href="https://react-native-training.github.io/react-native-elements/">React Native Elements</a>。</p><p>这是一个基于React Native的原生组件包装好的UI组件库，组件样式齐全，种类多，基本能满足我们做应用UI的需求，而且同样也是跨平台使用，可以直接在RN项目中应用，具有以下特点：</p><ul><li>跨平台：跨Android、iOS和web一致的设计！</li><li>使用方便：完全使用Javascript实现，并且支持expo项目！</li><li>完美定制：随心所欲定制我们自己需要的组件！</li><li>社区主导：100%由社区构建，完全开源的项目！</li></ul><p>所以，这一篇我们来介绍一下React Native Elements的使用。开始之前，这里有React Native Elements做的一个体验demo：<a href="https://github.com/react-native-training/react-native-elements-app">react-native-elements-app</a>:</p><p><img src="/blogimgs/rne-demo.png" alt="rne-demo"></p><p>拿出手机，使用expo扫描上面的二维码，就可以尽情体验React Native Elements的各种组件了！</p><h1 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h1><p>React Native Elements提供一个全功能的UI套件，用于在原生应用程序中创建应用程序。许多伟大的UI组件都是围绕开源开发的。React Native Elements提供具有一致API和外观的现成套件。跟随我的脚步开始使用它吧！</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>如果你的项目是使用<code>expo</code>或<code>create-react-native-app</code>创建的，那么你需要做的，就只是安装react-native-elements，因为React Native Elements中需要用到react-native-vector-icons，而expo和CRNA已经为我们封装好了该icon库。</p><pre class=" language-bash"><code class="language-bash">yarn add react-native-elements<span class="token comment" spellcheck="true"># or with npm</span><span class="token function">npm</span> <span class="token function">install</span> --save react-native-elements</code></pre><p>而如果你的项目是用<code>react-native init</code>初始化的RN项目，你需要执行以下步骤：</p><p>1.安装react-native-elements：</p><pre class=" language-bash"><code class="language-bash">yarn add react-native-elements<span class="token comment" spellcheck="true"># or with npm</span><span class="token function">npm</span> i react-native-elements --save</code></pre><p>2.安装react-native-vector-icons：</p><pre class=" language-bash"><code class="language-bash">yarn add react-native-vector-icons<span class="token comment" spellcheck="true"># or with npm</span><span class="token function">npm</span> i --save react-native-vector-icons</code></pre><p>3.执行link：</p><pre class=" language-bash"><code class="language-bash">react-native <span class="token function">link</span> react-native-vector-icons</code></pre><p>然后，你就可以在你的项目中用起来了。</p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>React Native Elements提供了成套的包装好的组件，我们咋可以直接将这些组件拿来使用，然后通过设置一些参数，就可以制作属于你自己的与众不同的组件。这里我介绍几个常用的：</p><h3 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h3><p>我们知道，React Native提供的的Button组件是没有样式的，而这里的Button组件，可以轻松自定义Button的样式，先看一下基础用法：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Button <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-native-elements'</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>Button  title<span class="token operator">=</span><span class="token string">"登录"</span>  loading  loadingProps<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> size<span class="token punctuation">:</span> <span class="token string">"large"</span><span class="token punctuation">,</span> color<span class="token punctuation">:</span> <span class="token string">"rgba(111, 202, 186, 1)"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>  titleStyle<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> fontWeight<span class="token punctuation">:</span> <span class="token string">"700"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>  buttonStyle<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>    backgroundColor<span class="token punctuation">:</span> <span class="token string">"rgba(92, 99,216, 1)"</span><span class="token punctuation">,</span>    width<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span> <span class="token number">45</span><span class="token punctuation">,</span>    borderColor<span class="token punctuation">:</span> <span class="token string">"transparent"</span><span class="token punctuation">,</span>    borderWidth<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    borderRadius<span class="token punctuation">:</span> <span class="token number">5</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>  containerStyle<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> marginTop<span class="token punctuation">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span></code></pre><p>看一下Button的一些props：</p><ol><li>title：传入一个<code>string</code>，定义Button的标题。</li><li>titleStyle：传入值为样式对象，定义标题的文本样式。</li><li>buttonStyle：传入值为样式对象，定义Button的样式。</li><li>clear：设置为<code>true</code>可以使Button透明，默认为<code>false</code>。</li><li>disabled：设置为<code>false</code>按钮将不可点击，默认为<code>true</code>。</li><li>icon：定义Button的图标，未设置title时将代替title，设置了title将显示在title左侧。</li></ol><h3 id="Icon"><a href="#Icon" class="headerlink" title="Icon"></a>Icon</h3><p>Icon采用<a href="https://design.google.com/icons/">material icon</a>的name来作为prop,可以在<a href="https://oblador.github.io/react-native-vector-icons/">react-native-vector-icons directory</a>搜索你想要的图标。</p><p>看一下基础用法：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Icon <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-native-elements'</span><span class="token operator">&lt;</span>Icon  raised  name<span class="token operator">=</span><span class="token string">'heartbeat'</span>  type<span class="token operator">=</span><span class="token string">'font-awesome'</span>  color<span class="token operator">=</span><span class="token string">'#f50'</span>  onPress<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><p>Icon的props：</p><ol><li>name：icon的名字，是必须的，直接决定icon是哪一个material icon。</li><li>type：icon的默认type是<code>material</code>，可以使用<code>material-community, zocial, font-awesome, octicon, ionicon, foundation, evilicon, simple-line-icon, feather or entypo</code>中任意一种来覆盖默认类型。</li><li>size：icon的尺寸，传入一个数字即可。</li><li>color：icon的颜色。</li><li>iconStyle：自定义样式来继承并覆盖默认样式。</li><li>onPress：绑定点击回调事件。</li><li>reverse：翻转icon的颜色与背景颜色，通常用来使Icon看起来像一个按钮。</li><li>raised：设置为<code>true</code>会给icon增加一个box shadow，默认为<code>false</code>。</li><li>reverseColor：定义翻转后的图标颜色。</li></ol><p>完整属性参考：<a href="https://react-native-training.github.io/react-native-elements/docs/icon.html">https://react-native-training.github.io/react-native-elements/docs/icon.html</a></p><h3 id="List-amp-ListItem"><a href="#List-amp-ListItem" class="headerlink" title="List &amp; ListItem"></a>List &amp; ListItem</h3><p>用来自定义列表组件，看一个例子：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> StyleSheet<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-native'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Text<span class="token punctuation">,</span> Button<span class="token punctuation">,</span> Icon<span class="token punctuation">,</span> List<span class="token punctuation">,</span> ListItem <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-native-elements'</span><span class="token punctuation">;</span><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>        title<span class="token punctuation">:</span> <span class="token string">'个人信息'</span><span class="token punctuation">,</span>        subtitle<span class="token punctuation">:</span> <span class="token string">'编辑姓名等'</span><span class="token punctuation">,</span>        detail<span class="token punctuation">:</span> <span class="token string">'Info'</span><span class="token punctuation">,</span>        icon<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Icon            name<span class="token operator">=</span><span class="token string">"user-circle"</span>            size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">22</span><span class="token punctuation">}</span>            color<span class="token operator">=</span><span class="token string">'blue'</span>            type<span class="token operator">=</span><span class="token string">'font-awesome'</span>            containerStyle<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> paddingRight<span class="token punctuation">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token operator">/</span><span class="token operator">></span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        title<span class="token punctuation">:</span> <span class="token string">'隐私与权限'</span><span class="token punctuation">,</span>        subtitle<span class="token punctuation">:</span> <span class="token string">'联系人，我的相册，朋友圈'</span><span class="token punctuation">,</span>        detail<span class="token punctuation">:</span> <span class="token string">'authority'</span><span class="token punctuation">,</span>        icon<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Icon            name<span class="token operator">=</span><span class="token string">"key"</span>            size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">22</span><span class="token punctuation">}</span>            color<span class="token operator">=</span><span class="token string">'orange'</span>            type<span class="token operator">=</span><span class="token string">'font-awesome'</span>            containerStyle<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> paddingRight<span class="token punctuation">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token operator">/</span><span class="token operator">></span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        title<span class="token punctuation">:</span> <span class="token string">'消息提醒与聊天'</span><span class="token punctuation">,</span>        subtitle<span class="token punctuation">:</span> <span class="token string">'通知，聊天设置'</span><span class="token punctuation">,</span>        detail<span class="token punctuation">:</span> <span class="token string">'message'</span><span class="token punctuation">,</span>        icon<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Icon            name<span class="token operator">=</span><span class="token string">"chat"</span>            size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">23</span><span class="token punctuation">}</span>            color<span class="token operator">=</span><span class="token string">'green'</span>            containerStyle<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> paddingRight<span class="token punctuation">:</span> <span class="token number">24</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token operator">/</span><span class="token operator">></span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        title<span class="token punctuation">:</span> <span class="token string">'数据和缓存'</span><span class="token punctuation">,</span>        subtitle<span class="token punctuation">:</span> <span class="token string">'数据和缓存设置'</span><span class="token punctuation">,</span>        detail<span class="token punctuation">:</span> <span class="token string">'data'</span><span class="token punctuation">,</span>        icon<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Icon            name<span class="token operator">=</span><span class="token string">"settings-box"</span>            size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">25</span><span class="token punctuation">}</span>            color<span class="token operator">=</span><span class="token string">'pink'</span>            type<span class="token operator">=</span><span class="token string">'material-community'</span>            containerStyle<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> paddingRight<span class="token punctuation">:</span> <span class="token number">23</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token operator">/</span><span class="token operator">></span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        title<span class="token punctuation">:</span> <span class="token string">'帐号与安全'</span><span class="token punctuation">,</span>        subtitle<span class="token punctuation">:</span> <span class="token string">'修改手机号和密码'</span><span class="token punctuation">,</span>        detail<span class="token punctuation">:</span> <span class="token string">'safe'</span><span class="token punctuation">,</span>        icon<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Icon            name<span class="token operator">=</span><span class="token string">"lock"</span>            size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">26</span><span class="token punctuation">}</span>            color<span class="token operator">=</span><span class="token string">'purple'</span>            containerStyle<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> paddingRight<span class="token punctuation">:</span> <span class="token number">23</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token operator">/</span><span class="token operator">></span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">MyList</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>           <span class="token operator">&lt;</span>List containerStyle<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>listContainer<span class="token punctuation">}</span> <span class="token operator">></span>               <span class="token punctuation">{</span>list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>                   <span class="token operator">&lt;</span>ListItem                       key<span class="token operator">=</span><span class="token punctuation">{</span>i<span class="token punctuation">}</span>                       title<span class="token operator">=</span><span class="token punctuation">{</span>l<span class="token punctuation">.</span>title<span class="token punctuation">}</span>                       subtitle<span class="token operator">=</span><span class="token punctuation">{</span>l<span class="token punctuation">.</span>subtitle<span class="token punctuation">}</span>                       leftIcon<span class="token operator">=</span><span class="token punctuation">{</span>l<span class="token punctuation">.</span>icon<span class="token punctuation">}</span>                       containerStyle<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>ListItemContainer<span class="token punctuation">}</span>                       titleStyle<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> fontSize<span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>                       subtitleStyle<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> fontWeight<span class="token punctuation">:</span> <span class="token string">'normal'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>                       onPress<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> navigation<span class="token punctuation">.</span><span class="token function">navigate</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>detail<span class="token punctuation">)</span><span class="token punctuation">}</span>                   <span class="token operator">/</span><span class="token operator">></span>                <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>           <span class="token operator">&lt;</span><span class="token operator">/</span>List<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> styles <span class="token operator">=</span> StyleSheet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    listContainer<span class="token punctuation">:</span><span class="token punctuation">{</span>        marginTop<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>         borderTopWidth<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>         borderBottomWidth<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    ListItemContainer<span class="token punctuation">:</span><span class="token punctuation">{</span>        borderTopWidth<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        borderBottomWidth<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        marginLeft<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>        height<span class="token punctuation">:</span> <span class="token number">65</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>这是之前提到的防探探应用的设置页面的一部分，看一下效果图：</p><p><img src="/blogimgs/list.png" alt="list"></p><p>注意每一个ListItem都必须带一个key，渲染时候才会正确渲染，然后这里用到了以前我们介绍的map方法。</p><p>来看一下List和ListItem的属性：</p><h4 id="List-Props："><a href="#List-Props：" class="headerlink" title="List Props："></a>List Props：</h4><p>List只有一个prop，就是containerStyle，默认的值为：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  marginTop<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>   borderTopWidth<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>   borderBottomWidth<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>   borderBottomColor<span class="token punctuation">:</span> #cbd2d9<span class="token punctuation">}</span></code></pre><p>可以自己传入一个样式对象来覆盖这些样式。</p><h4 id="ListItem-props"><a href="#ListItem-props" class="headerlink" title="ListItem props"></a>ListItem props</h4><ol><li>hideChevron：设置为<code>true</code>可以隐藏右侧Chevron。</li><li>chevronColor：设置Chevron的颜色。</li><li>containerStyle：定义容器的样式。</li><li>fontFamily：自定义字体，ios下默认为HelveticaNeue，android下默认为Sans Serif。</li><li>title：定义显示的title文本。</li><li>titleNumberOfLines：设置title的行数。</li><li>titleStyle：title的文本样式。</li><li>titleContainerStyle：title的容器的样式。</li><li>subtitle：设置title下显示的副标题。</li><li>leftIcon：设置左侧图标，传入值可以是一个object {name, color, style, type} (type defaults to material icons)，也可以是一个React Native组件，上图中我们使用的是Icon。</li><li>onPress：点击事件。</li></ol><p>完整属性参考：<a href="https://react-native-training.github.io/react-native-elements/docs/lists.html">https://react-native-training.github.io/react-native-elements/docs/lists.html</a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>暂时介绍这么多，基本用法已经介绍，更多组件的使用，可以参考：<a href="https://react-native-training.github.io/react-native-elements/docs/overview.html">官方文档</a></p><p>其实各种组件的使用方法都大同小异，都是直接import过来使用，然后设置一些参数即可，这里我就不一一介绍了，我相信官网写的会比我这里介绍的更有权威性，总之我觉得这是一个很好的UI库，希望能帮助大家更好的使用React Native进行开发！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> React Native </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> rn </tag>
            
            <tag> react-native-elements </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Native学习日记三：Navigation（导航）</title>
      <link href="/2017/09/12/rn/navigation/"/>
      <url>/2017/09/12/rn/navigation/</url>
      
        <content type="html"><![CDATA[<p>开发一个App，自然少不了要实现各个页面之间的自由切换与跳转，我们把管理这类功能的工具称为navigator。像我们平时使用频繁的QQ，底部的导航栏，左侧滑出的菜单等，就是navigator的实际应用。某种意义上来说，navigator决定了你的App的结构。</p><p>使用React<br>Native进行开发，现在最火的导航工具应该就是<a href="https://reactnavigation.org/">react-natvigation</a>了，这是facebook官方推荐使用的导航工具，有原生般的性能体验效果，应该算是React Native导航组件的主流军，而且是用JS实现的，简单易学，很容易上手，这里介绍一下一些基础知识和使用方法。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装很简单，直接在你的RN项目中用npm安装即可，无需其他配置：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save react-navigation</code></pre><h1 id="Navigators"><a href="#Navigators" class="headerlink" title="Navigators"></a>Navigators</h1><p>导航器navigator是react-natvigation中最核心的东西，决定了App页面之间的逻辑层次关系，react-natvigation为我们提供了三种不同类型的navigator：</p><ul><li>StackNavigator：层叠式页面，用于页面跳转和传递参数，新页面会覆盖在旧页面上。</li><li>TabNavigator：默认是底部导航栏，可以实现在同一屏幕下不同页面的切换，类似于QQ底部的三个标签。</li><li>DrawerNavigator：抽屉式导航，主要用于左右两侧菜单栏的实现。</li></ul><p>接下来我们分别介绍一下这三种navigator。</p><h2 id="StackNavigator"><a href="#StackNavigator" class="headerlink" title="StackNavigator"></a>StackNavigator</h2><p>我们先来看一个具体例子：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Text <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-native'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> StackNavigator <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-navigation'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Icon <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-native-elements'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Profile <span class="token keyword">from</span> <span class="token string">'../views/Profile.js'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Profile_setting <span class="token keyword">from</span> <span class="token string">'../views/Profile_setting'</span><span class="token keyword">const</span> ProfileScreen <span class="token operator">=</span> <span class="token function">StackNavigator</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    profile<span class="token punctuation">:</span> <span class="token punctuation">{</span>        screen<span class="token punctuation">:</span> Profile<span class="token punctuation">,</span>        path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>        navigationOptions<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> navigation <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>            title<span class="token punctuation">:</span> <span class="token string">'个人资料'</span><span class="token punctuation">,</span>            headerStyle<span class="token punctuation">:</span> <span class="token punctuation">{</span>                backgroundColor<span class="token punctuation">:</span> <span class="token string">'#BB3D00'</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            headerTitleStyle<span class="token punctuation">:</span> <span class="token punctuation">{</span>                color<span class="token punctuation">:</span> <span class="token string">'white'</span><span class="token punctuation">,</span>                paddingLeft<span class="token punctuation">:</span> <span class="token number">75</span><span class="token punctuation">,</span>                fontWeight<span class="token punctuation">:</span> <span class="token string">'normal'</span><span class="token punctuation">,</span>                fontSize<span class="token punctuation">:</span> <span class="token number">20</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            headerLeft<span class="token punctuation">:</span> <span class="token punctuation">(</span>                <span class="token operator">&lt;</span>Icon                    name<span class="token operator">=</span><span class="token string">"menu"</span>                    size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">30</span><span class="token punctuation">}</span>                    type<span class="token operator">=</span><span class="token string">"entypo"</span>                    iconStyle<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> paddingLeft<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>                    onPress<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> navigation<span class="token punctuation">.</span><span class="token function">navigate</span><span class="token punctuation">(</span><span class="token string">'DrawerOpen'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>                    color<span class="token operator">=</span><span class="token string">"white"</span>                <span class="token operator">/</span><span class="token operator">></span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            headerRight<span class="token punctuation">:</span> <span class="token punctuation">(</span>                <span class="token operator">&lt;</span>Icon                    name<span class="token operator">=</span><span class="token string">"pencil"</span>                    size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">25</span><span class="token punctuation">}</span>                    type<span class="token operator">=</span><span class="token string">"material-community"</span>                    iconStyle<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> paddingRight<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>                    onPress<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> navigation<span class="token punctuation">.</span><span class="token function">navigate</span><span class="token punctuation">(</span><span class="token string">'profile_setting'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>                    color<span class="token operator">=</span><span class="token string">"white"</span>                <span class="token operator">/</span><span class="token operator">></span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    profile_setting<span class="token punctuation">:</span> <span class="token punctuation">{</span>        screen<span class="token punctuation">:</span> Profile_setting<span class="token punctuation">,</span>        path<span class="token punctuation">:</span> <span class="token string">'/profile/profile_setting'</span><span class="token punctuation">,</span>        ight    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> ProfileScreen<span class="token punctuation">;</span></code></pre><p>这是我学习使用的时候，仿照某社交软件做的个人资料页面。看一下效果图：</p><p><img src="/blogimgs/profile.png" alt="profile"></p><p>可以看到主要有两个页面，一个是个人资料的展示页面<code>profile</code>，一个是更改个人资料的设置页面<code>profile_setting</code>，两个页面采用的是层叠式的导航，点击右上角小铅笔后会跳转到设置页面。注意我们这里所展示的代码并不是两个页面视图本身，而是它们的导航组件，具体的视图界面我们是在别的文件中定义好，然后<code>import</code>过来作为组件使用的，我们这里定义的只是两个页面的跳转关系，还有一些导航栏属性，比如title等。</p><p>首先，在我们这一视块下，有两个页面，我们可以把<code>ProfileScreen</code>看作是一个组件，而它下面包含两个页面，这个组件只是App的一部分，在你点击某处后进入。</p><p>我们可以看到，定义一个StackNavigator只需将其···import```,然后在其中定义我们的想要的页面即可，每一个页面可以看作一个对象，对象的内容就是我们对这个页面定义的一些导航属性。那我们来看一下StackNavigator有哪些导航属性：</p><ul><li>navigationOptions：配置StackNavigator的一些属性。如title、headerStyle等。</li><li>screen：定义界面显示的组件，最重要的一个属性，也就是决定我们的页面是哪一个，需要填入import之后的页面。</li><li>mode：定义跳转风格：</li></ul><p><code>card</code>：使用iOS和安卓默认的风格。</p><p><code>modal</code>：iOS独有的使屏幕从底部画出。类似iOS的present效果 。</p><ul><li>headerMode：返回上级页面时动画效果：</li></ul><p><code>float</code>：iOS默认的效果</p><p><code>screen</code>：滑动过程中，整个页面都会返回</p><p><code>none</code>：无动画</p><ul><li>cardStyle：自定义设置跳转效果：</li></ul><p><code>transitionConfig</code>： 自定义设置滑动返回的配置</p><p><code>onTransitionStart</code>：当转换动画即将开始时被调用的功能</p><p><code>onTransitionEnd</code>：当转换动画完成，将被调用的功能</p><ul><li>path：路由中设置的路径的覆盖映射配置。  </li><li>initialRouteName：设置默认显示的初始页面组件，必须是上面已注册的页面组件，如果不设置，则默认显示第一个页面。  </li><li>initialRouteParams：初始路由参数。</li></ul><h3 id="navigationOptions"><a href="#navigationOptions" class="headerlink" title="navigationOptions"></a>navigationOptions</h3><p>navigationOptions配置页面的一些属性，我们单独来看一下有哪些：</p><ul><li>title：标题，如果设置了这个导航栏和标签栏的title就会变成一样的，不推荐使用</li><li>header：可以设置一些顶部导航的属性，如果隐藏顶部导航栏只要将这个属性设置为null</li><li>headerTitle：设置导航栏标题，推荐</li><li>headerBackTitle：设置跳转页面左侧返回箭头后面的文字，默认是上一个页面的标题。可以自定义，也可以设置为null</li><li>headerTruncatedBackTitle：设置当上个页面标题不符合返回箭头后的文字时，默认改成”返回”</li><li>headerRight：设置导航条右侧。可以是按钮或者其他视图控件</li><li>headerLeft：设置导航条左侧。可以是按钮或者其他视图控件</li><li>headerStyle：设置导航条的样式。背景色，宽高等</li><li>headerTitleStyle：设置导航栏文字样式</li><li>headerBackTitleStyle：设置导航栏‘返回’文字样式</li><li>headerTintColor：设置导航栏颜色</li><li>headerPressColorAndroid：安卓独有的设置颜色纹理，需要安卓版本大于5.0</li><li>gesturesEnabled：是否支持滑动返回手势，iOS默认支持，安卓默认关闭</li></ul><p>可以看到我们的例子中，我就单独定义headerLeft，用的第三方库引入的Icon。多试试，就会慢慢掌握这些属性的联系和使用方法。</p><h3 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h3><p>那么我们是怎么实现跳转的呢？所有注册给 StackNavigator 的组件都会接受到一个navigation参数，在需要跳转的页面，我们在配置navigationOptions的时候传入<code>navigation</code>,注意这里是对象解构，然后在我们的代码中就可以使用<code>navigation.navigate()</code>方法来实现跳转，比如在我们的代码中，我们为自定义的headerRight绑定了点击回调事件，在点击之后就可以跳转到设置页面：</p><pre class=" language-js"><code class="language-js">navigationOptions<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> navigation <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>            title<span class="token punctuation">:</span> <span class="token string">'个人资料'</span><span class="token punctuation">,</span>            <span class="token operator">...</span>            headerRight<span class="token punctuation">:</span> <span class="token punctuation">(</span>                <span class="token operator">&lt;</span>Icon                    name<span class="token operator">=</span><span class="token string">"pencil"</span>                    size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">25</span><span class="token punctuation">}</span>                    type<span class="token operator">=</span><span class="token string">"material-community"</span>                    iconStyle<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> paddingRight<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>                    onPress<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> navigation<span class="token punctuation">.</span><span class="token function">navigate</span><span class="token punctuation">(</span><span class="token string">'profile_setting'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>                    color<span class="token operator">=</span><span class="token string">"white"</span>                <span class="token operator">/</span><span class="token operator">></span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre><p>在同一个StackNavigator下，我们可以用这个方法实现页面间的任意跳转。</p><h2 id="TabNavigator"><a href="#TabNavigator" class="headerlink" title="TabNavigator"></a>TabNavigator</h2><p>TabNavigator用来实现底部导航栏的页面管理，具体用法跟StackNavigator大同小异，还是看一个例子：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> TabNavigator <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-navigation'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Image <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-native'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Icon <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-native-elements'</span><span class="token punctuation">;</span><span class="token keyword">import</span> PictureScreen <span class="token keyword">from</span> <span class="token string">'../Views/Picture/Home.js'</span><span class="token punctuation">;</span><span class="token keyword">import</span> PersonalScreen <span class="token keyword">from</span> <span class="token string">'../Views/Personal/Home.js'</span><span class="token punctuation">;</span><span class="token keyword">import</span> TeamScreen <span class="token keyword">from</span> <span class="token string">'../Views/Team/Home.js'</span><span class="token punctuation">;</span><span class="token keyword">const</span> TabBar <span class="token operator">=</span> <span class="token function">TabNavigator</span><span class="token punctuation">(</span>  <span class="token punctuation">{</span>    Picture<span class="token punctuation">:</span> <span class="token punctuation">{</span>      screen<span class="token punctuation">:</span> PictureScreen<span class="token punctuation">,</span>      navigationOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>        title<span class="token punctuation">:</span> <span class="token string">'众晓'</span><span class="token punctuation">,</span>        tabBarLabel<span class="token punctuation">:</span> <span class="token string">'海报'</span><span class="token punctuation">,</span>        tabBarIcon<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> tintColor <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>          <span class="token operator">&lt;</span>Icon name<span class="token operator">=</span><span class="token string">"picture"</span> type<span class="token operator">=</span><span class="token string">"simple-line-icon"</span> color<span class="token operator">=</span><span class="token punctuation">{</span>tintColor<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    Team<span class="token punctuation">:</span> <span class="token punctuation">{</span>      screen<span class="token punctuation">:</span> TeamScreen<span class="token punctuation">,</span>      navigationOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>        title<span class="token punctuation">:</span> <span class="token string">'团队'</span><span class="token punctuation">,</span>        tabBarIcon<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> tintColor <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>          <span class="token operator">&lt;</span>Icon name<span class="token operator">=</span><span class="token string">"people"</span> type<span class="token operator">=</span><span class="token string">"simple-line-icon"</span> color<span class="token operator">=</span><span class="token punctuation">{</span>tintColor<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    Personal<span class="token punctuation">:</span> <span class="token punctuation">{</span>      screen<span class="token punctuation">:</span> PersonalScreen<span class="token punctuation">,</span>      navigationOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>        title<span class="token punctuation">:</span> <span class="token string">'我的'</span><span class="token punctuation">,</span>        tabBarIcon<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> tintColor <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>          <span class="token operator">&lt;</span>Icon name<span class="token operator">=</span><span class="token string">"user"</span> type<span class="token operator">=</span><span class="token string">"simple-line-icon"</span> color<span class="token operator">=</span><span class="token punctuation">{</span>tintColor<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    tabBarPosition<span class="token punctuation">:</span> <span class="token string">'bottom'</span><span class="token punctuation">,</span>    animationEnabled<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    tabBarOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>      showIcon<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      style<span class="token punctuation">:</span> <span class="token punctuation">{</span>        backgroundColor<span class="token punctuation">:</span> <span class="token string">'white'</span><span class="token punctuation">,</span>        borderTopWidth<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      indicatorStyle<span class="token punctuation">:</span> <span class="token punctuation">{</span>        display<span class="token punctuation">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      iconStyle<span class="token punctuation">:</span> <span class="token punctuation">{</span>        width<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span>        height<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      labelStyle<span class="token punctuation">:</span> <span class="token punctuation">{</span>        fontSize<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>        marginTop<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        marginBottom<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      tabStyle<span class="token punctuation">:</span> <span class="token punctuation">{</span>        height<span class="token punctuation">:</span> <span class="token number">49</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      inactiveTintColor<span class="token punctuation">:</span> <span class="token string">'#595757'</span><span class="token punctuation">,</span>      activeTintColor<span class="token punctuation">:</span> <span class="token string">'#ff8201'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> TabBar<span class="token punctuation">;</span></code></pre><p>这是我做的另一个App里的TabNavigator，底部导航栏有三个tab，模式跟手机QQ差不多，可以在同一屏幕下点击三个tab自由切换页面。</p><p>我们来看一下TabNavigator的配置属性，相同的一些属性就不作介绍了，看一些不同的：</p><h3 id="navigationOptions-1"><a href="#navigationOptions-1" class="headerlink" title="navigationOptions:"></a>navigationOptions:</h3><pre><code>  title：标题，会同时设置导航条和标签栏的title。    tabBarVisible：是否隐藏标签栏。默认不隐藏(true)。    tabBarIcon：设置标签栏的图标。需要给每个都设置。    tabBarLabel：设置标签栏的title。推荐使用这个来代替title。 </code></pre><h3 id="TabNavigatorConfig"><a href="#TabNavigatorConfig" class="headerlink" title="TabNavigatorConfig"></a>TabNavigatorConfig</h3><pre><code>tabBarPosition：设置tabbar的位置，iOS默认在底部，安卓默认在顶部。（属性值：'top'，'bottom'）  swipeEnabled：是否允许在标签之间进行滑动  animationEnabled：是否在更改标签时显示动画  lazy：是否根据需要懒惰呈现标签，而不是提前，意思是在app打开的时候将底部标签栏全部加载，默认false,推荐为true  initialRouteName： 设置默认显示的页面组件名称backBehavior：按 back 键是否跳转到第一个Tab(首页)， none 为不跳转  tabBarOptions：配置标签栏的一些属性</code></pre><h3 id="tabBarOptions"><a href="#tabBarOptions" class="headerlink" title="tabBarOptions"></a>tabBarOptions</h3><p>tabBarOptions在ios和安卓下有些许差别，分别介绍：</p><h4 id="ios"><a href="#ios" class="headerlink" title="ios"></a>ios</h4><pre><code>activeTintColor：label和icon的前景色 活跃状态下  activeBackgroundColor：label和icon的背景色 活跃状态下  inactiveTintColor：label和icon的前景色 不活跃状态下  inactiveBackgroundColor：label和icon的背景色 不活跃状态下  showLabel：是否显示label，默认开启 style：tabbar的样式style：标签栏的样式  labelStyle：label的样式tabStyle：tab的样式</code></pre><h3 id="安卓"><a href="#安卓" class="headerlink" title="安卓"></a>安卓</h3><pre><code>activeTintColor：label和icon的前景色 活跃状态下  inactiveTintColor：label和icon的前景色 不活跃状态下  showIcon：是否显示图标，默认关闭  showLabel：是否显示label，默认开启 style：tabbar的样式  labelStyle：label的样式 upperCaseLabel：是否使标签大写，默认为true  pressColor：material涟漪效果的颜色（安卓版本需要大于5.0）  pressOpacity：按压标签的透明度变化（安卓版本需要小于5.0）  scrollEnabled：是否启用可滚动选项卡 tabStyle：tab的样式  indicatorStyle：标签指示器的样式对象（选项卡底部的行）。安卓底部会多出一条线，可以将height设置为0来暂时解决这个问题  labelStyle：label的样式  iconStyle：图标样式</code></pre><h2 id="DrawerNavigator"><a href="#DrawerNavigator" class="headerlink" title="DrawerNavigator"></a>DrawerNavigator</h2><p>DrawerNavigator定义左侧菜单栏下的页面。下面是与StackNavigator中介绍的例子同一个App中的DrawerNavigator使用代码：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> MainNavigator <span class="token operator">=</span> <span class="token function">DrawerNavigator</span><span class="token punctuation">(</span>  <span class="token punctuation">{</span>    Profile<span class="token punctuation">:</span> <span class="token punctuation">{</span>      screen<span class="token punctuation">:</span> ProfileScreen<span class="token punctuation">,</span>      navigationOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>        drawerLabel<span class="token punctuation">:</span> ProfileDrawerItem      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    Tantan<span class="token punctuation">:</span> <span class="token punctuation">{</span>      screen<span class="token punctuation">:</span> TantanScreen<span class="token punctuation">,</span>      navigationOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>        drawerLabel<span class="token punctuation">:</span> <span class="token string">"探探"</span><span class="token punctuation">,</span>        drawerIcon<span class="token punctuation">:</span> <span class="token punctuation">(</span>          <span class="token operator">&lt;</span>Icon            name<span class="token operator">=</span><span class="token string">"users"</span>            color<span class="token operator">=</span><span class="token string">"white"</span>            size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">}</span>            type<span class="token operator">=</span><span class="token string">"feather"</span>            style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>              width<span class="token punctuation">:</span> <span class="token number">45</span><span class="token punctuation">,</span>              height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>              alignItems<span class="token punctuation">:</span> <span class="token string">"center"</span><span class="token punctuation">,</span>              justifyContent<span class="token punctuation">:</span> <span class="token string">"center"</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span>          <span class="token operator">/</span><span class="token operator">></span>        <span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    Anlian<span class="token punctuation">:</span> <span class="token punctuation">{</span>      screen<span class="token punctuation">:</span> AnlianScreen<span class="token punctuation">,</span>      navigationOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>        drawerLabel<span class="token punctuation">:</span> <span class="token string">"匿名暗恋表白"</span><span class="token punctuation">,</span>        drawerIcon<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> tintColor <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>          <span class="token operator">&lt;</span>Icon            name<span class="token operator">=</span><span class="token string">"email-open"</span>            color<span class="token operator">=</span><span class="token string">"white"</span>            size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">}</span>            style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>              width<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>              height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>              alignItems<span class="token punctuation">:</span> <span class="token string">"center"</span><span class="token punctuation">,</span>              justifyContent<span class="token punctuation">:</span> <span class="token string">"center"</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span>            type<span class="token operator">=</span><span class="token string">"material-community"</span>          <span class="token operator">/</span><span class="token operator">></span>        <span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    Setting<span class="token punctuation">:</span> <span class="token punctuation">{</span>      screen<span class="token punctuation">:</span> SettingScreen<span class="token punctuation">,</span>      navigationOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>        drawerLabel<span class="token punctuation">:</span> <span class="token string">"设置"</span><span class="token punctuation">,</span>        drawerIcon<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> tintColor <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>          <span class="token operator">&lt;</span>Icon            name<span class="token operator">=</span><span class="token string">"settings"</span>            color<span class="token operator">=</span><span class="token string">"white"</span>            size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">}</span>            style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>              width<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>              height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>              alignItems<span class="token punctuation">:</span> <span class="token string">"center"</span><span class="token punctuation">,</span>              justifyContent<span class="token punctuation">:</span> <span class="token string">"center"</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span>            type<span class="token operator">=</span><span class="token string">"feather"</span>          <span class="token operator">/</span><span class="token operator">></span>        <span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    Guidence<span class="token punctuation">:</span> <span class="token punctuation">{</span>      screen<span class="token punctuation">:</span> GuidanceScreen<span class="token punctuation">,</span>      navigationOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>        drawerLabel<span class="token punctuation">:</span> <span class="token string">"新手引导"</span><span class="token punctuation">,</span>        drawerIcon<span class="token punctuation">:</span> <span class="token punctuation">(</span>          <span class="token operator">&lt;</span>Icon            name<span class="token operator">=</span><span class="token string">"question-circle"</span>            color<span class="token operator">=</span><span class="token string">"white"</span>            size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">}</span>            style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>              width<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>              height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>              alignItems<span class="token punctuation">:</span> <span class="token string">"center"</span><span class="token punctuation">,</span>              justifyContent<span class="token punctuation">:</span> <span class="token string">"center"</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span>            type<span class="token operator">=</span><span class="token string">"font-awesome"</span>          <span class="token operator">/</span><span class="token operator">></span>        <span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    Share<span class="token punctuation">:</span> <span class="token punctuation">{</span>      screen<span class="token punctuation">:</span> ShareScreen<span class="token punctuation">,</span>      navigationOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>        drawerLabel<span class="token punctuation">:</span> <span class="token string">"推荐给好友"</span><span class="token punctuation">,</span>        drawerIcon<span class="token punctuation">:</span> <span class="token punctuation">(</span>          <span class="token operator">&lt;</span>Icon            name<span class="token operator">=</span><span class="token string">"share-alternative"</span>            color<span class="token operator">=</span><span class="token string">"white"</span>            size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">}</span>            style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>              width<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>              height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>              alignItems<span class="token punctuation">:</span> <span class="token string">"center"</span><span class="token punctuation">,</span>              justifyContent<span class="token punctuation">:</span> <span class="token string">"center"</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span>            type<span class="token operator">=</span><span class="token string">"entypo"</span>          <span class="token operator">/</span><span class="token operator">></span>        <span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    drawerBackgroundColor<span class="token punctuation">:</span> <span class="token string">"black"</span><span class="token punctuation">,</span>    initialRouteName<span class="token punctuation">:</span> <span class="token string">"Tantan"</span><span class="token punctuation">,</span>    drawerWidth<span class="token punctuation">:</span> SCREEN_WIDTH <span class="token operator">*</span> <span class="token number">0.83</span><span class="token punctuation">,</span>    contentOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>      activeTintColor<span class="token punctuation">:</span> <span class="token string">"white"</span><span class="token punctuation">,</span>      inactiveTintColor<span class="token punctuation">:</span> <span class="token string">"#ffffff"</span><span class="token punctuation">,</span>      itemStyle<span class="token punctuation">:</span> <span class="token punctuation">{</span>        marginTop<span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">,</span>        paddingLeft<span class="token punctuation">:</span> <span class="token number">15</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      labelStyle<span class="token punctuation">:</span> <span class="token punctuation">{</span>        fontSize<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>        marginLeft<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>        fontWeight<span class="token punctuation">:</span> <span class="token string">"normal"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上效果图，一目了然：</p><p><img src="/blogimgs/drawer.png" alt="drawer"></p><p>点击上面的头像，就进入前面说到的资料展示页面，所以其实一共有6个菜单选项，每一个点进去又是一个单独组件，有可能又是一个navigator组件，也有可能就显示单纯的React组件。</p><p>还是来看DrawerNavigator的属性，同样，重复的我们就不介绍了，介绍特殊的：</p><h3 id="DrawerNavigatorConfig"><a href="#DrawerNavigatorConfig" class="headerlink" title="DrawerNavigatorConfig"></a>DrawerNavigatorConfig</h3><pre><code>drawerWidth - 抽屉的宽度drawerPosition - 选项是左```left```或右```right```。 默认为左侧位置contentComponent - 用于呈现抽屉内容的组件，例如导航项。接收抽屉的导航。默认为DrawerItems，也可自定义custom contentComponent使用，后面介绍contentOptions - 配置抽屉内容，后面单独介绍initialRouteName - 默认显示的页面名称order - 定义抽屉项目顺序的routeNames数组path - 提供routeName到路径配置的映射，它覆盖routeConfigs中设置的路径。backBehavior - 后退按钮是否会切换到初始路由？ 如果是，设置为initialRoute，否则为none。 默认为initialRoute</code></pre><h3 id="contentOptions"><a href="#contentOptions" class="headerlink" title="contentOptions"></a>contentOptions</h3><p>contentOptions用来设置抽屉每一项的样式等，具体可设置以下属性：</p><pre><code>activeTintColor - 活动标签的标签和图标颜色activeBackgroundColor - 活动标签的背景颜色inactiveTintColor - 非活动标签的标签和图标颜色inactiveBackgroundColor - 非活动标签的背景颜色onItemPress(route) - 绑定标签被点击时的回调事件itemsContainerStyle - 标签栏的样式itemStyle - 图标和标签的样式labelStyle - 当您的标签是字符串时，会覆盖itemStyle中的文本样式iconContainerStyle - 图标的容器的样式</code></pre><h3 id="Navigation-Options"><a href="#Navigation-Options" class="headerlink" title="Navigation Options"></a>Navigation Options</h3><pre><code>drawerLabel：定义标签内容，一般为```string```,也可以是自定义的组件drawerIcon:定义标签前面的图标;</code></pre><h3 id="custom-contentComponent"><a href="#custom-contentComponent" class="headerlink" title="custom contentComponent"></a>custom contentComponent</h3><p>有时我们希望抽屉的内容不止是默认的DrawerItem，即不满足与文字和图标，这时我们可以自定义一个contentComponent，然后传入即可，比如我们上面的头像那一块，我们来看一下是怎么实现的：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> ProfileDrawerItem <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>  <span class="token operator">&lt;</span>View style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> flex<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>    <span class="token operator">&lt;</span>View      style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>        marginTop<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>        marginBottom<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">,</span>        justifyContent<span class="token punctuation">:</span> <span class="token string">"center"</span><span class="token punctuation">,</span>        alignItems<span class="token punctuation">:</span> <span class="token string">"center"</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token operator">></span>      <span class="token operator">&lt;</span>Avatar large rounded source<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./src/images/eason.png"</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>Text style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> color<span class="token punctuation">:</span> <span class="token string">"white"</span><span class="token punctuation">,</span> lineHeight<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">,</span> fontSize<span class="token punctuation">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>        好啊那你抱紧啊      <span class="token operator">&lt;</span><span class="token operator">/</span>Text<span class="token operator">></span>      <span class="token operator">&lt;</span>Text style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> color<span class="token punctuation">:</span> <span class="token string">"white"</span><span class="token punctuation">,</span> lineHeight<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> fontSize<span class="token punctuation">:</span> <span class="token number">15</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>        点击查看<span class="token operator">/</span>编辑      <span class="token operator">&lt;</span><span class="token operator">/</span>Text<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>View<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>View<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>整个这一段代码，其实就是我们所看到头像和下面的昵称，就是一个很简单的用React Native自己实现的小组件，然后在Profile页面的drawerLabel设置为我们自定义的这个组件就可以了，我们说了，一切都是组件：</p><pre class=" language-js"><code class="language-js">    <span class="token operator">...</span>Profile<span class="token punctuation">:</span> <span class="token punctuation">{</span>      screen<span class="token punctuation">:</span> ProfileScreen<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//这里就是第一个例子介绍StackNavigator</span>      navigationOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>        drawerLabel<span class="token punctuation">:</span> ProfileDrawerItem      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token operator">...</span></code></pre><p>项目完整代码在我的github上可以看到：<a href="https://github.com/liyuandie/TantanRN">https://github.com/liyuandie/TantanRN</a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>react-navigation简单易懂，上手容易，能满足我们的各种需求，在React Native 0.44版本后就已经中将Navigator删除。个人很推荐这个库作为代替Navigator的工具，不接受任何反驳，毕竟这也是facebook官方推荐的项目，有兴趣的同学可以尝试用一下，很好用。</p><p>另外，这里有一个react-navigation做的体验demo，可以拿expo扫描二维码体验一下：<a href="https://expo.io/@react-navigation/NavigationPlayground">NavigationPlayground</a></p><p><img src="/blogimgs/NavigationPlayground.png" alt="demo"></p><h1 id="Refers"><a href="#Refers" class="headerlink" title="Refers"></a>Refers</h1><ul><li><a href="http://gitbook.cn/gitchat/column/5a17c2e113c02f4a35ca5a7d/topic/5a17d8f713c02f4a35ca652b">http://gitbook.cn/gitchat/column/5a17c2e113c02f4a35ca5a7d/topic/5a17d8f713c02f4a35ca652b</a></li><li><a href="https://reactnavigation.org/docs/api-reference.html">https://reactnavigation.org/docs/api-reference.html</a></li><li><a href="https://reactnavigation.org/docs/getting-started.html">https://reactnavigation.org/docs/getting-started.html</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> React Native </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> rn </tag>
            
            <tag> react-navigation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Native学习日记二：React Native 内置 API 和组件</title>
      <link href="/2017/09/08/rn/apiandcomponents/"/>
      <url>/2017/09/08/rn/apiandcomponents/</url>
      
        <content type="html"><![CDATA[<p>学习一个框架，首先要了解它的一些基本知识、设计思想、基本用法等，然而我们真正用起来的时候，更多的是需要花很多时间来熟悉它一些API等，比如React Native，我们需要花时间来熟悉它的一些基础组件的使用，一些功能性的接口，这样才能真正在我们的工作中使用起来，上一篇我们已经介绍了一些基础常用的UI组件，这篇我们再来介绍几个我们能常用的，然后介绍一些内置的API，如发送网络请求、获取屏幕大小等。</p><h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><p>React Native 内置的组件有一些基础的组件，一些跨平台使用的组件，还有ios或者android平台特定的组件等，这里就只介绍一些能夸平台使用的组件，平台特定组件我们暂时不介绍，等用到的时候我们再来讨论。</p><h2 id="Picker"><a href="#Picker" class="headerlink" title="Picker"></a>Picker</h2><p>Picker是可以在iOS和Android上渲染原生的选择器，基础用法如下：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Picker</span>  <span class="token attr-name">selectedValue</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>language<span class="token punctuation">}</span></span>  <span class="token attr-name">onValueChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>lang<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>language<span class="token punctuation">:</span> lang<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Picker.Item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Java<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Picker.Item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JavaScript<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Picker</span><span class="token punctuation">></span></span></code></pre><p> 介绍一些属性：</p><h3 id="onValueChange-function"><a href="#onValueChange-function" class="headerlink" title="onValueChange function"></a>onValueChange <code>function</code></h3><p> 某一项被选中时执行此回调。调用时带有如下参数：</p><pre><code>itemValue: 被选中项的value属性itemPosition: 被选中项在picker中的索引位置</code></pre><h3 id="selectedValue-any"><a href="#selectedValue-any" class="headerlink" title="selectedValue any"></a>selectedValue <code>any</code></h3><p>默认选中的值。可以是字符串或整数。</p><h2 id="Slider"><a href="#Slider" class="headerlink" title="Slider"></a>Slider</h2><p>Slider主要用于我们选择一个范围值的时候：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token operator">&lt;</span>Slider    value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// 初始值</span>    disabled<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 如果为 true，则无法选择</span>    minimumValue<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 最小值</span>    maximumValue<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 最大值</span>    step<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// 步长</span>    onSlidingComplete<span class="token operator">=</span><span class="token punctuation">{</span>value <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> sliderFinalValue<span class="token punctuation">:</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>                     <span class="token comment" spellcheck="true">// 只在最后完成的时候触发</span>    onValueChange<span class="token operator">=</span><span class="token punctuation">{</span>value <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> sliderValue<span class="token punctuation">:</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 拖动选择过程中一直触发</span><span class="token operator">/</span><span class="token operator">></span></code></pre><h2 id="ScrollView"><a href="#ScrollView" class="headerlink" title="ScrollView"></a>ScrollView</h2><p>上一篇已经简单介绍过ScrollView，这里详细介绍一下它的一些属性和方法，主要有：</p><ul><li>设置horizontal为true，可以设置成横向滑动，默认为false。</li><li>onMomentumScrollBegin，开始滑动会执行一次。</li><li>onMomentumScrollEnd，滑动结束会执行一次。</li><li>onScroll，滑动过程中会持续触发此回调函数，可以通过<br>scrollEventThrottle 设置回调函数执行频率。</li><li>设置pagingEnabled为true 可以一整屏的翻页。</li><li>refreshControl，配置下拉刷新。</li><li>stickyHeaderIndices，配置某些子元素不滚动，注意横向滑动的时候此参数无效。</li><li>scrollTo(y: number | { x?: number, y?: number, animated?: boolean }, x: number, animated: boolean),滚动到指定的x, y偏移处。第三个参数为是否启用平滑滚动动画。</li><li>scrollToEnd，移动到最后（如果是竖向滚动就是最下面，如果是横向滚动就是最右面）。</li></ul><pre class=" language-jsx"><code class="language-jsx">onRefresh <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> refreshing<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 模拟异步加载数据</span>      <span class="token comment" spellcheck="true">// fetch data</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> refreshing<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ScrollTo<span class="token punctuation">"</span></span> <span class="token attr-name">onPress</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>refs<span class="token punctuation">.</span>scrollView<span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">,</span> animated<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></span><span class="token attr-name">}</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ScrollToEnd<span class="token punctuation">"</span></span> <span class="token attr-name">onPress</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>refs<span class="token punctuation">.</span>scrollView<span class="token punctuation">.</span><span class="token function">scrollToEnd</span><span class="token punctuation">(</span><span class="token punctuation">{</span> animated<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></span><span class="token attr-name">}</span> <span class="token punctuation">/></span></span>        <span class="token operator">&lt;</span>ScrollView          ref<span class="token operator">=</span><span class="token string">"scrollView"</span>          horizontal<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span>          onMomentumScrollBegin<span class="token operator">=</span><span class="token punctuation">{</span>e <span class="token operator">=</span><span class="token operator">></span> Alert<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'onMomentumScrollBegin: '</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">}</span>          onMomentumScrollEnd<span class="token operator">=</span><span class="token punctuation">{</span>e <span class="token operator">=</span><span class="token operator">></span> Alert<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'onMomentumScrollEnd: '</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">}</span>          pagingEnabled<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span>          stickyHeaderIndices<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 滑动的时候第一个不动</span>          refreshControl<span class="token operator">=</span><span class="token punctuation">{</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RefreshControl</span>              <span class="token attr-name">refreshing</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>refreshing<span class="token punctuation">}</span></span>              <span class="token attr-name">onRefresh</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onRefresh<span class="token punctuation">}</span></span>            <span class="token punctuation">/></span></span>          <span class="token punctuation">}</span>        <span class="token operator">></span>          <span class="token punctuation">{</span>            <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>i<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span><span class="token punctuation">></span></span>image<span class="token punctuation">:</span> <span class="token punctuation">{</span>i<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Text</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Image</span>                  <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> width<span class="token punctuation">:</span> <span class="token number">250</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">250</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>                  <span class="token attr-name">source</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> uri<span class="token punctuation">:</span> <span class="token string">'http://e.hiphotos.baidu.com/baike/pic/item/ac6eddc451da81cb6de1cb4d5a66d0160924312e.jpg'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>                <span class="token punctuation">/></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>View</span><span class="token punctuation">></span></span>            <span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ScrollView</span><span class="token punctuation">></span></span></code></pre><p>关于refreshControl使用，参考：</p><ul><li><a href="https://reactnative.cn/docs/0.51/refreshcontrol.html">https://reactnative.cn/docs/0.51/refreshcontrol.html</a></li></ul><h2 id="FlatList"><a href="#FlatList" class="headerlink" title="FlatList"></a>FlatList</h2><p>FlatList是一种惰性渲染，也就是说只会渲染出屏幕里显示的那部分，这点我们之前提过，这对于列表内容很多的时候是一个很好用的组件，我们来详细看一下它的用法，先看一个例子：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span>  FlatList<span class="token punctuation">,</span>  Text<span class="token punctuation">,</span>  TouchableHighlight<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-native'</span><span class="token punctuation">;</span><span class="token keyword">const</span> MyItem <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> title<span class="token punctuation">,</span> age<span class="token punctuation">,</span> selected<span class="token punctuation">,</span> onPress <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TouchableHighlight</span>    <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>      height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>      backgroundColor<span class="token punctuation">:</span> selected <span class="token operator">?</span> <span class="token string">'red'</span> <span class="token punctuation">:</span> <span class="token string">'white'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span>    <span class="token attr-name">onPress</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">onPress</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">}</span></span>  <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span><span class="token punctuation">></span></span><span class="token keyword">this</span> is <span class="token punctuation">{</span>title<span class="token punctuation">}</span><span class="token punctuation">,</span> age is<span class="token punctuation">:</span> <span class="token punctuation">{</span>age<span class="token punctuation">}</span><span class="token operator">...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Text</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TouchableHighlight</span><span class="token punctuation">></span></span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyList</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  state <span class="token operator">=</span> <span class="token punctuation">{</span> selected<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  _onPressItem <span class="token operator">=</span> title <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> selected <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>selected<span class="token punctuation">;</span>    selected<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token operator">!</span>selected<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      selected<span class="token punctuation">:</span> selected<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  _renderItem <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> item <span class="token operator">=</span> props<span class="token punctuation">.</span>item<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyItem</span>      <span class="token attr-name">title</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>title<span class="token punctuation">}</span></span>      <span class="token attr-name">age</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>age<span class="token punctuation">}</span></span>      <span class="token attr-name">onPress</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>_onPressItem<span class="token punctuation">}</span></span>      <span class="token attr-name">selected</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>selected<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">}</span></span>    <span class="token punctuation">/></span></span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FlatList</span>        <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>          height<span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span>          borderColor<span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span>          borderWidth<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></span>        <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>data<span class="token punctuation">}</span></span>        <span class="token attr-name">renderItem</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>_renderItem<span class="token punctuation">}</span></span>        <span class="token attr-name">numColumns</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span></span>        <span class="token attr-name">keyExtractor</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>title<span class="token punctuation">}</span></span>      <span class="token punctuation">/></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> MyList<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用方</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyList</span>          <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">'java'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">'js'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">21</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">'rust'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">'python'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">19</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">]</span><span class="token punctuation">}</span></span>        <span class="token punctuation">/></span></span></code></pre><p>用到的属性：</p><ul><li>numColumns:指定布局列数，多列布局只能在非水平模式下使用，即必须是horizontal={false}。</li><li>keyExtractor: (item: ItemT, index: number) =&gt; string ：此函数用于为给定的item生成一个不重复的key。Key的作用是使React能够区分同类元素的不同个体，以便在刷新时能够确定其变化的位置，减少重新渲染的开销。若不指定此函数，则默认抽取item.key作为key值。若item.key也不存在，则使用数组下标。</li></ul><p>其他属性和方法的用法，参见：</p><ul><li><a href="https://reactnative.cn/docs/0.51/flatlist.html#content">https://reactnative.cn/docs/0.51/flatlist.html#content</a></li></ul><h2 id="Modal"><a href="#Modal" class="headerlink" title="Modal"></a>Modal</h2><p>一个可以自定义的弹窗，Modal组件可以用来覆盖包含React Native根视图的原生视图。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Modal</span>    <span class="token attr-name">animationType</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token string">'slide'</span><span class="token punctuation">}</span></span>    <span class="token attr-name">transparent</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span></span>    <span class="token attr-name">visible</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>visible<span class="token punctuation">}</span></span>    <span class="token attr-name">onRequestClose</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> visible<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TouchableOpacity</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> flex<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token attr-name">onPress</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> visible<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>modalContainer<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>modalView<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>modalText<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>填写信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Text</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>昵称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Text</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>inputContainer<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextInput</span>                      <span class="token attr-name">placeholder</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>userName<span class="token punctuation">}</span></span>                      <span class="token attr-name">underlineColorAndroid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transparent<span class="token punctuation">"</span></span>                      <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>input<span class="token punctuation">}</span></span>                      <span class="token attr-name">onChangeText</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>text <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> text <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>                    <span class="token punctuation">/></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>View</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>button_container<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>                      <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>保存<span class="token punctuation">"</span></span>                      <span class="token attr-name">buttonStyle</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span>styles<span class="token punctuation">.</span>button<span class="token punctuation">,</span> <span class="token punctuation">{</span> width<span class="token punctuation">:</span> <span class="token number">280</span><span class="token punctuation">,</span> borderRadius<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>                      <span class="token attr-name">fontSize</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">}</span></span>                      <span class="token attr-name">onPress</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">changeName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> visible<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token punctuation">}</span></span><span class="token attr-name">}</span>                    <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>View</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>View</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>View</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>View</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TouchableOpacity</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Modal</span><span class="token punctuation">></span></span></code></pre><p>这是模拟的一个用户点击更改资料后弹出用于更改用户昵称的弹窗，用到的属性有：</p><ul><li>animationType：用来指定Modal弹出的动画效果，有’none’, ‘slide’, ‘fade’三种。</li><li>transparent：设置为true,Modal将覆盖在一个透明的背景上。</li><li>visible：用来控制Modal是否弹出，true时弹出，false时关闭，存在this.stata.visible中。</li><li>onRequestClose：当弹窗关闭时指定的回调。</li></ul><h1 id="API介绍"><a href="#API介绍" class="headerlink" title="API介绍"></a>API介绍</h1><p>API是指不在界面显示的纯功能性接口，简单介绍几个常用的：</p><h2 id="Dimensions（屏幕尺寸）"><a href="#Dimensions（屏幕尺寸）" class="headerlink" title="Dimensions（屏幕尺寸）"></a>Dimensions（屏幕尺寸）</h2><p>使用Dimensions可以获取到屏幕尺寸，用法很简单：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span>Dimensions<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-native'</span><span class="token punctuation">;</span><span class="token keyword">const</span> SCREEN_WIDTH <span class="token operator">=</span> Dimensions<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'window'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>width<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取屏幕宽度</span><span class="token keyword">const</span> styles <span class="token operator">=</span> StyleSheet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  image<span class="token punctuation">:</span> <span class="token punctuation">{</span>    height<span class="token punctuation">:</span> <span class="token number">220</span><span class="token punctuation">,</span>    width<span class="token punctuation">:</span> SCREEN_WIDTH<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//直接使用</span>    resizeMode<span class="token punctuation">:</span> <span class="token string">'stretch'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span>，<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>这里有一点需要注意，屏幕发生旋转的时候不会出发重新渲染，获取到的屏幕尺寸不会改变，解决这个问题有两种办法:</p><ul><li>监听屏幕改变事件，设置 state，触发渲染。</li><li>将获取屏幕尺寸写入生命周期函数中。</li></ul><h2 id="Alert"><a href="#Alert" class="headerlink" title="Alert"></a>Alert</h2><p>跟Web中的<code>alert</code>一样，弹出一个提示框显示传入的内容：</p><pre class=" language-jsx"><code class="language-jsx">Alert<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'注意，这里必须是字符串！如果是 object 或者 arr 会 crash！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里有点不同的是，我们是使用的Alert的alert方法，并非直接使用Alert。</p><h2 id="APP状态"><a href="#APP状态" class="headerlink" title="APP状态"></a>APP状态</h2><p>APP状态有三种：</p><ul><li>active - 应用正在前台运行。</li><li>background - 应用正在后台运行。用户既可能在别的应用中，也可能在桌面。</li><li>inactive - 此状态表示应用正在前后台的切换过程中，或是处在系统的多任务视图，又或是处在来电状态中。</li></ul><p>要获取当前的状态，你可以使用AppState.currentState，这个变量会一直保持更新。不过在启动的过程中，currentState可能为null，直到AppState从原生代码得到通知为止。</p><p>用法参见:<a href="https://reactnative.cn/docs/0.51/appstate.html#content">https://reactnative.cn/docs/0.51/appstate.html#content</a></p><h2 id="判断平台"><a href="#判断平台" class="headerlink" title="判断平台"></a>判断平台</h2><p>React Native也没有完全做到说真正的跨平台使用，所以我们有时候会针对不同的平台做一些事情，使用Platform.OS可以获取到当前的设备平台：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span>    Text<span class="token punctuation">,</span>    Platform<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-native'</span><span class="token punctuation">;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span><span class="token punctuation">></span></span>当前平台是：<span class="token punctuation">{</span>Platform<span class="token punctuation">.</span>OS<span class="token punctuation">}</span><span class="token punctuation">,</span> Version<span class="token punctuation">:</span> <span class="token punctuation">{</span>Platform<span class="token punctuation">.</span>Version<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Text</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">//直接使用</span></code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>暂时就介绍这么多了，介绍的都是我在实际项目中用到过的，React Native为我们提供的可不止这些，有更多需求的话可以直接上<a href="https://facebook.github.io/react-native/docs/getting-started.html">官方文档</a>查看学习使用方法就行了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> React Native </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> rn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Native学习日记一：基础知识</title>
      <link href="/2017/09/03/rn/rn-basic/"/>
      <url>/2017/09/03/rn/rn-basic/</url>
      
        <content type="html"><![CDATA[<h1 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h1><p>最近开始学习React Native，同样，将学习过程中一些有用的知识点和心路历程记录在这里。</p><p>React Native的知识点大部分跟React是相同的，会React的话，学起RN来会非常简单，很容易上手，Web开发的应用有一定局限性，所以掌握一点原生应用的开发也是非常有必要的。总的来说，RN的开发思想跟React是基本一致，同样都是组件化的开发思想，而不同的在于一些原生API的使用、样式与布局的写法以及原生组件的不同。但是，会React的基础下，会很容易掌握这些东西。</p><p>话不多说，跟随我的脚步，一起进步吧！</p><h1 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h1><p><a href="https://github.com/react-community/create-react-native-app">Create React Native App</a>是创建一个React Native应用最简单的办法，不需要安装或配置任何工具来构建本地代码 - 不需要安装Xcode或Android Studio，对与初学者来说，是一个很好的Starter项目。</p><p>首先全局安装Create React Native App：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g create-react-native-app</code></pre><p>然后这时你就可以用<code>create-react-native-app</code>命令来创建你自己的项目了：</p><pre class=" language-bash"><code class="language-bash">create-react-native-app RN-demo<span class="token function">cd</span> RN-demo<span class="token function">npm</span> start</code></pre><p>这时会在本地起一个development server，并生成一个二维码，如下图所示：<br><img src="/blogimgs/QR.png" alt="QR"></p><p>然后这时你需要在手机上安装<a href="https://expo.io/learn">expo</a>软件，打开软件，扫描这个二维码，然后你就可以看到你的应用在expo软件中运行起来了。这里要注意，扫描二维码时需要手机与电脑在同一wifi下。</p><p><img src="/blogimgs/RNstart.png" alt="RNstart"></p><p>轻轻摇晃手机，打开开发菜单，打开Hot Realoading：</p><p><img src="/blogimgs/menu.png" alt="menu"></p><p>在<code>App.js</code>中顺便修改一点东西，不用手动刷新，你就会神奇的发现，你做的修改已经在应用中加载出来了！</p><h1 id="Components"><a href="#Components" class="headerlink" title="Components"></a>Components</h1><p>我们已经顺利的创建了自己的React Native应用，接下来就看看我们怎样使用React Native进行开发吧！</p><p>先从一些基本的显示组件开始。在 Web 领域最基础的显示组件如 div、p、h1、ul、li、span、img 等在 React Native 里都有类似对应的显示组件，我们先来介绍几个用得比较多的。</p><h2 id="View"><a href="#View" class="headerlink" title="View"></a>View</h2><p>View相当于<code>div</code>，可以自己指定高度height和宽度width，如果不指定大小的话，它的大小将取决于子组件的大小。</p><h2 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h2><p>Text类似于<code>p</code>或者说<code>span</code>，主要用于包文字。在React Native中，所有文字必须包在Text组件中，基本用法如下：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>height<span class="token punctuation">:</span><span class="token number">300</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span><span class="token number">500</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span><span class="token punctuation">></span></span>Hello React Native<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Text</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span><span class="token punctuation">></span></span>This is my fisrt React Native App<span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Text</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>View</span><span class="token punctuation">></span></span></code></pre><h2 id="ScrollView（滚动视图）"><a href="#ScrollView（滚动视图）" class="headerlink" title="ScrollView（滚动视图）"></a>ScrollView（滚动视图）</h2><p>ScrollView用于包裹一列组件，可以是不同的组件，并可以设置一些属性来控制我们的滚动视图。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ScrollView</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> backgroundColor<span class="token punctuation">:</span> <span class="token string">'green'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Hello React Native<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Text</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> backgroundColor<span class="token punctuation">:</span> <span class="token string">'yellow'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>line <span class="token number">2</span><span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Text</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Image</span>        <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> width<span class="token punctuation">:</span> <span class="token number">250</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">250</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>        <span class="token attr-name">source</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> uri<span class="token punctuation">:</span> <span class="token string">'http://e.hiphotos.baidu.com/baike/pic/item/ac6eddc451da81cb6de1cb4d5a66d0160924312e.jpg'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>      <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ScrollView</span><span class="token punctuation">></span></span></code></pre><h3 id="horizontal属性"><a href="#horizontal属性" class="headerlink" title="horizontal属性"></a>horizontal属性</h3><p>当此属性为true的时候，所有的子视图会在水平方向上排成一行，而不是默认的在垂直方向上排成一列。默认值为false。</p><h2 id="FlatList"><a href="#FlatList" class="headerlink" title="FlatList"></a>FlatList</h2><p>FlatList的作用与ScrollView，但是ScrollView只适用于子组件数量不多的情况，因为即使子组件没有在屏幕里出现，也会渲染出ScrollView所包的所有子组件，子组件太多会有内存占用的问题，而FlatList只会渲染出出现在当前屏幕中的元素，但是它比较适用于数据结构比较类似的元素，我们看一下它的用法就知道了：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FlatList</span>    <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>key<span class="token punctuation">:</span> <span class="token string">'Devin'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>key<span class="token punctuation">:</span> <span class="token string">'Jackson'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>key<span class="token punctuation">:</span> <span class="token string">'James'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>key<span class="token punctuation">:</span> <span class="token string">'Joel'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>key<span class="token punctuation">:</span> <span class="token string">'John'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>key<span class="token punctuation">:</span> <span class="token string">'Jillian'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>key<span class="token punctuation">:</span> <span class="token string">'Jimmy'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>key<span class="token punctuation">:</span> <span class="token string">'Julie'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></span>    <span class="token attr-name">renderItem</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>key<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Text</span><span class="token punctuation">></span></span><span class="token punctuation">}</span></span><span class="token punctuation">/></span></span></code></pre><p>FlatList 有两个props，一个是<code>data</code>,用于传递数据，一个是<code>renderItem</code>,用于将<code>data</code>里的每一个元素渲染成格式化的组件。</p><h2 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h2><p>相当于Web中<code>img</code>,用于显示多种不同类型的图片，通过传递source属性来获取图片资源。其中source的值可以通过<code>require</code>方法来请求本地图片：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Image</span>    <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>icon<span class="token punctuation">}</span></span>    <span class="token attr-name">source</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./icon.png'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>  <span class="token punctuation">/></span></span></code></pre><p>也可以通过传入<code>url</code>获取网络图片：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Image</span>  <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>logo<span class="token punctuation">}</span></span>  <span class="token attr-name">source</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>url<span class="token punctuation">:</span><span class="token string">'http://facebook.github.io/react/img/logo_og.png'</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">/></span></span></code></pre><p>然后我们可以通过设置resizeMode属性来决定当组件尺寸和图片尺寸不成比例的时候如何调整图片的大小。</p><ul><li><p><code>cover</code>: 在保持图片宽高比的前提下缩放图片，直到宽度和高度都大于等于容器视图的尺寸（如果容器有padding内衬的话，则相应减去）。译注：这样图片完全覆盖甚至超出容器，容器中不留任何空白。</p></li><li><p><code>contain</code>: 在保持图片宽高比的前提下缩放图片，直到宽度和高度都小于等于容器视图的尺寸（如果容器有padding内衬的话，则相应减去）。译注：这样图片完全被包裹在容器中，容器中可能留有空白。</p></li><li><p><code>stretch</code>: 拉伸图片且不维持宽高比，直到宽高都刚好填满容器。</p></li><li><p><code>repeat</code>: 重复平铺图片直到填满容器。图片会维持原始尺寸。仅iOS可用。</p></li><li><p><code>center</code>: 居中不拉伸。</p></li></ul><p>例如：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Image</span> <span class="token attr-name">source</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./icon.png'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token attr-name">resizeMode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>center<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span></code></pre><h2 id="TextInput"><a href="#TextInput" class="headerlink" title="TextInput"></a>TextInput</h2><p>TextInput相当于Web中的<code>&lt;input type="text" /&gt;</code>,主要用于文字输入。最简单的用法就是丢一个TextInput到应用里，然后订阅它的onChangeText事件来读取用户的输入。注意，从TextInput里取值这就是目前唯一的做法！也就是使用在onChangeText中用setState把用户的输入写入到state中，然后在需要取值的地方从this.state中取出值。看一个简单的例子：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextInput</span>    <span class="token attr-name">underlineColorAndroid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transparent<span class="token punctuation">"</span></span>    <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>input<span class="token punctuation">}</span></span>    <span class="token attr-name">onChangeText</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>text <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> phoneNum<span class="token punctuation">:</span> text <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>  <span class="token punctuation">/></span></span></code></pre><p>需要注意的是在android和ios下默认样式有些不同，按需调整样式即可。</p><h2 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h2><p>Button想当于Web中的button，可以指定title，同样可以通过onPress来绑定被点击后的回调事件，看一个基础用法:</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>  <span class="token attr-name">onPress</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> Alert<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'You tapped the button!'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span>  <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Press</span> <span class="token attr-name">Me"</span>  <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h1 id="样式与布局"><a href="#样式与布局" class="headerlink" title="样式与布局"></a>样式与布局</h1><h2 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h2><p>前面我们提到，React中的样式可以用styled component来写，实际写法还是CSS那一套，而React Native中有更简单的写法，我们可以直接用Javascript来写样式。</p><p>React Native中每个基础组件都有一个基础属性：<code>style</code>，它的值可以是一个普通的对象，稍微有些不同的是，因为我们是用JS来写的，所以写的时候要用驼峰格式（camelCase），看一个例子：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>color<span class="token punctuation">:</span><span class="token string">'blue'</span><span class="token punctuation">,</span>fontSize<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Hello React Native<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Text</span><span class="token punctuation">></span></span></code></pre><p>在一个文件中，我们可以将所有组件的样式提取出来，用React Native提供的<code>StyleSheet</code>的<code>create</code>方法来创建，然后在组件中直接引用就行了。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> StyleSheet<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> View <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-native'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">LotsOfStyles</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>red<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>just red<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Text</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>bigblue<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>just bigblue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Text</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span>styles<span class="token punctuation">.</span>bigblue<span class="token punctuation">,</span> styles<span class="token punctuation">.</span>red<span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>bigblue<span class="token punctuation">,</span> then red<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Text</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span>styles<span class="token punctuation">.</span>red<span class="token punctuation">,</span> styles<span class="token punctuation">.</span>bigblue<span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>red<span class="token punctuation">,</span> then bigblue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Text</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>View</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> styles <span class="token operator">=</span> StyleSheet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  bigblue<span class="token punctuation">:</span> <span class="token punctuation">{</span>    color<span class="token punctuation">:</span> <span class="token string">'blue'</span><span class="token punctuation">,</span>    fontWeight<span class="token punctuation">:</span> <span class="token string">'bold'</span><span class="token punctuation">,</span>    fontSize<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  red<span class="token punctuation">:</span> <span class="token punctuation">{</span>    color<span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>可能你已经发现了，style的值可以是对象，也可以是对象数组，后面的样式会继承兵覆盖前面的样式，这样代码复用更方便了。</p><h2 id="指定大小（设置height与width）"><a href="#指定大小（设置height与width）" class="headerlink" title="指定大小（设置height与width）"></a>指定大小（设置height与width）</h2><p>我们可以通过给style prop指定height和width，来确定组件的尺寸大小，要注意的是，指定height和width的值的时候不需要带单位，直接用数字就行，包括使用padding等值的时候也是一样。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> View <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-native'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">FixedDimensionsBasics</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>width<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> backgroundColor<span class="token punctuation">:</span> <span class="token string">'powderblue'</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> backgroundColor<span class="token punctuation">:</span> <span class="token string">'skyblue'</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>width<span class="token punctuation">:</span> <span class="token number">150</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">150</span><span class="token punctuation">,</span> backgroundColor<span class="token punctuation">:</span> <span class="token string">'steelblue'</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>View</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h2><p> 直接指定height和width适用与不论屏幕大小，尺寸都固定的组件，更多时候我们需要组件的尺寸随屏幕大小的改变而改变，这时我们需要用到flex布局，我们称之为弹性布局，主要核心思想是，我们通过指定父组件的flex属性来确定子组件在其中的排列方式，使子组件可以根据这个来分配占据屏幕的大小。</p><p> flex布局方式使用起来很方便，也很容易理解，这里分享两篇阮一峰老师写的关于flex布局的介绍，写的很详细，可以看一下:</p><ul><li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?^%$">Flex 布局教程：语法篇</a></li><li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html">Flex 布局教程：实例篇</a></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这一篇的基础知识先介绍这么多，总的来说，组件的使用方法与React出入不大，样式与布局方面有些不同，但是使用多了自然也就习惯了，给我的感觉是，使用起来很方便。推荐一篇中文文档，不熟悉英文的可以参考一下：</p><p><a href="https://reactnative.cn/docs/0.51/getting-started.html#content">React Native中文文档</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> React Native </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> expo </tag>
            
            <tag> rn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React学习日记五：React Router</title>
      <link href="/2017/08/03/react-study/react-router/"/>
      <url>/2017/08/03/react-study/react-router/</url>
      
        <content type="html"><![CDATA[<p>上一篇中介绍的Todos小应用中用到了<a href="https://github.com/ReactTraining/react-router/">React Router</a>，应该是React中使用最多的router了。这里分享一些React Router的基本知识。</p><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><p>先了解一下什么是路由吧。</p><p><a href="https://en.wikipedia.org/wiki/URL">URL</a>在Web中扮演非常重要的角色，通过URL，我们才能对应的找到我们需要的Web资源。</p><p>现在的网站，大多都不再是静态网页，JS的兴起，使我们可以让很多页面资源通过JS在前端动态生成。比如进入某宝网站首页，我们看到的是琳琅满目的商品，当某件商品吸引了你的注意的时候，你点开查看商品详情，理论上而言，这时可以在不刷新页面的情况下，通过发送Ajax请求等方法，可以动态的渲染出你想要东西，可是假设你要把这件东西分享给朋友，如果没有URL，这时你分享出去的地址，只能是你打开的首页地址，朋友哪里知道你说的是哪一件商品。所以URL的作用就来了，如果我们给不同的商品分配一个独一无二的URL，在你访问网站的时候，带上这个URL，就可以对应的找到你想要的商品，这样就方便了很多啊。</p><p>听说以前服务端渲染的时候，都是后端完成这项工作。现在我们可以在前端通过JS动态改变页面内容的时候，同时动态的给生成的资源分配一个URL或改变URL，保持页面内容与URL的一致性，这就是路由的作用了。</p><h1 id="React-Router"><a href="#React-Router" class="headerlink" title="React Router"></a>React Router</h1><p>React Router是React生态环境下使用最多的Router了，跟React组件化的开发思想很贴合，所以使用起来很方便。React Router官方文档推荐也我们使用facebook官方出的脚手架工具Create React App，这不正是我们所使用的吗？</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p>首先安装react-router-dom：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> react-router-dom<span class="token comment" spellcheck="true"># or, if you're using yarn</span>yarn add react-router-dom</code></pre><p>这里要注意一点，在V4版本以后，React Router将一些重要的东西抽取出来，分成了Web和Native两部分，我们在做Web开发的时候，要引用的是<a href="https://reacttraining.com/react-router/web/guides/philosophy">react-router-dom</a>这一套，然后就可以在你的项目中用起来了。</p><h2 id="基本组件"><a href="#基本组件" class="headerlink" title="基本组件"></a>基本组件</h2><p>React Router中有三种类型的组件：路由器组件，路由匹配组件和导航组件。分别了解一下：</p><h3 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h3><p>每个React Router应用程序的核心应该是一个路由器组件。对于Web项目，<code>react-router-dom</code>提供<code>BrowserRouter</code>和<code>HashRouter</code>路由器。这两个都会为你创建一个<code>history</code>对象。一般来说，如果你有一台响应请求的服务器，那么使用<code>BrowserRouter</code>，如果你使用的是静态文件服务器，则应该使用<code>HashRouter</code>。</p><p>假设我们使用<code>BrowserRouter</code>，我们使用的时候可以这样引用：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> BrowserRouter <span class="token keyword">as</span> Router <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token punctuation">;</span></code></pre><p>这样便于我们书写代码。</p><h3 id="路线匹配（Route-Matching）"><a href="#路线匹配（Route-Matching）" class="headerlink" title="路线匹配（Route Matching）"></a>路线匹配（Route Matching）</h3><p>有两个路由匹配组件：<code>Route</code>和<code>Switch</code>。</p><p>Route基本用法如下：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/about<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/topics<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>Topics<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span></code></pre><p>我们刚才说了，BrowserRouter会为我们创建一个history对象，当history中的<code>location.pathname</code>与Route中的<code>path</code>相匹配的时候，就会渲染后面的component，而component就是我们自己定义的一些组件，这个很好理解，比如当<code>location = { pathname: '/about' }</code>时，就会渲染出<code>Home</code>组件和<code>About</code>组件。为啥渲染出两个组件呢？因为这种匹配方式是一种前缀匹配，所有匹配到<code>/</code>前缀的页面都会渲染出<code>Home</code>组件。</p><p>那么有时候我们不想在任何页面都显示出主页内容该怎么办呢？</p><p>很简单，我们可以这样：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">exact</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/about<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/topics<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>Topics<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span></code></pre><p>注意到我们<code>path="/"</code>的前面加了关键字<code>exact</code>，这有什么什么用呢？当我们加了exact，这时便是精确匹配，也就是只有当<code>pathname === "/"</code>时，才会渲染Home组件，这样就不要担心Home组件出现在每一个页面了。</p><p>那Switch呢？我们可以用Switch将Route包起来，像这样：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Switch</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">exact</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/about<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/topics<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>Topics<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Switch</span><span class="token punctuation">></span></span></code></pre><p>如果我们不用Switch将Route包起来，在匹配到一个以后，还会继续往下匹配，更多时候我们需要的是在当前路径与某个path完成匹配后，就结束匹配，就像switch语句，Switch将迭代其所有子Route元素，并仅渲染与当前位置匹配的第一个元素。也就是说，Switch只渲染一个Route！</p><p>一般我们还会在最后增加一个Route，像这样：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">exact</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/about<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/topics<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>Topics<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>NoMatch<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span></code></pre><p>该Route的path为空，也就是当用户输入路径与以上路径都不匹配时，就会渲染NoMatch组件，我们可以自己定义NoMatch组件，比如404。。。</p><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>我们来看一个完整的基本例子：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserRouter <span class="token keyword">as</span> Router<span class="token punctuation">,</span> Route<span class="token punctuation">,</span> Link <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token punctuation">;</span><span class="token keyword">const</span> BasicExample <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Router</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Link</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/about<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>About<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Link</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/topics<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Topics<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Link</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">exact</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/about<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/topics<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>Topics<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Router</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> Home <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> About <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>About<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> Topics <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> match <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Topics<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span> <span class="token attr-name">to</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>match<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/rendering`</span></span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Rendering <span class="token keyword">with</span> React<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Link</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span> <span class="token attr-name">to</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>match<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/components`</span></span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Components<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Link</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span> <span class="token attr-name">to</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>match<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/props-v-state`</span></span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Props v<span class="token punctuation">.</span> State<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Link</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>match<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/:topicId`</span></span><span class="token punctuation">}</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>Topic<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span>      <span class="token attr-name">exact</span>      <span class="token attr-name">path</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>match<span class="token punctuation">.</span>url<span class="token punctuation">}</span></span>      <span class="token attr-name">render</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>Please select a topic<span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token punctuation">}</span></span>    <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> Topic <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> match <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>match<span class="token punctuation">.</span>params<span class="token punctuation">.</span>topicId<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> BasicExample<span class="token punctuation">;</span></code></pre><p>我们可以看到，首先整个页面是被一个Router包起来的，这是React Router规定的，所有组件必须用Router包起来，这样才会为我们生成history对象，完成我们的路径匹配。</p><p>然后一开始是一个div，包了一个列表，这可以看作是一个导航栏，而每一个导航按钮是一个<code>Link</code>，你可以把它看作一个<code>a</code>标签，这React Router为我们提供的组件，后面<code>to</code>带一个URL，这样我们点击以后，就动态的更改了URL，路径变化，所渲染的东西也就随之变化。</p><p>然后就是一堆Route，这个前面已经介绍过了，就不用多说了。</p><p>接下来就是我们自己定义的一些无状态组件，很简单，基本都是返回一个简单的<code>h2</code>标签。有点不同的是Topics组件，我们来看一下：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> Topics <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> match <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Topics<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span> <span class="token attr-name">to</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>match<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/rendering`</span></span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Rendering <span class="token keyword">with</span> React<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Link</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span> <span class="token attr-name">to</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>match<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/components`</span></span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Components<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Link</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span> <span class="token attr-name">to</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>match<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/props-v-state`</span></span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Props v<span class="token punctuation">.</span> State<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Link</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>match<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/:topicId`</span></span><span class="token punctuation">}</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>Topic<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span>      <span class="token attr-name">exact</span>      <span class="token attr-name">path</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>match<span class="token punctuation">.</span>url<span class="token punctuation">}</span></span>      <span class="token attr-name">render</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>Please select a topic<span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token punctuation">}</span></span>    <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当我们点击导航栏的Topics时，会渲染出Topics组件，这没问题，但Topics页面下又有自己子导航栏，我们给Topics组件传入参数match，这时可以通过<code>match.url</code>获取到当前的URL，然后就用到了我们之前讲到的ES6新语法，字符串插值，将子导航栏下的路径拼接到当前URL后面，于是就产生了新的URL，但仍然是在我们的<code>"/topics"</code>路径下生成。</p><p>同样标签栏下面，我们需要设置Route，可以看到我们为点击任何子导航栏内容时，此时路径仍然是<code>"/topics"</code>，所以此时渲染的组件除了<code>h2</code>标签和子导航栏还有一个我们自己定义<code>h3</code>标签，当点击某个子导航栏下的Link标签后，URL发生变化，我们设置了另一个Route，相当于监听这一变化，这时匹配到这个Route，渲染的组件发生变化，在不刷新页面的情况下完成动态刷新。</p><p>最后定义了一个无状态组件叫Topic，也就是我们子导航栏没一项所对应的内容：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> Topic <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> match <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>match<span class="token punctuation">.</span>params<span class="token punctuation">.</span>topicId<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>同样也是传入参数match，通过<code>match.params.topicId</code>获取到topicId，作为我们<code>h3</code>标签的内容来显示，这样我们只需要定义一个组件就可以完成动态加载内容。</p><p>至于match是哪儿来的，刚刚我们说过，每个被Router包着的页面都会动态的生成一个history对象作为props传入，而match就是这个对象中的一个内容，实在不清楚将props打出来就能一目了然了，我也不会去专门记住里面有什么，总之我们可以在里面取到我们想要的东西就是了。</p><h2 id="权限管理Redirect-跳转"><a href="#权限管理Redirect-跳转" class="headerlink" title="权限管理Redirect(跳转)"></a>权限管理Redirect(跳转)</h2><p>了解了React Router的基本用法，我们来看一个它另一个复杂一点的用法。</p><p>上一篇用React实现一个Todos应用中，我们在Todos应用里实现了一个模拟登录，在我们没有登录的时候，显示的是登录界面，完成登录后，完成权限验证，才能进入应用的功能界面，整个大概流程就是这样，其中我们就用到了Redirect，可以很好的帮我们完成这一需求。那我们就还是用Todos应用作为例子来看一下是怎么用的。</p><p>完整代码就不在这里展示了，详情参考上一篇：<a href="https://yanzulee.me/react-study/todos">用React实现一个Todos应用</a></p><p>我们就我们的登录需求来说一下。首先看整个应用:</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Router</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>AuthBtn<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Switch</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">exact</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/login<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>Login<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PrivateRoute</span> <span class="token attr-name">exact</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>TodosAll<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PrivateRoute</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/all<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>TodosAll<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PrivateRoute</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/active<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>TodosActive<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PrivateRoute</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/completed<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>TodosCompleted<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Switch</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Router</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>一目了然，首先用Router包起来没得说，然后是一个path为空的Route，也就是说在任何颜面都会显示AuthBtn，也就是应用左上角的提示，在登录状态下会显示用户名和退出登录的按钮，未登录状态下会提示请登录，我们说了，登录与未登录我们作为state存在<code>this.state.hasLogin</code>中，这个很简单，不作赘述。</p><p>然后下面是用Switch包起来的一堆Route，第一个就是当路径与<code>"/login"</code>匹配时，渲染登录界面，也就是未登录状态。我们来看Login组件的render函数：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token keyword">from</span> <span class="token operator">=</span> <span class="token punctuation">{</span> pathname<span class="token punctuation">:</span> <span class="token string">"/"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>hasLogin<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Redirect</span> <span class="token attr-name">to</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">from</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TodoLogin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TodoappH1</span><span class="token punctuation">></span></span>Log <span class="token keyword">in</span> please<span class="token operator">!</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TodoappH1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Input</span>          <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>          <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入帐号<span class="token punctuation">"</span></span>          <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>username<span class="token punctuation">}</span></span>          <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>setUser<span class="token punctuation">}</span></span>        <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Input</span>          <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span>          <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入密码<span class="token punctuation">"</span></span>          <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>password<span class="token punctuation">}</span></span>          <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>setPassword<span class="token punctuation">}</span></span>        <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LoginBtn</span>          <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span>          <span class="token attr-name">loading</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isLoading<span class="token punctuation">}</span></span>          <span class="token attr-name">icon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login<span class="token punctuation">"</span></span>          <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>login<span class="token punctuation">}</span></span>        <span class="token punctuation">></span></span>          登录        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LoginBtn</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TodoLogin</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>可以看到，render函数执行时会做一个判断，如果<code>this.state.hasLogin</code>为<code>true</code>，那么通过Redirect组件进行跳转，Redirect带一个to，即需要跳转至的页面路径；如果为<code>false</code>那么就渲染登录界面。</p><p>再说到Redirect，这里带的to的路径为<code>"/"</code>，也就是说这时候便动态更改了URL，那么URL一改变，对应的资源也就随之改变。回过头看App：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PrivateRoute</span> <span class="token attr-name">exact</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>TodosAll<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span></code></pre><p>说明这时会渲染TodosAll这个组件，也就是我们的App的功能主体。这个流程其实就是未登录-登录的状态切换。这里有点不一样，我们不是使用的Route，而是PrivateRoute，我们来看一下它是什么：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> PrivateRoute <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> component<span class="token punctuation">:</span> Component<span class="token punctuation">,</span> <span class="token operator">...</span>rest <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> isLogin <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"isLogin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>Route      <span class="token punctuation">{</span><span class="token operator">...</span>rest<span class="token punctuation">}</span>      render<span class="token operator">=</span><span class="token punctuation">{</span>props <span class="token operator">=</span><span class="token operator">></span>        isLogin <span class="token operator">?</span> <span class="token punctuation">(</span>          <span class="token operator">&lt;</span>Component <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Redirect</span>            <span class="token attr-name">to</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>              pathname<span class="token punctuation">:</span> <span class="token string">"/login"</span><span class="token punctuation">,</span>              state<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">:</span> props<span class="token punctuation">.</span>location <span class="token punctuation">}</span>            <span class="token punctuation">}</span></span><span class="token attr-name">}</span>          <span class="token punctuation">/></span></span>        <span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token operator">/</span><span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>可能看出来了，其实PrivateRoute也是Route，只不过是经过了我们包装的Route。PrivateRoute这个组件接收参数，然后返回一个Route，<code>component: Component</code>是将组件作为参数传入，<code>...rest</code>传入props中剩余的所有参数，这是对象解构的写法。然后从localStorage中取到登录状态，同样做一个判断，如果是登录状态，则渲染我们传入的组件，如果是未登录，那么这里又会用一个Redirect跳转到登录界面。也就是说，我们点击了右上角的退出登录后，<code>isLogin</code>值变为<code>false</code>,这时Redirect带的to路径为<code>"/login"</code>，会与下面这个PrivateRoute的path相匹配，完成跳转，即登录-未登录这一流程。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">exact</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/login<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>Login<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span></code></pre><p>又回到了我们的登录界面，同样在输入用户名和密码后，完成登录验证，在Login组件中又会做判断，又做一次跳转，动态渲染出TodosAll组件。</p><p>可能到这儿有人会有疑问，为什么要跳转来跳转去，我们直接用state控制是否登录控制刷新渲染不久行了吗？别忘了，我们说路由的功能是什么，我们是为了保证一个URL对应一个页面内容啊，直接用state控制渲染，是可以实现登录界面的和App功能界面的转换，但是那样URL并不会改变啊。所以我们要用Redirect来实现改变页面内容的同时，保证URL随之变化，这样才是我们想要的URL与资源一一对应的效果。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>关于React Router的使用暂时先写这么多吧，还有很多高级用法，希望能慢慢摸索到精髓。总之记住一句话，我们使用路由的目的，是为了保证URL与资源的一一对应。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> react-router </tag>
            
            <tag> URL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React学习日记四：用React实现一个Todos应用</title>
      <link href="/2017/07/21/react-study/todos/"/>
      <url>/2017/07/21/react-study/todos/</url>
      
        <content type="html"><![CDATA[<p>最近学完React的基本概念，闲下来的时候就自己写了一个Todos的小应用。这里做个简略的说明，才疏学浅，不是想给新手看，我也是新手，只是希望大家相互交流共同进步！</p><h1 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h1><p>我想先说一说我为什么要学React。因为React有很多优点，再者，很容易上手，现在也很流行，所以弄潮儿嘛，就学咯！那React有什么优点呢？我按照我的理解简单说一下：</p><ol><li>React速度很快：它并不直接对DOM进行操作，引入了一个叫做虚拟DOM的概念，安插在javascript逻辑和实际的DOM之间，性能好。</li><li>跨浏览器兼容：虚拟DOM帮助我们解决了跨浏览器问题，它为我们提供了标准化的API，浏览器兼容性很好。</li><li>一切都是component：代码更加模块化，重用代码更容易，可维护性高。</li><li>热更新！</li></ol><p>那有人会说：“那你为啥不学Vue？”      emmmm…因为我比较帅。</p><p>我们来看一下做的Todos应用需要有哪些功能：</p><ul><li>可以在最上面的input里，使用回车来添加任务。</li><li>在中间的任务列表里，由checkbox来控制任务的状态。</li><li>已完成的任务有一个line-through的样式。</li><li>当鼠标移到每一个任务时，都会出现删除按钮提供删除。</li><li>在顶部有一个全选按钮，用于控制所有的任务状态。</li><li>还有未完成任务数的显示。</li><li>可以分类显示全部、已完成和未完成。</li><li>可以清空已完成的任务。</li><li>模拟一个登录界面，所有用户数据存储在localStorage中。</li></ul><p>差不多就是这些了，最后效果图如下：</p><p><img src="/blogimgs/todos.png" alt="todos demo"></p><p>上面就是我们需要用React实现的功能，完整代码在我的github上可以看到，可以用作参考：<a href="https://github.com/liyuandie/react/tree/master/todo">React-Todos</a></p><p>我并不是要一步一步在这里讲怎么做完这个应用的，可以结合各个组件逐个分析一下我们是怎么做的。另外我的应用里用到了<a href="https://github.com/ReactTraining/react-router/">React Router</a>，不熟悉的话可以参考一下：<a href="https://reacttraining.com/react-router/">官方文档</a></p><h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><p>React是组件化的开发思想，而“函数就是组件，组件就是函数”，铭记这句话。推荐一个up主的视频，可以很好的帮助理解这句话：<a href="https://www.bilibili.com/video/av14447835/">React30分钟快速入门</a></p><p>然后我们来逐个组件看一下：</p><h2 id="App组件"><a href="#App组件" class="headerlink" title="App组件"></a>App组件</h2><p>先来看一看总的组件，也就是App：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span>  BrowserRouter <span class="token keyword">as</span> Router<span class="token punctuation">,</span>  Route<span class="token punctuation">,</span>  Redirect<span class="token punctuation">,</span>  Switch<span class="token punctuation">,</span>  withRouter<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token punctuation">;</span><span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">"styled-components"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> TodosAll<span class="token punctuation">,</span> TodosActive<span class="token punctuation">,</span> TodosCompleted <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./Todos.jsx"</span><span class="token punctuation">;</span><span class="token keyword">const</span> LogoutBtn <span class="token operator">=</span> styled<span class="token punctuation">.</span>button<span class="token template-string"><span class="token string">`  padding: 0 15px;  font-size: 14px;  border-radius: 4px;  height: 32px;  font-weight: 500;  touch-action: manipulation;  cursor: pointer;  border: 1px solid transparent;  user-select: none;  color: rgba(0, 0, 0, 0.65);`</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> AuthP <span class="token operator">=</span> styled<span class="token punctuation">.</span>p<span class="token template-string"><span class="token string">`text-align: right;`</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> TodoLogin <span class="token operator">=</span> styled<span class="token punctuation">.</span>section<span class="token template-string"><span class="token string">`  background: #fff;  margin: 130px 0 40px 0;  position: relative;  box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.2), 0 25px 50px 0 rgba(0, 0, 0, 0.1);`</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> TodoappH1 <span class="token operator">=</span> styled<span class="token punctuation">.</span>h1<span class="token template-string"><span class="token string">`  position: absolute;  top: -155px;  width: 100%;  font-size: 60px;  font-weight: 200;  text-align: center;  color: rgba(175, 47, 47, 0.15);  text-rendering: optimizeLegibility;  :matches(article, aside, nav, section) {    font-size: 1.5em;    -webkit-margin-before: 0.83em;    -webkit-margin-after: 0.83em;  }`</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> Input <span class="token operator">=</span> styled<span class="token punctuation">.</span>input<span class="token template-string"><span class="token string">`  padding: 16px 16px 16px 60px;  border: none;  background: rgba(0, 0, 0, 0.003);  box-shadow: inset 0 -2px 1px rgba(0, 0, 0, 0.03);  position: relative;  margin: 0;  width: 100%;  font-size: 24px;  font-family: inherit;  font-weight: inherit;  line-height: 1.4em;  outline: none;  color: inherit;  box-sizing: border-box;  font-smoothing: antialiased;`</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> LoginBtn <span class="token operator">=</span> styled<span class="token punctuation">.</span>button<span class="token template-string"><span class="token string">`  padding: 0 15px;  margin: 10px 40%;  font-size: 14px;  border-radius: 4px;  height: 32px;  font-weight: 500;  touch-action: manipulation;  cursor: pointer;  border: 1px solid transparent;  user-select: none;  color: rgba(0, 0, 0, 0.65);  background-color: #fff;  border-color: #d9d9d9;`</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Login</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      user<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      password<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      hasLogin<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      isLoading<span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  setUser <span class="token operator">=</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> user<span class="token punctuation">:</span> e<span class="token punctuation">.</span>currentTarget<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  setPassword <span class="token operator">=</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> password<span class="token punctuation">:</span> e<span class="token punctuation">.</span>currentTarget<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  login <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>user <span class="token operator">===</span> <span class="token string">""</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>password <span class="token operator">===</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"请输入完整的用户名和密码！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"isLogin"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    fakeAuth<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> hasLogin<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> isLoading<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token keyword">from</span> <span class="token operator">=</span> <span class="token punctuation">{</span> pathname<span class="token punctuation">:</span> <span class="token string">"/"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>hasLogin<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Redirect</span> <span class="token attr-name">to</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">from</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TodoLogin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TodoappH1</span><span class="token punctuation">></span></span>Log <span class="token keyword">in</span> please<span class="token operator">!</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TodoappH1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Input</span>          <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>          <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入帐号<span class="token punctuation">"</span></span>          <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>username<span class="token punctuation">}</span></span>          <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>setUser<span class="token punctuation">}</span></span>        <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Input</span>          <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span>          <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入密码<span class="token punctuation">"</span></span>          <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>password<span class="token punctuation">}</span></span>          <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>setPassword<span class="token punctuation">}</span></span>        <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LoginBtn</span>          <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span>          <span class="token attr-name">loading</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isLoading<span class="token punctuation">}</span></span>          <span class="token attr-name">icon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login<span class="token punctuation">"</span></span>          <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>login<span class="token punctuation">}</span></span>        <span class="token punctuation">></span></span>          登录        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LoginBtn</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TodoLogin</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> fakeAuth <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">login</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>cb<span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">signout</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"isLogin"</span><span class="token punctuation">,</span> <span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>cb<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> AuthBtn <span class="token operator">=</span> <span class="token function">withRouter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> history <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> user <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> isLogin <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"isLogin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> isLogin <span class="token operator">?</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AuthP</span><span class="token punctuation">></span></span>      <span class="token punctuation">{</span>user<span class="token punctuation">}</span><span class="token punctuation">,</span>welcome<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LogoutBtn</span>        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span>        <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          fakeAuth<span class="token punctuation">.</span><span class="token function">signout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></span>      <span class="token punctuation">></span></span>        退出登录      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LogoutBtn</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AuthP</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AuthP</span><span class="token punctuation">></span></span>请登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AuthP</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> PrivateRoute <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> component<span class="token punctuation">:</span> Component<span class="token punctuation">,</span> <span class="token operator">...</span>rest <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> isLogin <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"isLogin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>Route      <span class="token punctuation">{</span><span class="token operator">...</span>rest<span class="token punctuation">}</span>      render<span class="token operator">=</span><span class="token punctuation">{</span>props <span class="token operator">=</span><span class="token operator">></span>        isLogin <span class="token operator">?</span> <span class="token punctuation">(</span>          <span class="token operator">&lt;</span>Component <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Redirect</span>            <span class="token attr-name">to</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>              pathname<span class="token punctuation">:</span> <span class="token string">"/login"</span><span class="token punctuation">,</span>              state<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">:</span> props<span class="token punctuation">.</span>location <span class="token punctuation">}</span>            <span class="token punctuation">}</span></span><span class="token attr-name">}</span>          <span class="token punctuation">/></span></span>        <span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token operator">/</span><span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Router</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>AuthBtn<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Switch</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">exact</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/login<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>Login<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PrivateRoute</span> <span class="token attr-name">exact</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>TodosAll<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PrivateRoute</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/all<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>TodosAll<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PrivateRoute</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/active<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>TodosActive<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PrivateRoute</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/completed<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>TodosCompleted<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Switch</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Router</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre><p>用ES6写React最大的不同就是，组件可以通过继承React.Components来得到，并且初始化state也不需要冗长的getInitalialState，直接在构造函数里操作this.state即可。对整个App来说，我们一开始显示是登录界面，然后在Login组件中用<code>this.state.hasLogin</code>来控制是否处于登录状态：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Login</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      user<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      password<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      hasLogin<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      isLoading<span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>在完成登录步骤后，点击登录按钮，用<code>setState()</code>方法将<code>this.state.hasLogin</code>值更新为<code>true</code>，并将用户名和密码一并存入localStorage：</p><pre class=" language-jsx"><code class="language-jsx">login <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>user <span class="token operator">===</span> <span class="token string">""</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>password <span class="token operator">===</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"请输入完整的用户名和密码！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"isLogin"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    fakeAuth<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> hasLogin<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> isLoading<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>、、、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LoginBtn</span>          <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span>          <span class="token attr-name">loading</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isLoading<span class="token punctuation">}</span></span>          <span class="token attr-name">icon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login<span class="token punctuation">"</span></span>          <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>login<span class="token punctuation">}</span></span>        <span class="token punctuation">></span></span>          登录        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LoginBtn</span><span class="token punctuation">></span></span></code></pre><p>这时会触发更新渲染，通过React Router提供的Redirect组件跳转至Home界面：</p><pre class=" language-jsx"><code class="language-jsx"> <span class="token keyword">let</span> <span class="token keyword">from</span> <span class="token operator">=</span> <span class="token punctuation">{</span> pathname<span class="token punctuation">:</span> <span class="token string">"/"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>hasLogin<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Redirect</span> <span class="token attr-name">to</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">from</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>至于Home组件怎么实现，我们稍后介绍。最后我们将整个App渲染到DOM上即可：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">"./App.jsx"</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Home组件"><a href="#Home组件" class="headerlink" title="Home组件"></a>Home组件</h2><p>Home组件，也就是我们App的功能主体，具体代码如下：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> AddItem <span class="token keyword">from</span> <span class="token string">"./AddItem.jsx"</span><span class="token punctuation">;</span><span class="token keyword">import</span> TodoList <span class="token keyword">from</span> <span class="token string">"./TodoList.jsx"</span><span class="token punctuation">;</span><span class="token keyword">import</span> TodoFoot <span class="token keyword">from</span> <span class="token string">"./TodoFoot.jsx"</span><span class="token punctuation">;</span><span class="token keyword">import</span> styled<span class="token punctuation">,</span> <span class="token punctuation">{</span> injectGlobal <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"styled-components"</span><span class="token punctuation">;</span><span class="token keyword">const</span> TodoApp <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token string">`  background: #fff;  margin: 130px 0 40px 0;  position: relative;  box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.2), 0 25px 50px 0 rgba(0, 0, 0, 0.1);`</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> AnotherFooter <span class="token operator">=</span> styled<span class="token punctuation">.</span>footer<span class="token template-string"><span class="token string">`  margin: 65px auto 0;  color: #bfbfbf;  font-size: 10px;  text-shadow: 0 1px 0 rgba(255, 255, 255, 0.5);  text-align: center;`</span></span><span class="token punctuation">;</span>injectGlobal<span class="token template-string"><span class="token string">`body {    font: 14px 'Helvetica Neue', Helvetica, Arial, sans-serif;    line-height: 1.4em;    background: #f5f5f5;    color: #4d4d4d;    min-width: 230px;    max-width: 550px;    margin: 0 auto;    font-smoothing: antialiased;    font-weight: 300;    padding: 0;}input:matches([type="radio"], [type="checkbox"]){    margin-top: 3px;    margin-right: 2px;    margin-bottom: 3px;    margin-left: 2px;    padding-top: initial;    padding-right: initial;    padding-bottom: initial;    padding-left: initial;    background-color: initial;    border-top-color: initial;    border-top-style: initial;    border-top-width: initial;    border-right-color: initial;    border-right-style: initial;    border-right-width: initial;    border-bottom-color: initial;    border-bottom-style: initial;    border-bottom-width: initial;    border-left-color: initial;    border-left-style: initial;    border-left-width: initial;}input{    margin-top: 0em;    margin-right: 0em;    margin-bottom: 0em;    margin-left: 0em;    font-style: normal;    font-weight: 400;    font-size: 11px;    font-family: -apple-system;    font-variant-caps: normal;    color: initial;    letter-spacing: normal;    word-spacing: normal;    line-height: normal;    text-transform: none;    text-indent: 0px;    text-shadow: none;    display: inline-block;    text-align: start;    outline: none;}li {    display: list-item;    text-align: -webkit-match-parent;}label {    cursor: default;}button {    margin: 0;    padding: 0;    border: 0;    background: none;    font-size: 100%;    vertical-align: baseline;    font-family: inherit;    font-weight: inherit;    color: inherit;    appearance: none;    font-smoothing: antialiased;    outline: none;}`</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Home</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      todos<span class="token punctuation">:</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"Todos"</span><span class="token punctuation">)</span>        <span class="token operator">?</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"Todos"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      filter<span class="token punctuation">:</span> props<span class="token punctuation">.</span>filter <span class="token operator">?</span> props<span class="token punctuation">.</span>filter <span class="token punctuation">:</span> <span class="token string">"all"</span><span class="token punctuation">,</span>      isAllChecked<span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  addTodo <span class="token operator">=</span> todoItem <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>todoItem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> todos<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>todos <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"Todos"</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>todos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  changeTodoState <span class="token operator">=</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> isDone<span class="token punctuation">,</span> isChangeAll <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isChangeAll<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        todos<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>todo <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          todo<span class="token punctuation">.</span>isDone <span class="token operator">=</span> isDone<span class="token punctuation">;</span>          <span class="token keyword">return</span> todo<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        isAllChecked<span class="token punctuation">:</span> isDone      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> todo <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>todos<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>todo<span class="token punctuation">.</span>id <span class="token operator">===</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>          todo<span class="token punctuation">.</span>isDone <span class="token operator">=</span> isDone<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> todos<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>todos <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"Todos"</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>todos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  clearDone <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> todos <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>todo <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">!</span>todo<span class="token punctuation">.</span>isDone<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      todos<span class="token punctuation">:</span> todos    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"Todos"</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>todos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  deleteTodo <span class="token operator">=</span> index <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> todos<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>todos <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"Todos"</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>todos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  filterTodo <span class="token operator">=</span> p <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      filter<span class="token punctuation">:</span> p    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  newTodo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> status <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>filter<span class="token punctuation">;</span>    <span class="token keyword">let</span> newtodos <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">===</span> <span class="token string">"active"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      newtodos <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>todo <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">!</span>todo<span class="token punctuation">.</span>isDone<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">===</span> <span class="token string">"completed"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      newtodos <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>todo <span class="token operator">=</span><span class="token operator">></span> todo<span class="token punctuation">.</span>isDone<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">===</span> <span class="token string">"all"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      newtodos <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>todos<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> newtodos<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> props <span class="token operator">=</span> <span class="token punctuation">{</span>      todoDoneCount<span class="token punctuation">:</span>        <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>todos <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>todo <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">!</span>todo<span class="token punctuation">.</span>isDone<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span>length <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">,</span>      isShowClearBtn<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>todo <span class="token operator">=</span><span class="token operator">></span> todo<span class="token punctuation">.</span>isDone<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TodoApp</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AddItem</span>            <span class="token attr-name">todos</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>todos<span class="token punctuation">}</span></span>            <span class="token attr-name">addTodo</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>addTodo<span class="token punctuation">}</span></span>            <span class="token attr-name">changeTodoState</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeTodoState<span class="token punctuation">}</span></span>          <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TodoList</span>            <span class="token attr-name">deleteTodo</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>deleteTodo<span class="token punctuation">}</span></span>            <span class="token attr-name">todos</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">newTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>            <span class="token attr-name">changeTodoState</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeTodoState<span class="token punctuation">}</span></span>            <span class="token attr-name">id</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>todos<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span>          <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TodoFoot</span>            <span class="token attr-name">clearDone</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>clearDone<span class="token punctuation">}</span></span>            <span class="token attr-name">{...props}</span>            <span class="token attr-name">filterTodo</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>filterTodo<span class="token punctuation">}</span></span>          <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TodoApp</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AnotherFooter</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Created by Yanzu<span class="token punctuation">.</span>Lee<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AnotherFooter</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> TodosAll <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Home</span> <span class="token attr-name">filter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>all<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> TodosActive <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Home</span> <span class="token attr-name">filter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>active<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> TodosCompleted <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Home</span> <span class="token attr-name">filter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>completed<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token punctuation">{</span> TodosAll<span class="token punctuation">,</span> TodosActive<span class="token punctuation">,</span> TodosCompleted <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="状态state"><a href="#状态state" class="headerlink" title="状态state"></a>状态state</h3><p>我们知道React的主流思想就是，所有的state状态和方法都是由父组件控制，然后通过props传递给子组件，形成一个单方向的数据链路，保持各组件的状态一致。所以我们在这个父组件Home上，看的东西稍微有点多。一点点来看：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      todos<span class="token punctuation">:</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"Todos"</span><span class="token punctuation">)</span>        <span class="token operator">?</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"Todos"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      filter<span class="token punctuation">:</span> props<span class="token punctuation">.</span>filter <span class="token operator">?</span> props<span class="token punctuation">.</span>filter <span class="token punctuation">:</span> <span class="token string">"all"</span><span class="token punctuation">,</span>      isAllChecked<span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>在constructor内，我们先是初始化了state，分别有三个，一个是todos的列表，存在localStorage中，一个是filter状态，一个是所有的todos是否全选的状态。</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// 添加一个任务，参数是一个todoItem的object</span>addTodo <span class="token operator">=</span> todoItem <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token operator">...</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 改变任务的状态，id是第几个，isDone是状态，isChangeAll是控制全部状态的</span>changeTodoState <span class="token operator">=</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> isDone<span class="token punctuation">,</span> isChangeAll <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token operator">...</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 参数默认为false</span><span class="token comment" spellcheck="true">// 清空已完成</span>clearDone <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token operator">...</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 删除面板上第几个任务</span>deleteTodo <span class="token operator">=</span> index <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token operator">...</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 改变filter</span>filterTodo <span class="token operator">=</span> p <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token operator">...</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 控制渲染状态</span>newTodo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token operator">...</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// react用于渲染的函数</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span></code></pre><p>我们可以从render函数看到整个组件的结构，可以看到其实结构非常简单，就是上中下。上面的AddItem自然就是用来输入任务的地方，中间就是展示并操作todos列表的，而底部就是显示数据并提供筛选操作的，而最底部就是一个简单的Footer。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> props <span class="token operator">=</span> <span class="token punctuation">{</span>      todoDoneCount<span class="token punctuation">:</span>        <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>todos <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>todo <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">!</span>todo<span class="token punctuation">.</span>isDone<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span>length <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">,</span>      isShowClearBtn<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>todo <span class="token operator">=</span><span class="token operator">></span> todo<span class="token punctuation">.</span>isDone<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TodoApp</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AddItem</span>            <span class="token attr-name">todos</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>todos<span class="token punctuation">}</span></span>            <span class="token attr-name">addTodo</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>addTodo<span class="token punctuation">}</span></span>            <span class="token attr-name">changeTodoState</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeTodoState<span class="token punctuation">}</span></span>          <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TodoList</span>            <span class="token attr-name">deleteTodo</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>deleteTodo<span class="token punctuation">}</span></span>            <span class="token attr-name">todos</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">newTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>            <span class="token attr-name">changeTodoState</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeTodoState<span class="token punctuation">}</span></span>            <span class="token attr-name">id</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>todos<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span>          <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TodoFoot</span>            <span class="token attr-name">clearDone</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>clearDone<span class="token punctuation">}</span></span>            <span class="token attr-name">{...props}</span>            <span class="token attr-name">filterTodo</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>filterTodo<span class="token punctuation">}</span></span>          <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TodoApp</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AnotherFooter</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Created by Yanzu<span class="token punctuation">.</span>Lee<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AnotherFooter</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>我们可以看到，其他的方法都是传到子组件上，就不一一详细说如何实现的了。总体的思想就是，方法在父组件定义，通过props传给需要的子组件进行调用传参，最后返回到父组件上执行函数，存储数据、改变state并触发重新渲染。方法并不需要bind(this)，因为我们使用的是箭头函数。</p><h2 id="AddTodo组件"><a href="#AddTodo组件" class="headerlink" title="AddTodo组件"></a>AddTodo组件</h2><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">'styled-components'</span><span class="token punctuation">;</span><span class="token keyword">const</span> TodoInput <span class="token operator">=</span> styled<span class="token punctuation">.</span>input<span class="token template-string"><span class="token string">`    padding: 16px 16px 16px 60px;    border: none;    background: rgba(0, 0, 0, 0.003);    box-shadow: inset 0 -2px 1px rgba(0, 0, 0, 0.03);    position: relative;    margin: 0;    width: 100%;    font-size: 24px;    font-style: italic;    font-family: inherit;    font-weight:  100;    line-height: 1.4em;    outline: none;    color: black;    box-sizing: border-box;    font-smoothing: antialiased;`</span></span><span class="token keyword">const</span> Allchecked <span class="token operator">=</span> styled<span class="token punctuation">.</span>input<span class="token template-string"><span class="token string">`    transform: rotate(90deg);    appearance: none;    outline: none;    position: absolute;    top: 15px;    left: -12px;    width: 60px;    height: 34px;    text-align: center;    border: none;    background: none;    :before {        content: '❯';        font-size: 22px;        color: #e6e6e6;        padding: 10px 27px 10px 27px;    }    :checked:before {        color: #737373;    }`</span></span><span class="token keyword">const</span> Title <span class="token operator">=</span> styled<span class="token punctuation">.</span>h1<span class="token template-string"><span class="token string">`    position: absolute;    top: -155px;    width: 100%;    font-size: 100px;    font-weight: 100;    text-align: center;    color: rgba(175, 47, 47, 0.15);    text-rendering: optimizeLegibility;    :matches(article, aside, nav, section) {        font-size: 1.5em;        -webkit-margin-before: 0.83em;        -webkit-margin-after: 0.83em;    }`</span></span><span class="token keyword">class</span> <span class="token class-name">AddTodo</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    allChangeState <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">changeTodoState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>checked<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    keyUp <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>keyCode <span class="token operator">===</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> value <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> newID <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>todos<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                newID <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>todos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">let</span> newTodoItem <span class="token operator">=</span> <span class="token punctuation">{</span>                text<span class="token punctuation">:</span> value<span class="token punctuation">,</span>                isDone<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                id<span class="token punctuation">:</span> newID<span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">addTodo</span><span class="token punctuation">(</span>newTodoItem<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Title</span><span class="token punctuation">></span></span>todos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Title</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TodoInput</span> <span class="token attr-name">onKeyUp</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>keyUp<span class="token punctuation">}</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>what</span> <span class="token attr-name">needs</span> <span class="token attr-name">to</span> <span class="token attr-name">be</span> <span class="token attr-name">done</span> <span class="token attr-name">?"</span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Allchecked</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>isAllChecked<span class="token punctuation">}</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>allChangeState<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> AddTodo<span class="token punctuation">;</span></code></pre><p>到了子组件，方法就没那么多了，一般子组件就是绑定事件。可以看到在子组件绑定了keyUp事件，用来确定回车键并调用父组件传来的addTodo()，将新生成的todo任务作为参数传入。</p><h2 id="TodoItem组件"><a href="#TodoItem组件" class="headerlink" title="TodoItem组件"></a>TodoItem组件</h2><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">'styled-components'</span><span class="token punctuation">;</span><span class="token keyword">const</span> CheckBox <span class="token operator">=</span> styled<span class="token punctuation">.</span>input<span class="token template-string"><span class="token string">`    height: 40px;    text-align: center;    width: 40px;    height: auto;    position: absolute;    top: 10px;    bottom: 0;    margin: auto 0;    border: none;    appearance: none;    :after {        content: url('data:image/svg+xml;utf8,&lt;svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="-10 -18 100 135">&lt;circle cx="50" cy="50" r="50" fill="none" stroke="#ededed" stroke-width="3"/>&lt;/svg>');    }    :checked:after {        content: url('data:image/svg+xml;utf8,&lt;svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="-10 -18 100 135">&lt;circle cx="50" cy="50" r="50" fill="none" stroke="#bddad5" stroke-width="3"/>&lt;path fill="#5dc2af" d="M72 25L42 71 27 56l-4 4 20 20 34-52z"/>&lt;/svg>');    }`</span></span><span class="token keyword">const</span> TodoLi <span class="token operator">=</span> styled<span class="token punctuation">.</span>li<span class="token template-string"><span class="token string">`    position: relative;    font-size: 24px;    border-bottom: 1px solid #ededed;`</span></span><span class="token keyword">const</span> TodoSpan <span class="token operator">=</span> styled<span class="token punctuation">.</span>label<span class="token template-string"><span class="token string">`    white-space: pre-line;    word-break: break-all;    padding: 15px 60px 15px 15px;    margin-left: 45px;    display: block;    line-height: 1.2;    transition: color 0.4s;    color:  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>props <span class="token operator">=</span><span class="token operator">></span> props<span class="token punctuation">.</span>isDone <span class="token operator">?</span> <span class="token string">'#d9d9d9'</span> <span class="token punctuation">:</span> <span class="token string">'black'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;    text-decoration: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>props <span class="token operator">=</span><span class="token operator">></span> props<span class="token punctuation">.</span>isDone <span class="token operator">?</span> <span class="token string">'line-through'</span> <span class="token punctuation">:</span> <span class="token string">'none'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;`</span></span><span class="token keyword">const</span> Delete <span class="token operator">=</span> styled<span class="token punctuation">.</span>button<span class="token template-string"><span class="token string">`    display: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>props <span class="token operator">=</span><span class="token operator">></span> props<span class="token punctuation">.</span>isShowDelete <span class="token operator">?</span> <span class="token string">'block'</span><span class="token punctuation">:</span> <span class="token string">'none'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;    position: absolute;    top: 0;    right: 10px;    bottom: 0;    width: 40px;    height: 40px;    margin: auto 0;    font-size: 30px;    color: #cc9a9a;    margin-bottom: 11px;    border: none;    background: none;    transition: color 0.2s ease-out;    :hover {        color: #af5b5e;    }    :after {        content: '×';      }`</span></span><span class="token keyword">class</span> <span class="token class-name">TodoItem</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>            isShowDelete<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    showDeleteBtn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>isShowDelete<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    hideDeleteBtn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>isShowDelete<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    changeState <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> isDone <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>isDone<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">changeTodoState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>id<span class="token punctuation">,</span> isDone<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    DeleteItem <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">deleteTodo</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>TodoLi onMouseEnter <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>showDeleteBtn<span class="token punctuation">}</span> onMouseLeave <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>hideDeleteBtn<span class="token punctuation">}</span><span class="token operator">></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CheckBox</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>isDone<span class="token punctuation">}</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeState<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TodoSpan</span> <span class="token attr-name">isDone</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>isDone<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TodoSpan</span><span class="token punctuation">></span></span>                <span class="token operator">&lt;</span>Delete isShowDelete <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isShowDelete<span class="token punctuation">}</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>DeleteItem<span class="token punctuation">}</span><span class="token operator">></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Delete</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TodoLi</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> TodoItem<span class="token punctuation">;</span></code></pre><p>此组件就是定义具体每一条todo任务，每条任务有一个CheckBox来完成或取消完成任务，然后是任务描述，最后是一个删除按钮，通过isShowDelete来控制是否显示，当鼠标悬浮于某条任务上时，通过对onMouseEnter和onMouseLeave绑定回调事件来改变isShowDelete的状态。</p><h2 id="Todos组件"><a href="#Todos组件" class="headerlink" title="Todos组件"></a>Todos组件</h2><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> TodoItem <span class="token keyword">from</span> <span class="token string">"./TodoItem.jsx"</span><span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">'styled-components'</span><span class="token punctuation">;</span><span class="token keyword">const</span> Main <span class="token operator">=</span> styled<span class="token punctuation">.</span>section<span class="token template-string"><span class="token string">`    position: relative;    z-index: 2;    border-top: 1px solid #ededed;`</span></span><span class="token keyword">const</span> TodoUl <span class="token operator">=</span> styled<span class="token punctuation">.</span>ul<span class="token template-string"><span class="token string">`    margin: 0;    padding: 0;    list-style: none;`</span></span><span class="token keyword">class</span> <span class="token class-name">Todos</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    TodoList <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Main</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TodoUl</span><span class="token punctuation">></span></span>                    <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>todo<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token operator">&lt;</span>TodoItem <span class="token punctuation">{</span><span class="token operator">...</span>todo<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">}</span> id<span class="token operator">=</span><span class="token punctuation">{</span>todo<span class="token punctuation">.</span>id<span class="token punctuation">}</span> key<span class="token operator">=</span><span class="token punctuation">{</span>todo<span class="token punctuation">.</span>id<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TodoUl</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Main</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>this.TodoList</span><span class="token punctuation">/></span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Todos<span class="token punctuation">;</span></code></pre><p>此组件是整个任务列表，是TodoItem组件的父组件，又通过筛选其父组件传递下来的props中的todos，来渲染显示任务列表。</p><h2 id="TodoFoot组件"><a href="#TodoFoot组件" class="headerlink" title="TodoFoot组件"></a>TodoFoot组件</h2><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">'styled-components'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span>    BrowserRouter <span class="token keyword">as</span> Router<span class="token punctuation">,</span>    Link<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token keyword">const</span> TodoFooter <span class="token operator">=</span> styled<span class="token punctuation">.</span>footer<span class="token template-string"><span class="token string">`    color: #777;    padding: 10px 15px;    height: 20px;    text-align: center;    border-top: 1px solid #e6e6e6;    :before {        content: '';        position: absolute;        right: 0;        bottom: 0;        left: 0;        height: 50px;        overflow: hidden;        box-shadow: 0 1px 1px rgba(0, 0, 0, 0.2), 0 8px 0 -3px #f6f6f6, 0 9px 1px -3px rgba(0, 0, 0, 0.2), 0 16px 0 -6px #f6f6f6, 0 17px 2px -6px rgba(0, 0, 0, 0.2);    }`</span></span><span class="token keyword">const</span> CountActive <span class="token operator">=</span> styled<span class="token punctuation">.</span>span<span class="token template-string"><span class="token string">`    float: left;    text-align: left;`</span></span><span class="token keyword">const</span> Filter <span class="token operator">=</span> styled<span class="token punctuation">.</span>ul<span class="token template-string"><span class="token string">`    margin: 0;    padding: 0;    list-style: none;    position: absolute;    right: 0;    left: 0;    height: 19.2px;`</span></span><span class="token keyword">const</span> FilterLi <span class="token operator">=</span> styled<span class="token punctuation">.</span>li<span class="token template-string"><span class="token string">`    display: inline;`</span></span><span class="token keyword">const</span> FilterBtn <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span>Link<span class="token punctuation">)</span> <span class="token template-string"><span class="token string">`    color: inherit;    margin: 3px;    padding: 3px 7px;    text-decoration: none;    border: 1px solid transparent;    border-radius: 3px;    cursor: pointer;    border-color:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>props <span class="token operator">=</span><span class="token operator">></span> props<span class="token punctuation">.</span>checked <span class="token operator">?</span> <span class="token string">'rgba(175, 47, 47, 0.5)'</span> <span class="token punctuation">:</span> <span class="token string">'#ffffff'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;    :hover {        border-color: rgba(175, 47, 47, 0.1);    }`</span></span><span class="token keyword">const</span> Clear <span class="token operator">=</span> styled<span class="token punctuation">.</span>button<span class="token template-string"><span class="token string">`    float: right;    position: relative;    line-height: 20px;    text-decoration: none;    cursor: pointer;    position: relative;    display:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>props <span class="token operator">=</span><span class="token operator">></span> props<span class="token punctuation">.</span>isShowClearBtn <span class="token operator">?</span> <span class="token string">'block'</span> <span class="token punctuation">:</span> <span class="token string">'none'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;    :hover {        text-decoration: underline;    }`</span></span><span class="token keyword">class</span> <span class="token class-name">TodoFoot</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>            isOnClick<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    clear <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">clearDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    all <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">filterTodo</span><span class="token punctuation">(</span><span class="token string">"all"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> isOnClick<span class="token punctuation">:</span> <span class="token string">'all'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    active <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">filterTodo</span><span class="token punctuation">(</span><span class="token string">"active"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> isOnClick<span class="token punctuation">:</span> <span class="token string">'active'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    completed <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">filterTodo</span><span class="token punctuation">(</span><span class="token string">"completed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> isOnClick<span class="token punctuation">:</span> <span class="token string">'completed'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TodoFooter</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CountActive</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>todoDoneCount<span class="token punctuation">}</span> items left <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CountActive</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Router</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Filter</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FilterLi</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FilterBtn</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>/all<span class="token punctuation">'</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>all<span class="token punctuation">}</span></span> <span class="token attr-name">checked</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isOnClick <span class="token operator">===</span> <span class="token string">'all'</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>All<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FilterBtn</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FilterBtn</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>/active<span class="token punctuation">'</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>active<span class="token punctuation">}</span></span> <span class="token attr-name">checked</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isOnClick <span class="token operator">===</span> <span class="token string">'active'</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Active<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FilterBtn</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FilterBtn</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>/completed<span class="token punctuation">'</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>completed<span class="token punctuation">}</span></span> <span class="token attr-name">checked</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isOnClick <span class="token operator">===</span> <span class="token string">'completed'</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Completed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FilterBtn</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FilterLi</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Filter</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Router</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Clear</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>clear<span class="token punctuation">}</span></span> <span class="token attr-name">isShowClearBtn</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>isShowClearBtn<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Clear Completed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Clear</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TodoFooter</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> TodoFoot<span class="token punctuation">;</span></code></pre><p>这是底部组件，上面显示未完成的任务数、三个筛选按钮、以及清除已完成任务的按钮，点击三个筛选按钮时，向上传递父组件的filterTodo方法的参数，调用该函数，改变父组件中的filter这一state，从而触发渲染，达到控制显示不同状态任务的目的。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>回过头看Todos应用，会觉得React带给我们的组件化的思想用起来太舒服了。我们通过父组件来控制状态，并通过props传递，来保证组件内的状态一致。我们可以非常有效的维护我们的交互代码，因为我们一眼就知道，哪个事件属于哪个组件管理。对于props和state的使用，我们需要在实践中才能切身体会其中的妙处。整个应用还有很多瑕疵，但我相信随着以后使用React开发多了以后，就更得心应手了，我用到的大多都是些基本用法，要想掌握React这门技术，还有很多东西需要学习。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> sc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React学习日记三：styled-components</title>
      <link href="/2017/07/12/react-study/styled-components/"/>
      <url>/2017/07/12/react-study/styled-components/</url>
      
        <content type="html"><![CDATA[<p>网页主要由三部分组成： 结构（ Structure） 、 表现（ Presentation） 和行为（ Behavior）：</p><ul><li>HTML —— 结构， 决定网页的结构和内容（ “是什么”）；  </li><li>CSS —— 表现（ 样式） ， 设定网页的表现样式（ “什么样子”）；</li><li>JavaScript（ JS） —— 行为， 控制网页的行为（ “做什么”）；</li></ul><p>其中CSS是很重要的一部分，这就好比你修了一栋结构再好看的建筑，没有装饰，也只是灰色的钢筋水泥，不能给人带来美感。通常我们都是把样式单独提取出来放在<code>css</code>文件中，然后在JS或者JSX文件中import css文件即可，写样式也需要花费大量的时间，而这其中 给className命名的问题经常让我头痛，现在我发现了一个很好的解决办法，我觉得省去了一大笔烦恼。</p><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><p>CSS怎么写这并不是我想说的，而是这里有一个问题，具体看一下：</p><p>我们随便写一段CSS，就叫<code>style-A.css</code>:</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.red</span> </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>然后我们在JSX文件中引用：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token string">'./style-A.css'</span><span class="token operator">&lt;</span>ComponentA className <span class="token operator">=</span> <span class="token string">'red'</span><span class="token operator">/</span><span class="token operator">></span></code></pre><p>这里有一点点不一样，要使用<code>className</code>而不是<code>class</code>，因为前面说过，<code>class</code>是js的关键字，想要说得不是这个，而是比如还有一个ComponentB：</p><pre class=" language-css"><code class="language-css"><span class="token selector">//style-B<span class="token class">.css</span><span class="token class">.red</span> </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token string">'./style-B.css'</span><span class="token operator">&lt;</span>ComponentB className <span class="token operator">=</span> <span class="token string">'red'</span><span class="token operator">/</span><span class="token operator">></span></code></pre><p>那么两个组件的background-color到底是绿色还是蓝色？虽然是两个不同的css文件，但是className都叫’red’，就会产生冲突，这是因为CSS没有变量作用域啊，也就是两个className都叫’red’的组件，不知道到底该用哪个，这就让人头大了呀！</p><h1 id="React内联样式"><a href="#React内联样式" class="headerlink" title="React内联样式"></a>React内联样式</h1><p>找到了一个很好的解决办法，可以很好的解决命名冲突的问题。不是名字冲突了吗？那就不要名字了呗！React支持内联样式，可以直接在组件上写样式，把style作为组件的一个属性，很简单，像这样：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token operator">&lt;</span>Component style <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>color<span class="token punctuation">:</span><span class="token string">'red'</span><span class="token punctuation">,</span>backgroundColor<span class="token punctuation">:</span><span class="token string">'green'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span></code></pre><p>有两层<code>{}</code>是因为在传递属性的时候，如果属性值是js值，那就必须用一个<code>{}</code>包起来，而style属性的值又是一个object对象所以还有一层<code>{}</code>，这个用多了就慢慢习惯了。</p><p>但是，，，，自古英雄怕但是，这样写是不用命名了，但把每个组件的样式写在属性里，项目大了代码就很复杂了啊，而且很容易有代码重复的问题，我们经常都在解决这个问题。</p><h1 id="CSS-in-JS"><a href="#CSS-in-JS" class="headerlink" title="CSS in JS"></a>CSS in JS</h1><p>有个国外大神Christopher Chedeau做过一个叫<a href="http://blog.vjeux.com/2014/javascript/react-css-in-js-nationjs.htm">CSS in JS</a>的演讲，阐述了很多CSS存在的问题以及解决办法，于是出现了很多’css in js’的第三方库，对于我来说，简单好用是关键，于是朋友给我推荐了Styled Components，用过以后，我只能用一句歌词来表达我的感受，‘确认过眼神，我遇见对的人’</p><h1 id="Styled-Components"><a href="#Styled-Components" class="headerlink" title="Styled Components"></a>Styled Components</h1><p>简单看一下<a href="https://github.com/styled-components/styled-components">Styled Components</a>是什么：</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先在React项目中安装Styled Components：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> --save styled-components</code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>使用方法很简单，基本看一遍就会了</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">'styled-components'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//给组件定义样式</span><span class="token keyword">const</span> Wrapper <span class="token operator">=</span> styled<span class="token punctuation">.</span>section<span class="token template-string"><span class="token string">`background-color: blue;margin: 10em;`</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> Title <span class="token operator">=</span> styled<span class="token punctuation">.</span>h1<span class="token template-string"><span class="token string">`font-size: 1.5em;color: red;`</span></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//然后可以将Wrapper和Title作为Component使用</span><span class="token function">render</span><span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Wrapper</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Title</span><span class="token punctuation">></span></span>            Hello styled component<span class="token operator">!</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Wrapper</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="根据props定义不同样式"><a href="#根据props定义不同样式" class="headerlink" title="根据props定义不同样式"></a>根据props定义不同样式</h2><p>Styled Components 可以根据props来定义不同的样式，像这样：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">'styled-components'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//根据isShowClearBtn来控制是否显示Clear Button</span><span class="token keyword">const</span> Clear <span class="token operator">=</span> styled<span class="token punctuation">.</span>button<span class="token template-string"><span class="token string">`    float: right;    position: relative;    line-height: 20px;    text-decoration: none;    cursor: pointer;    position: relative;    display:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>props <span class="token operator">=</span><span class="token operator">></span> props<span class="token punctuation">.</span>isShowClearBtn <span class="token operator">?</span> <span class="token string">'block'</span> <span class="token punctuation">:</span> <span class="token string">'none'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;    :hover {        text-decoration: underline;    }`</span></span><span class="token punctuation">;</span><span class="token function">render</span><span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Clear</span> <span class="token attr-name">isShowClearBtn</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>isShowClearBtn<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>        Clear Completed    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Clear</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="给任意组件绑定样式"><a href="#给任意组件绑定样式" class="headerlink" title="给任意组件绑定样式"></a>给任意组件绑定样式</h2><p>Styled Components其实可以给任何组件绑定样式，比如自己定义的组件，或者第三方库提供的组件，都可以，但用法稍微有些不同，看一下：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">'styled-components'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//给react-router提供的Link组件定义样式</span><span class="token keyword">const</span> FilterBtn <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span>Link<span class="token punctuation">)</span> <span class="token template-string"><span class="token string">`    color: inherit;    margin: 3px;    padding: 3px 7px;    text-decoration: none;    border: 1px solid transparent;    border-radius: 3px;    cursor: pointer;    border-color:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>props <span class="token operator">=</span><span class="token operator">></span> props<span class="token punctuation">.</span>checked <span class="token operator">?</span> <span class="token string">'rgba(175, 47, 47, 0.5)'</span> <span class="token punctuation">:</span> <span class="token string">'#ffffff'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;    :hover {        border-color: rgba(175, 47, 47, 0.1);    }`</span></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//同样照常使用</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TodoFooter</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CountActive</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>todoDoneCount<span class="token punctuation">}</span> items left <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CountActive</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Router</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Filter</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FilterLi</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FilterBtn</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>/all<span class="token punctuation">'</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>all<span class="token punctuation">}</span></span> <span class="token attr-name">checked</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isOnClick <span class="token operator">===</span> <span class="token string">'all'</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>All<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FilterBtn</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FilterBtn</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>/active<span class="token punctuation">'</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>active<span class="token punctuation">}</span></span> <span class="token attr-name">checked</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isOnClick <span class="token operator">===</span> <span class="token string">'active'</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Active<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FilterBtn</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FilterBtn</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>/completed<span class="token punctuation">'</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>completed<span class="token punctuation">}</span></span> <span class="token attr-name">checked</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isOnClick <span class="token operator">===</span> <span class="token string">'completed'</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Completed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FilterBtn</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FilterLi</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Filter</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Router</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Clear</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>clear<span class="token punctuation">}</span></span> <span class="token attr-name">isShowClearBtn</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>isShowClearBtn<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Clear Completed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Clear</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TodoFooter</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><p>也就是其实可以把<code>styled</code>看作一个函数，它的参数就是你想设置样式的组件。</p><h2 id="扩展样式"><a href="#扩展样式" class="headerlink" title="扩展样式"></a>扩展样式</h2><p>Styled Components 支持样式的继承，比如上面那个定义好了一个有样式的Button，现在需要第二个Button，除了颜色，其他所有样式都与之前的Button相同，那我们可以这样做：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> Clear <span class="token operator">=</span> styled<span class="token punctuation">.</span>button<span class="token template-string"><span class="token string">`    float: right;    position: relative;    line-height: 20px;    text-decoration: none;    cursor: pointer;    position: relative;    display:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>props <span class="token operator">=</span><span class="token operator">></span> props<span class="token punctuation">.</span>isShowClearBtn <span class="token operator">?</span> <span class="token string">'block'</span> <span class="token punctuation">:</span> <span class="token string">'none'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;    :hover {        text-decoration: underline;    }`</span></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义另一个Button</span><span class="token keyword">const</span> AnotherButton <span class="token operator">=</span> Clear<span class="token punctuation">.</span>extend<span class="token template-string"><span class="token string">`    color: red;`</span></span><span class="token punctuation">;</span></code></pre><p>然后同样照常使用就行了。<br>以后就用Styled Components了！</p><h2 id="Refers"><a href="#Refers" class="headerlink" title="Refers"></a>Refers</h2><p>一些参考资料：</p><ul><li><a href="https://github.com/styled-components/styled-components">https://github.com/styled-components/styled-components</a></li><li><a href="https://www.styled-components.com/docs/basics">https://www.styled-components.com/docs/basics</a></li><li><a href="https://www.smashingmagazine.com/2017/01/styled-components-enforcing-best-practices-component-based-systems/">https://www.smashingmagazine.com/2017/01/styled-components-enforcing-best-practices-component-based-systems/</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> sc </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React学习日记二：开发环境搭建</title>
      <link href="/2017/07/07/react-study/devenv/"/>
      <url>/2017/07/07/react-study/devenv/</url>
      
        <content type="html"><![CDATA[<h1 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h1><p>学习一个框架，肯定要先搭好它的开发环境，这不用多说，我在网上找了一些教程，大概将生态下的开发环境搭好了。</p><h2 id="node"><a href="#node" class="headerlink" title="node"></a>node</h2><p>首先 node 不说了，这是肯定必须的，node 环境下需要装三个东西：</p><ul><li>nvm(可选)</li><li>npm(node.js 自带)</li><li>nrm</li></ul><h3 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h3><p>简单来说 nvm 是 node.js 的版本管理工具，可以在自己电脑上随时切换管理不同版本的 node。</p><h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><p>npm 不用说了，是 node 自带的，习惯用 yarn 也可以装一个，我不知道是不是 windows 下 npm 有些问题，有时候 yarn 比 npm 好用，所以我更多时候用 yarn。</p><h3 id="nrm"><a href="#nrm" class="headerlink" title="nrm"></a>nrm</h3><p>nrm(npm registry manager )是 npm 的镜像源管理工具，有时候国外资源太慢，那么我们可以用这个来切换镜像源。<br>首先全局安装 nrm：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g nrm</code></pre><p>安装完后就可以立即使用了，执行<code>nrm ls</code>可以列出可用的源：</p><pre class=" language-bash"><code class="language-bash">$ nrm <span class="token function">ls</span>  <span class="token function">npm</span> ---- https://registry.npmjs.org/  cnpm --- http://r.cnpmjs.org/  taobao - https://registry.npm.taobao.org/  nj ----- https://registry.nodejitsu.com/  rednpm - http://registry.mirror.cqupt.edu.cn/  npmMirror  https://skimdb.npmjs.com/registry/  edunpm - http://registry.enpmjs.org/</code></pre><p>可以测一下哪个源比较快，像这样：</p><pre class=" language-bash"><code class="language-bash">nrm <span class="token function">test</span> taobaotaobao - 497ms</code></pre><p>一般我测出来都是 taobao 这个源比较快，所以就用这个了：</p><pre class=" language-bash"><code class="language-bash">nrm use taobao</code></pre><h2 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h2><p>编辑器我用微软出的 VScode，用起来比较方便，还可以自己安一些插件，方便自己写代码。<br>下载地址：<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></p><h2 id="create-react-app"><a href="#create-react-app" class="headerlink" title="create-react-app"></a>create-react-app</h2><p>create-react-app 算是现在最流行的 react starter 项目，毕竟是 Facebook 官方出的，github 上的 star 应该有 30000+了，足以说明一切。<br>用起来也特别简单：</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>首先全局下安装 create-react-app：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g create-react-app</code></pre><h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><p>reate-react-app 已经预先配置好了 Webpack 和 Babel，可以直接使用。</p><p>ES6、热更新、编译检查 Flow、测试、代码压缩、文件名带 hash、service worker 等都已经支持了：</p><pre class=" language-bash"><code class="language-bash">create-react-app first-app<span class="token function">cd</span> first-app/</code></pre><p>然后执行<code>npm start</code>:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> start<span class="token operator">></span> first-app@0.1.0 start C:\Users\Crowford\first-app<span class="token operator">></span> react-scripts startStarting the development server<span class="token punctuation">..</span>.Compiled successfully<span class="token operator">!</span>You can now view first-app <span class="token keyword">in</span> the browser.  Local:            http://localhost:3000/  On Your Network:  http://192.168.0.100:3000/Note that the development build is not optimized.To create a production build, use yarn build.</code></pre><p>神奇的发现它会自动打开浏览器，并访问<a href="http://localhost:3000/，">http://localhost:3000/，</a> 可以看到项目启动起来了。</p><p>在<code>App.js</code>里随便修改一点东西<code>Ctrl+s</code>保存，不用手动刷新，浏览器已经自动完成刷新了。</p><p>热更新，Amazing!</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> node </tag>
            
            <tag> VScode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React学习日记一：ES5-ES2017语法</title>
      <link href="/2017/07/04/react-study/es5-next/"/>
      <url>/2017/07/04/react-study/es5-next/</url>
      
        <content type="html"><![CDATA[<p>最近打算开始学习React，但是在看官方文档的时候发现React可以使用很多ES6甚至ES2017的新特性，之前自认为熟练掌握JavaScript的我在了解这些新特性后简直觉得amazing，于是先学习了一波，记录一些能在React中常用的特性,主要涵盖内容如下：</p><ul><li>map / filter / reduce</li><li>let / const</li><li>箭头函数（arrow functions）</li><li>字符串插值（string interpolation）</li><li>class</li><li>数组解构</li><li>对象解构</li><li>Promise</li><li>async/await</li></ul><p>下面一一详细记录：</p><h1 id="map-filter-reduce"><a href="#map-filter-reduce" class="headerlink" title="map/filter/reduce"></a>map/filter/reduce</h1><p>这三个函数可以很轻松方便的对数组进行一些处理</p><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>简单来说，map是对数组每一个元素进行一定处理，返回一个新数组（这点很重要！！！），让我们来看一看：</p><p>假设现在有这样一个需求：在数组<code>arr=[1,2,3,4,5]</code>的基础上得到一个新数组，要求每个元素在<code>arr</code>的基础上<code>+1</code>。对于我们来说当然so easy！</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  arr2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [2, 3, 4, 5, 6]</span></code></pre><p>OK，需求变了现在要求在每一个元素基础上<code>+2</code>，行，要得：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  arr2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [3, 4, 5, 6, 7]</span></code></pre><p>发现了吧，上面两段代码虽然需求不同，但是代码基本一样，不一样的就是在元素转化的时候略微不同，我们可能还会遇到更对类似的需求：<code>+3</code>、<code>*5</code>、<code>-10</code>….，难道每次都要重复这段代码吗？不用！map很好的帮我们实现了这一需求，我们来看看怎么用：</p><p>第一个需求：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>e <span class="token operator">=</span><span class="token operator">></span> e <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [2, 3, 4, 5, 6]</span></code></pre><p>第二个需求：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>e <span class="token operator">=</span><span class="token operator">></span> e <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [3, 4, 5, 6, 7]</span></code></pre><p>代码一下少了好多啊，其实是map函数帮我们实现了定义一个新的空数组，然后<code>for</code>循环遍历<code>arr</code>，然后对每个元素做一些转化，放到新数组里，最后返回新数组,我们原来那些代码不就是为了完成这一系列事情吗？<br>map函数接收一个参数<code>f</code>，这个参数类型是<code>function</code>，即定义了要对每一个元素进行的转化。了解了这个，那我们就可以做更多事情了，比如：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>e <span class="token operator">=</span><span class="token operator">></span> e <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>e <span class="token operator">=</span><span class="token operator">></span> e <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> arr3 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>e <span class="token operator">=</span><span class="token operator">></span> e <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span>arr2<span class="token punctuation">,</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [4, 5, 6, 7, 8],[5, 10, 15, 20, 25],[0, 1, 2, 3, 4]</span></code></pre><p>炫酷！<br>##filter<br>filter，顾名思义，就是对数组按照一定条件进行筛选，然后同样返回一个新数组。<br>在我们不知道filter之前，其实我们实现这类需求很简单，同样是先定义一个新数组，然后<code>for</code>循环遍历<code>arr</code>，然后按照一定条件进行筛选，比如要我们找出大于3的数，那我们只需要在<code>for</code>循环遍历的时候做<code>if</code>判断：<code>if (arr[i] &gt; 3)</code>然后将满足的元素<code>push</code>进新数组即可，像这样：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">let</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr3<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[4, 5]</span></code></pre><p>也很简单对吧，可是我们用filter函数更简单，同样是选出大于3的数，我们来看看：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> arr3 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">=</span><span class="token operator">></span> e <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[4, 5]</span></code></pre><p>明显简单多了好吧！<br>其实同理，filter也是自己为我们实现了那些步骤，所以我们只需要传人一个参数<code>f</code>，同样是一个<code>function</code>，来告诉它我们的筛选条件即可。Amazing！<br>##reduce<br>假设现在的需求是：求数组<code>arr = [1, 2, 3, 4, 5]</code>所有元素的积。当然难不倒我们啊！</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  r <span class="token operator">=</span> r <span class="token operator">*</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//120</span></code></pre><p>那我们看看用reduce怎么做：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> r <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>acc<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> acc <span class="token operator">*</span> e<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//120</span></code></pre><p>靠！又简单了这么多！不对，有点不一样，为什么有两个参数？原来reduce函数需要接收两个参数，第一个参数是我们需要做的事情，同样是一个<code>function</code>，比如我们现在求积，那就是<code>(acc, e) =&gt; acc * e</code>;至于第二个参数，我们可以理解为初始值，我们现在是求积，初始值当然是1啊。</p><p>有点懵，我们先来看看求和怎么做：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> r <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>acc<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> acc <span class="token operator">+</span> e<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//15</span></code></pre><p>I got it！<br>这三个函数太贴心啦！</p><h1 id="let-const"><a href="#let-const" class="headerlink" title="let / const"></a>let / const</h1><p>之前的内容我们用到了两个东西，可能已经发现了，<code>let</code>和<code>const</code>，这两个也是个新东西，简单来说，<code>let</code>和<code>const</code>是用来代替我们之前定义变量的关键字<code>var</code>的，问题来了，为啥要代替啊？说真的，具体原因我似懂非懂，所以说不清楚清楚，只知道<code>var</code>存在一些问题，我看到这样一个例子，我觉得挺有趣的：</p><p>执行下面这段代码</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>居然输出的是<code>10,10,10,10,10,10,10,10,10,10</code>？？？！！！，10个10！不应该是<code>0,1,2,3,4,5,6,7,8,9</code>吗？可真的就是10个10…<br>我看介绍说这是由于<code>var</code>没有<code>lexical scope</code>，什么鬼，不明白，要想输出0-9的话，需要把<code>var</code>改成<code>let</code>：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>试了下，真的是，，，涨姿势，听说这个例子还经常被面试官拿来装x，幸好看到了。<br>那么<code>const</code>呢？我的理解是，<code>const</code>和<code>let</code>的作用是一样的，都是用来定义变量，而不同的是<code>const</code>定义的变量其实是常量，也就是不能修改的。<br>OK！以后要用到<code>var</code>的地方就先改成<code>let</code>，如果是常量，那就换成<code>const</code>，简单粗暴QAQ…</p><h1 id="箭头函数（arrow-functions）"><a href="#箭头函数（arrow-functions）" class="headerlink" title="箭头函数（arrow functions）"></a>箭头函数（arrow functions）</h1><p>ES6引入了“箭头函数”的概念，以前我们都是用<code>function</code>定义函数表达式，而“箭头函数表达式”比<code>function</code>定义的函数表达式更短，并且不绑定自己的this，arguments，super或 new.target。比如：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> e <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们现在可以这样写：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> func <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">return</span> e <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>当只有一个参数时，圆括号是可选的，于是：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> func <span class="token operator">=</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">return</span> e <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>函数声明为单一表达式时，<code>{}</code>和<code>return</code>可以省略：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> func <span class="token operator">=</span> e <span class="token operator">=</span><span class="token operator">></span> e <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span></code></pre><p>这样写真的是简单多了，箭头函数还有更多高级的用法，包括支持默认参数，剩余参数，参数列表解构等等，有兴趣可以参考<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions</a></p><h1 id="字符串插值（string-interpolation）"><a href="#字符串插值（string-interpolation）" class="headerlink" title="字符串插值（string interpolation）"></a>字符串插值（string interpolation）</h1><p>我们写代码字符串自然少不了，有时字符串中会用到某些变量值，这时我们需要进行字符串拼接，例如：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'Crawford'</span><span class="token punctuation">;</span><span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token keyword">const</span> tel <span class="token operator">=</span> <span class="token number">13100000000</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'my name is: '</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">', and age is: '</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">', and tel is: '</span> <span class="token operator">+</span> tel <span class="token operator">+</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>说实话，有没有觉得代码太凌乱了，很多片段，阅读代码很不方便，特别是拼接的内容是对象属性的时候，例如：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> me <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'Crawford'</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>  tel<span class="token punctuation">:</span> <span class="token number">13100000000</span><span class="token punctuation">,</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'my name is: '</span> <span class="token operator">+</span> me<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">', and age is: '</span> <span class="token operator">+</span> me<span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">', and tel is: '</span> <span class="token operator">+</span> me<span class="token punctuation">.</span>tel <span class="token operator">+</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>眼花缭乱…ES6提供了一个实用的特性，叫字符串插值，用法是用反引号引用字符串，然后在里面就可以用<code>${}</code>引用任何JS表达式，例如上面代码可以改写成这样：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> me <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'Crawford'</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>  tel<span class="token punctuation">:</span> <span class="token number">13100000000</span><span class="token punctuation">,</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`my name is: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>me<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, and age is: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>me<span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, and tel is: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>me<span class="token punctuation">.</span>tel<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>清晰明了多了，方便快捷，谁用谁知道。<br>#class<br>类实际上是个“特殊的函数”，就像你能够定义的函数表达式和函数声明一样，类语法有两个组成部分：类表达式和类声明。<br>##类声明<br>定义一个类的一种方法是使用一个类声明。要声明一个类，你可以使用带有class关键字的类名（这里是“Rectangle”）。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>height<span class="token punctuation">,</span> width<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>###提升<br>函数声明和类声明之间的一个重要区别是函数声明会声明提升，类声明不会。你首先需要声明你的类，然后访问它，否则像下面的代码会抛出一个ReferenceError：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ReferenceError</span><span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>##类表达式<br>一个类表达式是定义一个类的另一种方式。类表达式可以是被命名的或匿名的。赋予一个命名类表达式的名称是类的主体的本地名称。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">/* 匿名类 */</span> <span class="token keyword">let</span> Rectangle <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>height<span class="token punctuation">,</span> width<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 命名的类 */</span> <span class="token keyword">let</span> Rectangle <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>height<span class="token punctuation">,</span> width<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>##使用 extends 创建子类<br>extends 关键字在类声明或类表达式中用于创建一个类作为另一个类的一个子类。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>   <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' makes a noise.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' barks.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'Mitzie'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 'Mitzie barks.'</span>d<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果子类中存在构造函数，则需要在使用“this”之前首先调用super（）。</p><p>也可以扩展传统的基于函数的“类”：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> Animal <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">}</span>Animal<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>speak <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' makes a noise.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' barks.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'Mitzie'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里要注意，类不能扩展常规（不可构造/非构造的）对象。如果要继承常规对象，可以改用Object.setPrototypeOf():</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">var</span> Animal <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' makes a noise.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>Dog<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> Animal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// If you do not do this you will get a TypeError when you invoke speak</span><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'Mitzie'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Mitzie makes a noise.</span></code></pre><p>##使用 super 调用超类<br>super 关键字用于调用对象的父对象上的函数。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>   <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' makes a noise.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Lion</span> <span class="token keyword">extends</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>  <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' roars.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>相关连接：</p><ul><li><a href="https://hacks.mozilla.org/2015/07/es6-in-depth-classes/">https://hacks.mozilla.org/2015/07/es6-in-depth-classes/</a></li><li><a href="http://www.infoq.com/cn/articles/es6-in-depth-classes">http://www.infoq.com/cn/articles/es6-in-depth-classes</a></li></ul><p>#数组解构&amp;对象解构<br>这篇文档写的相当不错：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment</a><br>马下慢慢看。<br>#Promise &amp; async/await</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise</a></li><li><a href="https://cnodejs.org/topic/560dbc826a1ed28204a1e7de">https://cnodejs.org/topic/560dbc826a1ed28204a1e7de</a><br>#资料<br>新特性还不止这些，下面这些资料都写得很不错，想了解更多可以参考一下：</li><li><a href="http://es6.ruanyifeng.com/">http://es6.ruanyifeng.com/</a></li><li><a href="http://www.infoq.com/cn/es6-in-depth/">http://www.infoq.com/cn/es6-in-depth/</a></li><li><a href="https://hacks.mozilla.org/category/es6-in-depth/">https://hacks.mozilla.org/category/es6-in-depth/</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> ES5 </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Gatsby搭建自己的博客</title>
      <link href="/2017/07/03/how-build-blog-with-gatsby/"/>
      <url>/2017/07/03/how-build-blog-with-gatsby/</url>
      
        <content type="html"><![CDATA[<p>今天学习了怎样用 Gatsby 搭建自己的 blog，终于有了自己的 blog，开心，这里简单记录一下使用方式吧。顺便当做自己的第一篇博客，希望以后自己能多写博客来提高自己</p><h1 id="安装-Gatsby"><a href="#安装-Gatsby" class="headerlink" title="安装 Gatsby"></a>安装 Gatsby</h1><p>首先安装 Gatsby：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g gatsby</code></pre><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>你可以用 gatsby 新建项目，我使用了大神写好的现成的项目，因为我觉得他的各种设计风格很棒，有现成的用当然好</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/magicly/gatsby-blog.git<span class="token function">npm</span> <span class="token function">install</span></code></pre><h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><pre><code>gatsby develop</code></pre><h1 id="打包部署"><a href="#打包部署" class="headerlink" title="打包部署"></a>打包部署</h1><pre><code>gatsby build</code></pre><p>这时在 public 下生成所有的资源，我用的 coding.net 的 pages 服务，把 public 下的目录 push 到 master 分支就可以。</p><h1 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h1><p>对于第一次搭建自己 blog 的我，使用 gatsby 来搭建自己的 blog 方便多了，以后会在这里记录下我的学习历程，分享一些经验，也算留作一些纪念吧<br>emmmmmmm….就先这样吧</p><p>奉上大神的项目，随意使用：<a href="https://github.com/magicly/gatsby-blog.git">https://github.com/magicly/gatsby-blog.git</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gatsby </tag>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
